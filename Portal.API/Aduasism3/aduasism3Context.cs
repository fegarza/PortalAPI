using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Portal.API.TodasLastablas
{
    public partial class aduasism3Context : DbContext
    {
        public aduasism3Context()
        {
        }

        public aduasism3Context(DbContextOptions<aduasism3Context> options)
            : base(options)
        {
        }

        public virtual DbSet<CcAnticiposFactura> CcAnticiposFacturas { get; set; }
        public virtual DbSet<CcDetDistAnticipo> CcDetDistAnticipos { get; set; }
        public virtual DbSet<CcDetDistFactura> CcDetDistFacturas { get; set; }
        public virtual DbSet<CcDetDistFacturaCancelacione> CcDetDistFacturaCancelaciones { get; set; }
        public virtual DbSet<CcDetDistFacturaConse> CcDetDistFacturaConses { get; set; }
        public virtual DbSet<CcDetOtrosIngreso> CcDetOtrosIngresos { get; set; }
        public virtual DbSet<CcEstadoCuentum> CcEstadoCuenta { get; set; }
        public virtual DbSet<CcParametro> CcParametros { get; set; }
        public virtual DbSet<CcReclasificacionFactura> CcReclasificacionFacturas { get; set; }
        public virtual DbSet<CcReclasificacionFacturasConse> CcReclasificacionFacturasConses { get; set; }
        public virtual DbSet<CcReclasificacionFacturasPo> CcReclasificacionFacturasPos { get; set; }
        public virtual DbSet<CcReclasificacionIngreso> CcReclasificacionIngresos { get; set; }
        public virtual DbSet<ClaseMaterial> ClaseMaterials { get; set; }
        public virtual DbSet<ClienteContactosEmail> ClienteContactosEmails { get; set; }
        public virtual DbSet<ClienteEnvioCorreo> ClienteEnvioCorreos { get; set; }
        public virtual DbSet<CmCveinsumo> CmCveinsumos { get; set; }
        public virtual DbSet<CmDetorden> CmDetordens { get; set; }
        public virtual DbSet<CmDetrecepcion> CmDetrecepcions { get; set; }
        public virtual DbSet<CmJefecompra> CmJefecompras { get; set; }
        public virtual DbSet<CmMoneda> CmMonedas { get; set; }
        public virtual DbSet<CmOrdencompra> CmOrdencompras { get; set; }
        public virtual DbSet<CmParametro> CmParametros { get; set; }
        public virtual DbSet<CmProveedor> CmProveedors { get; set; }
        public virtual DbSet<CmRecepcion> CmRecepcions { get; set; }
        public virtual DbSet<CmStatus> CmStatuses { get; set; }
        public virtual DbSet<CmTipocambio> CmTipocambios { get; set; }
        public virtual DbSet<CmTipoinsumo> CmTipoinsumos { get; set; }
        public virtual DbSet<CmTipopago> CmTipopagos { get; set; }
        public virtual DbSet<CmTipoproveedor> CmTipoproveedors { get; set; }
        public virtual DbSet<CmViaembarque> CmViaembarques { get; set; }
        public virtual DbSet<CoAreasCosto> CoAreasCostos { get; set; }
        public virtual DbSet<CoAutorizacion> CoAutorizacions { get; set; }
        public virtual DbSet<CoConceptoContable> CoConceptoContables { get; set; }
        public virtual DbSet<CoCostosPeriodo> CoCostosPeriodos { get; set; }
        public virtual DbSet<CoCptosCosto> CoCptosCostos { get; set; }
        public virtual DbSet<CoDetLogCosto> CoDetLogCostos { get; set; }
        public virtual DbSet<CoLogCosto> CoLogCostos { get; set; }
        public virtual DbSet<CoPeriodosCosto> CoPeriodosCostos { get; set; }
        public virtual DbSet<ColorSello> ColorSellos { get; set; }
        public virtual DbSet<CpAnticipoContratistum> CpAnticipoContratista { get; set; }
        public virtual DbSet<CpAnticipoOrdenCompra> CpAnticipoOrdenCompras { get; set; }
        public virtual DbSet<CpBeneficiario> CpBeneficiarios { get; set; }
        public virtual DbSet<CpCheque> CpCheques { get; set; }
        public virtual DbSet<CpChequeCancelado> CpChequeCancelados { get; set; }
        public virtual DbSet<CpConceptoPago> CpConceptoPagos { get; set; }
        public virtual DbSet<CpContratoContratistum> CpContratoContratista { get; set; }
        public virtual DbSet<CpDetDoctoPago> CpDetDoctoPagos { get; set; }
        public virtual DbSet<CpDetDoctoPagoCancelado> CpDetDoctoPagoCancelados { get; set; }
        public virtual DbSet<CpDetFacturaContratistum> CpDetFacturaContratista { get; set; }
        public virtual DbSet<CpDetFacturaPrestador> CpDetFacturaPrestadors { get; set; }
        public virtual DbSet<CpDetFacturaProveedor> CpDetFacturaProveedors { get; set; }
        public virtual DbSet<CpDetGastoComprobar> CpDetGastoComprobars { get; set; }
        public virtual DbSet<CpDetOrdenPago> CpDetOrdenPagos { get; set; }
        public virtual DbSet<CpDetOrdenPagoCorrespo> CpDetOrdenPagoCorrespos { get; set; }
        public virtual DbSet<CpDetReembolso> CpDetReembolsos { get; set; }
        public virtual DbSet<CpEstimacion> CpEstimacions { get; set; }
        public virtual DbSet<CpFacturaContratistaAjuste> CpFacturaContratistaAjustes { get; set; }
        public virtual DbSet<CpFacturaContratistum> CpFacturaContratista { get; set; }
        public virtual DbSet<CpFacturaPrestadorAjuste> CpFacturaPrestadorAjustes { get; set; }
        public virtual DbSet<CpFacturaPrestadorServicio> CpFacturaPrestadorServicios { get; set; }
        public virtual DbSet<CpFacturaProveedor> CpFacturaProveedors { get; set; }
        public virtual DbSet<CpFacturaProveedorAjuste> CpFacturaProveedorAjustes { get; set; }
        public virtual DbSet<CpFacturasDiferencia> CpFacturasDiferencias { get; set; }
        public virtual DbSet<CpGastoComprobar> CpGastoComprobars { get; set; }
        public virtual DbSet<CpOrdenCompra> CpOrdenCompras { get; set; }
        public virtual DbSet<CpOrdenPagoAjuste> CpOrdenPagoAjustes { get; set; }
        public virtual DbSet<CpOrdenPagoDctoSinFactura> CpOrdenPagoDctoSinFacturas { get; set; }
        public virtual DbSet<CpParametro> CpParametros { get; set; }
        public virtual DbSet<CpPorIva> CpPorIvas { get; set; }
        public virtual DbSet<CpRecepcion> CpRecepcions { get; set; }
        public virtual DbSet<CpReembolso> CpReembolsos { get; set; }
        public virtual DbSet<CpRelBenefConcepto> CpRelBenefConceptos { get; set; }
        public virtual DbSet<CpSeleccionPagosDocto> CpSeleccionPagosDoctos { get; set; }
        public virtual DbSet<CpStatus> CpStatuses { get; set; }
        public virtual DbSet<CpTablaXmlOrpa> CpTablaXmlOrpas { get; set; }
        public virtual DbSet<CpTipoBeneficiario> CpTipoBeneficiarios { get; set; }
        public virtual DbSet<CpTransSpeua> CpTransSpeuas { get; set; }
        public virtual DbSet<CpTransSpeuaCanceladum> CpTransSpeuaCancelada { get; set; }
        public virtual DbSet<CtConsecPoliza> CtConsecPolizas { get; set; }
        public virtual DbSet<CtConsecTipoPoliza> CtConsecTipoPolizas { get; set; }
        public virtual DbSet<CtConversion> CtConversions { get; set; }
        public virtual DbSet<CtCuentaContable> CtCuentaContables { get; set; }
        public virtual DbSet<CtDetFormatosInforme> CtDetFormatosInformes { get; set; }
        public virtual DbSet<CtDetMovtoContable> CtDetMovtoContables { get; set; }
        public virtual DbSet<CtDetTipoPolizaContable> CtDetTipoPolizaContables { get; set; }
        public virtual DbSet<CtEstadosFinanciero> CtEstadosFinancieros { get; set; }
        public virtual DbSet<CtFormatosInforme> CtFormatosInformes { get; set; }
        public virtual DbSet<CtInformesContable> CtInformesContables { get; set; }
        public virtual DbSet<CtLogContabilidad> CtLogContabilidads { get; set; }
        public virtual DbSet<CtLogicaContable> CtLogicaContables { get; set; }
        public virtual DbSet<CtMayorGeneral> CtMayorGenerals { get; set; }
        public virtual DbSet<CtMetodoPagoSat> CtMetodoPagoSats { get; set; }
        public virtual DbSet<CtMetodoPagoSatGasto> CtMetodoPagoSatGastos { get; set; }
        public virtual DbSet<CtMovtoContable> CtMovtoContables { get; set; }
        public virtual DbSet<CtOrigenCuentum> CtOrigenCuenta { get; set; }
        public virtual DbSet<CtOrigenLogica> CtOrigenLogicas { get; set; }
        public virtual DbSet<CtOrigenOperacion> CtOrigenOperacions { get; set; }
        public virtual DbSet<CtParametro> CtParametros { get; set; }
        public virtual DbSet<CtPeriodoContable> CtPeriodoContables { get; set; }
        public virtual DbSet<CtPresupuestoContable> CtPresupuestoContables { get; set; }
        public virtual DbSet<CtSaldosBeneficiario> CtSaldosBeneficiarios { get; set; }
        public virtual DbSet<CtTipoConversion> CtTipoConversions { get; set; }
        public virtual DbSet<CtTipoDocto> CtTipoDoctos { get; set; }
        public virtual DbSet<CtTipoPolizaContable> CtTipoPolizaContables { get; set; }
        public virtual DbSet<CtTipoProforma> CtTipoProformas { get; set; }
        public virtual DbSet<DigAplicacion> DigAplicacions { get; set; }
        public virtual DbSet<DigArchivo> DigArchivos { get; set; }
        public virtual DbSet<DigArchivoBitacora> DigArchivoBitacoras { get; set; }
        public virtual DbSet<DigArchivoExtension> DigArchivoExtensions { get; set; }
        public virtual DbSet<DigArchivoExtensionTipo> DigArchivoExtensionTipos { get; set; }
        public virtual DbSet<DigArchivoExtensione> DigArchivoExtensiones { get; set; }
        public virtual DbSet<DigDigitalizacion> DigDigitalizacions { get; set; }
        public virtual DbSet<DigDigitalizacionParametro> DigDigitalizacionParametros { get; set; }
        public virtual DbSet<DigDocumento> DigDocumentos { get; set; }
        public virtual DbSet<DigModulo> DigModulos { get; set; }
        public virtual DbSet<DigModuloDocumento> DigModuloDocumentos { get; set; }
        public virtual DbSet<DigModuloDocumentoCliente> DigModuloDocumentoClientes { get; set; }
        public virtual DbSet<DigModuloEvento> DigModuloEventos { get; set; }
        public virtual DbSet<DigParametro> DigParametros { get; set; }
        public virtual DbSet<DigRelacion> DigRelacions { get; set; }
        public virtual DbSet<DigSuscripcion> DigSuscripcions { get; set; }
        public virtual DbSet<EPedimento> EPedimentos { get; set; }
        public virtual DbSet<EmailContactosCliente> EmailContactosClientes { get; set; }
        public virtual DbSet<EmailContactosClienteCove> EmailContactosClienteCoves { get; set; }
        public virtual DbSet<EmailContactosLineaFletera> EmailContactosLineaFleteras { get; set; }
        public virtual DbSet<EntradaOrdenCompra> EntradaOrdenCompras { get; set; }
        public virtual DbSet<FAcceso> FAccesos { get; set; }
        public virtual DbSet<FAduPatUsuario> FAduPatUsuarios { get; set; }
        public virtual DbSet<FAutorizacionClienteImmex> FAutorizacionClienteImmices { get; set; }
        public virtual DbSet<FLogAutomail> FLogAutomails { get; set; }
        public virtual DbSet<FRfcServicio> FRfcServicios { get; set; }
        public virtual DbSet<FRfcServiciosCliente> FRfcServiciosClientes { get; set; }
        public virtual DbSet<FUsuarioAdu> FUsuarioAdus { get; set; }
        public virtual DbSet<FUsuarioPat> FUsuarioPats { get; set; }
        public virtual DbSet<Factividad> Factividads { get; set; }
        public virtual DbSet<Factualizacion> Factualizacions { get; set; }
        public virtual DbSet<Faduana> Faduanas { get; set; }
        public virtual DbSet<FaduanaSagarpa> FaduanaSagarpas { get; set; }
        public virtual DbSet<FaduanaVigor> FaduanaVigors { get; set; }
        public virtual DbSet<FaduasisComplemento1> FaduasisComplemento1s { get; set; }
        public virtual DbSet<FaduasisComplemento11> FaduasisComplemento1s1 { get; set; }
        public virtual DbSet<FaduasisCuotac> FaduasisCuotacs { get; set; }
        public virtual DbSet<FaduasisNom> FaduasisNoms { get; set; }
        public virtual DbSet<FaduasisPermiso> FaduasisPermisos { get; set; }
        public virtual DbSet<FaduasisWsSecurity> FaduasisWsSecurities { get; set; }
        public virtual DbSet<FagAdAme> FagAdAmes { get; set; }
        public virtual DbSet<FagAdMex> FagAdMices { get; set; }
        public virtual DbSet<FagenciaAduanal> FagenciaAduanals { get; set; }
        public virtual DbSet<FalmacenFiscal> FalmacenFiscals { get; set; }
        public virtual DbSet<Fanexo10Factura> Fanexo10Facturas { get; set; }
        public virtual DbSet<Fanexo10Referencium> Fanexo10Referencia { get; set; }
        public virtual DbSet<Fanexo10Remesa> Fanexo10Remesas { get; set; }
        public virtual DbSet<Fapoderado> Fapoderados { get; set; }
        public virtual DbSet<FarchivoEnvioFactura> FarchivoEnvioFacturas { get; set; }
        public virtual DbSet<FarchivoEnvioFerrocarril> FarchivoEnvioFerrocarrils { get; set; }
        public virtual DbSet<FarchivoEnvioOperacion> FarchivoEnvioOperacions { get; set; }
        public virtual DbSet<FarchivoEnvioPedimento> FarchivoEnvioPedimentos { get; set; }
        public virtual DbSet<FarchivosExpFactura> FarchivosExpFacturas { get; set; }
        public virtual DbSet<FautorizaDesbloquearCove> FautorizaDesbloquearCoves { get; set; }
        public virtual DbSet<FautorizaEmbarque> FautorizaEmbarques { get; set; }
        public virtual DbSet<FautorizaModifImpuesto> FautorizaModifImpuestos { get; set; }
        public virtual DbSet<FautorizaRectificacion> FautorizaRectificacions { get; set; }
        public virtual DbSet<FautorizaReferencia> FautorizaReferencias { get; set; }
        public virtual DbSet<FautorizaReferenciaPago> FautorizaReferenciaPagos { get; set; }
        public virtual DbSet<FautorizaTrafico> FautorizaTraficos { get; set; }
        public virtual DbSet<FautorizacionEmbarquePeso> FautorizacionEmbarquePesos { get; set; }
        public virtual DbSet<FautorizacionPagoVulnerable> FautorizacionPagoVulnerables { get; set; }
        public virtual DbSet<FautorizacionPedimento> FautorizacionPedimentos { get; set; }
        public virtual DbSet<FautorizacionR1> FautorizacionR1s { get; set; }
        public virtual DbSet<FauxCliente> FauxClientes { get; set; }
        public virtual DbSet<FauxCuentaCliente> FauxCuentaClientes { get; set; }
        public virtual DbSet<FauxOrigenExcel> FauxOrigenExcels { get; set; }
        public virtual DbSet<FauxProveedor> FauxProveedors { get; set; }
        public virtual DbSet<FauxTipoAdvalExcel> FauxTipoAdvalExcels { get; set; }
        public virtual DbSet<FauxUnidad> FauxUnidads { get; set; }
        public virtual DbSet<FauxUnidadExcel> FauxUnidadExcels { get; set; }
        public virtual DbSet<Fbanco> Fbancos { get; set; }
        public virtual DbSet<FbitacoraArchivosGenerado> FbitacoraArchivosGenerados { get; set; }
        public virtual DbSet<FbitacoraTarifa> FbitacoraTarifas { get; set; }
        public virtual DbSet<FbmpsFigura> FbmpsFiguras { get; set; }
        public virtual DbSet<Fbodega> Fbodegas { get; set; }
        public virtual DbSet<FbultoDetalle> FbultoDetalles { get; set; }
        public virtual DbSet<FbultoDetalleInventario> FbultoDetalleInventarios { get; set; }
        public virtual DbSet<FbultoHistorico> FbultoHistoricos { get; set; }
        public virtual DbSet<FbultoInventario> FbultoInventarios { get; set; }
        public virtual DbSet<FbultoTraf> FbultoTrafs { get; set; }
        public virtual DbSet<FbultoTrafDetum> FbultoTrafDeta { get; set; }
        public virtual DbSet<FcalculoFracFerro> FcalculoFracFerros { get; set; }
        public virtual DbSet<FcalculoFracPaso> FcalculoFracPasos { get; set; }
        public virtual DbSet<FcalculoFraccion> FcalculoFraccions { get; set; }
        public virtual DbSet<FcalculoGasto> FcalculoGastos { get; set; }
        public virtual DbSet<FcalculoGastosAme> FcalculoGastosAmes { get; set; }
        public virtual DbSet<FcalculoGenFer> FcalculoGenFers { get; set; }
        public virtual DbSet<FcalculoGeneral> FcalculoGenerals { get; set; }
        public virtual DbSet<FcalculoImpuesto> FcalculoImpuestos { get; set; }
        public virtual DbSet<FcalculoImpuestoFer> FcalculoImpuestoFers { get; set; }
        public virtual DbSet<FcartaSubdivision> FcartaSubdivisions { get; set; }
        public virtual DbSet<FcatalogoOpn> FcatalogoOpns { get; set; }
        public virtual DbSet<FclaCalidad> FclaCalidads { get; set; }
        public virtual DbSet<Fcliente> Fclientes { get; set; }
        public virtual DbSet<FclienteAduanaRegiman> FclienteAduanaRegimen { get; set; }
        public virtual DbSet<FclienteAutorizadoPagoFraccVul> FclienteAutorizadoPagoFraccVuls { get; set; }
        public virtual DbSet<FclienteConsecutivo> FclienteConsecutivos { get; set; }
        public virtual DbSet<FclienteConsecutivoRecibo> FclienteConsecutivoRecibos { get; set; }
        public virtual DbSet<FclienteCordone> FclienteCordones { get; set; }
        public virtual DbSet<FclienteEscape> FclienteEscapes { get; set; }
        public virtual DbSet<FclienteManifestacione> FclienteManifestaciones { get; set; }
        public virtual DbSet<FclienteNotificacion> FclienteNotificacions { get; set; }
        public virtual DbSet<FclientePerfil> FclientePerfils { get; set; }
        public virtual DbSet<FclientePerfilCartaEncomiendum> FclientePerfilCartaEncomienda { get; set; }
        public virtual DbSet<FclientePerfilEncargoConferido> FclientePerfilEncargoConferidos { get; set; }
        public virtual DbSet<FclientePerfilFactMex> FclientePerfilFactMices { get; set; }
        public virtual DbSet<FclientePerfilGeneral> FclientePerfilGenerals { get; set; }
        public virtual DbSet<FclientePerfilLeyendum> FclientePerfilLeyenda { get; set; }
        public virtual DbSet<FclientePerfilManvalcartum> FclientePerfilManvalcarta { get; set; }
        public virtual DbSet<FclientePerfilProsec> FclientePerfilProsecs { get; set; }
        public virtual DbSet<FclientePerfilRegFraccionPer> FclientePerfilRegFraccionPers { get; set; }
        public virtual DbSet<FclientePerfilRegiIdenAduana> FclientePerfilRegiIdenAduanas { get; set; }
        public virtual DbSet<FclientePerfilRegiman> FclientePerfilRegimen { get; set; }
        public virtual DbSet<FclientePerfilRegimenAduana> FclientePerfilRegimenAduanas { get; set; }
        public virtual DbSet<FclientePerfilRegimenFraccion> FclientePerfilRegimenFraccions { get; set; }
        public virtual DbSet<FclientePerfilRegimenFraccionAduana> FclientePerfilRegimenFraccionAduanas { get; set; }
        public virtual DbSet<FclientePerfilTransporte> FclientePerfilTransportes { get; set; }
        public virtual DbSet<FclientePlantum> FclientePlanta { get; set; }
        public virtual DbSet<FclientePrefijo> FclientePrefijos { get; set; }
        public virtual DbSet<FclienteProveedorCatalogo> FclienteProveedorCatalogos { get; set; }
        public virtual DbSet<Fcompliance> Fcompliances { get; set; }
        public virtual DbSet<Fcompliance1> Fcompliances1 { get; set; }
        public virtual DbSet<Fconcepto> Fconceptos { get; set; }
        public virtual DbSet<FconceptosAme> FconceptosAmes { get; set; }
        public virtual DbSet<FconceptosNoPedimento> FconceptosNoPedimentos { get; set; }
        public virtual DbSet<FconsecLecAuto> FconsecLecAutos { get; set; }
        public virtual DbSet<FconsecXAdupat> FconsecXAdupats { get; set; }
        public virtual DbSet<FconsecpedNout> FconsecpedNouts { get; set; }
        public virtual DbSet<FconsecutivoArchivoEncargo> FconsecutivoArchivoEncargos { get; set; }
        public virtual DbSet<FconsecutivoCalculo> FconsecutivoCalculos { get; set; }
        public virtual DbSet<FconsecutivoControl> FconsecutivoControls { get; set; }
        public virtual DbSet<FconsecutivoEmbarque> FconsecutivoEmbarques { get; set; }
        public virtual DbSet<FconsecutivoEmbarqueLight> FconsecutivoEmbarqueLights { get; set; }
        public virtual DbSet<FconsecutivoEntradum> FconsecutivoEntrada { get; set; }
        public virtual DbSet<FconsecutivoFacSinEnt> FconsecutivoFacSinEnts { get; set; }
        public virtual DbSet<FconsecutivoFactura> FconsecutivoFacturas { get; set; }
        public virtual DbSet<FconsecutivoFerrocarril> FconsecutivoFerrocarrils { get; set; }
        public virtual DbSet<FconsecutivoFolioEntradum> FconsecutivoFolioEntrada { get; set; }
        public virtual DbSet<FconsecutivoManifestacion> FconsecutivoManifestacions { get; set; }
        public virtual DbSet<FconsecutivoNoPedimento> FconsecutivoNoPedimentos { get; set; }
        public virtual DbSet<FconsecutivoProveedor> FconsecutivoProveedors { get; set; }
        public virtual DbSet<FconsecutivoRecibo> FconsecutivoRecibos { get; set; }
        public virtual DbSet<FconsecutivoReferencium> FconsecutivoReferencia { get; set; }
        public virtual DbSet<FconsecutivoSagar> FconsecutivoSagars { get; set; }
        public virtual DbSet<FconsecutivoShipper> FconsecutivoShippers { get; set; }
        public virtual DbSet<FconsecutivoTrafico> FconsecutivoTraficos { get; set; }
        public virtual DbSet<FconsecutivoTraficoCliente> FconsecutivoTraficoClientes { get; set; }
        public virtual DbSet<FconsecutivoXBodegaCalculo> FconsecutivoXBodegaCalculos { get; set; }
        public virtual DbSet<FconsecutivoXBodegaEmbarque> FconsecutivoXBodegaEmbarques { get; set; }
        public virtual DbSet<FconsecutivoXBodegaPedimento> FconsecutivoXBodegaPedimentos { get; set; }
        public virtual DbSet<FconsecutivoXBodegaTrafico> FconsecutivoXBodegaTraficos { get; set; }
        public virtual DbSet<FconsecutivosSagcon> FconsecutivosSagcons { get; set; }
        public virtual DbSet<Fconsignatario> Fconsignatarios { get; set; }
        public virtual DbSet<FconsolidaFacturasCarga> FconsolidaFacturasCargas { get; set; }
        public virtual DbSet<FcontBanco> FcontBancos { get; set; }
        public virtual DbSet<FcontMaquila> FcontMaquilas { get; set; }
        public virtual DbSet<FcontNormal> FcontNormals { get; set; }
        public virtual DbSet<FcontNormalAux> FcontNormalAuxes { get; set; }
        public virtual DbSet<FcontProfepa> FcontProfepas { get; set; }
        public virtual DbSet<FcontSagar> FcontSagars { get; set; }
        public virtual DbSet<FcontTransaccion> FcontTransaccions { get; set; }
        public virtual DbSet<Fcontacto> Fcontactos { get; set; }
        public virtual DbSet<FcontadorCodigo> FcontadorCodigos { get; set; }
        public virtual DbSet<FcontadoresAduanaPatente> FcontadoresAduanaPatentes { get; set; }
        public virtual DbSet<FcontrolBascula> FcontrolBasculas { get; set; }
        public virtual DbSet<FcontrolEmbarque> FcontrolEmbarques { get; set; }
        public virtual DbSet<Fcoorporativo> Fcoorporativos { get; set; }
        public virtual DbSet<FcoorporativoCliente> FcoorporativoClientes { get; set; }
        public virtual DbSet<Fcordon> Fcordons { get; set; }
        public virtual DbSet<FcorrelFrac> FcorrelFracs { get; set; }
        public virtual DbSet<FcorreoInterno> FcorreoInternos { get; set; }
        public virtual DbSet<Fcorresponsal> Fcorresponsals { get; set; }
        public virtual DbSet<FcorresponsalReferencium> FcorresponsalReferencia { get; set; }
        public virtual DbSet<Fcove> Fcoves { get; set; }
        public virtual DbSet<FcoveClienteObservacione> FcoveClienteObservaciones { get; set; }
        public virtual DbSet<FcoveFactura> FcoveFacturas { get; set; }
        public virtual DbSet<FcoveMercanciaMarca> FcoveMercanciaMarcas { get; set; }
        public virtual DbSet<FcoveMercancium> FcoveMercancia { get; set; }
        public virtual DbSet<FcovePatenteCorresponsal> FcovePatenteCorresponsals { get; set; }
        public virtual DbSet<FcovePedimento> FcovePedimentos { get; set; }
        public virtual DbSet<FcoveRemesa> FcoveRemesas { get; set; }
        public virtual DbSet<FcoveRemesaHistorico> FcoveRemesaHistoricos { get; set; }
        public virtual DbSet<FcoveRfcConsultaCorresponsal> FcoveRfcConsultaCorresponsals { get; set; }
        public virtual DbSet<FcoveRfcConsultum> FcoveRfcConsulta { get; set; }
        public virtual DbSet<FcoveRuta> FcoveRutas { get; set; }
        public virtual DbSet<FcoveRutasCliente> FcoveRutasClientes { get; set; }
        public virtual DbSet<FcoveRutasUsuario> FcoveRutasUsuarios { get; set; }
        public virtual DbSet<FcoveXmlRespaldo> FcoveXmlRespaldos { get; set; }
        public virtual DbSet<FcoveXmlW> FcoveXmlWs { get; set; }
        public virtual DbSet<Fcoved> Fcoveds { get; set; }
        public virtual DbSet<FcovedCatalogo> FcovedCatalogos { get; set; }
        public virtual DbSet<FcovedDocumento> FcovedDocumentos { get; set; }
        public virtual DbSet<FcovedPdf> FcovedPdfs { get; set; }
        public virtual DbSet<FdLote> FdLotes { get; set; }
        public virtual DbSet<FdcertificadoOrigen> FdcertificadoOrigens { get; set; }
        public virtual DbSet<Fdespacho> Fdespachos { get; set; }
        public virtual DbSet<FdespachoBlDetalleV> FdespachoBlDetalleVs { get; set; }
        public virtual DbSet<FdespachoBlV> FdespachoBlVs { get; set; }
        public virtual DbSet<FdespachoDependenciaInspeccion> FdespachoDependenciaInspeccions { get; set; }
        public virtual DbSet<FdespachoFechaConsultaBl> FdespachoFechaConsultaBls { get; set; }
        public virtual DbSet<FdespachoListadoBl> FdespachoListadoBls { get; set; }
        public virtual DbSet<FdespachoListadoBlSello> FdespachoListadoBlSellos { get; set; }
        public virtual DbSet<FdespachoOperacion> FdespachoOperacions { get; set; }
        public virtual DbSet<FdespachoPedimento> FdespachoPedimentos { get; set; }
        public virtual DbSet<FdespachoPedimentoV> FdespachoPedimentoVs { get; set; }
        public virtual DbSet<FdespachoTransportistum> FdespachoTransportista { get; set; }
        public virtual DbSet<FdestinatarioEntradaFactura> FdestinatarioEntradaFacturas { get; set; }
        public virtual DbSet<FdestinatarioFerrocarrilFactura> FdestinatarioFerrocarrilFacturas { get; set; }
        public virtual DbSet<FdestinatarioRemesaFactura> FdestinatarioRemesaFacturas { get; set; }
        public virtual DbSet<Fdestino> Fdestinos { get; set; }
        public virtual DbSet<FdestinoFinal> FdestinoFinals { get; set; }
        public virtual DbSet<FdestinoFinalLight> FdestinoFinalLights { get; set; }
        public virtual DbSet<Fdetalle> Fdetalles { get; set; }
        public virtual DbSet<FdetalleFraccion> FdetalleFraccions { get; set; }
        public virtual DbSet<FdetallePartidum> FdetallePartida { get; set; }
        public virtual DbSet<FdetalleShipper> FdetalleShippers { get; set; }
        public virtual DbSet<Fdfactura> Fdfacturas { get; set; }
        public virtual DbSet<Fdfactura2> Fdfactura2s { get; set; }
        public virtual DbSet<FdfacturaElect> FdfacturaElects { get; set; }
        public virtual DbSet<FdfacturaSeries> FdfacturaSeries { get; set; }
        public virtual DbSet<FdigArea> FdigAreas { get; set; }
        public virtual DbSet<FdigitalNombre> FdigitalNombres { get; set; }
        public virtual DbSet<Fdigitalizacion> Fdigitalizacions { get; set; }
        public virtual DbSet<FdigitalizacionCarpetum> FdigitalizacionCarpeta { get; set; }
        public virtual DbSet<FdigitalizacionDetalle> FdigitalizacionDetalles { get; set; }
        public virtual DbSet<FdigitalizacionDocumento> FdigitalizacionDocumentos { get; set; }
        public virtual DbSet<FdigitalizacionGenerale> FdigitalizacionGenerales { get; set; }
        public virtual DbSet<FdigitalizacionParametro> FdigitalizacionParametros { get; set; }
        public virtual DbSet<FdigitalizacionPedimento> FdigitalizacionPedimentos { get; set; }
        public virtual DbSet<FdigitalizacionTipo> FdigitalizacionTipos { get; set; }
        public virtual DbSet<FdigitalizacionTrafico> FdigitalizacionTraficos { get; set; }
        public virtual DbSet<FdodaQr> FdodaQrs { get; set; }
        public virtual DbSet<FdodaQrContenedor> FdodaQrContenedors { get; set; }
        public virtual DbSet<FdodaQrContenedorDetalle> FdodaQrContenedorDetalles { get; set; }
        public virtual DbSet<FdodaQrDetalle> FdodaQrDetalles { get; set; }
        public virtual DbSet<FdodaQrLog> FdodaQrLogs { get; set; }
        public virtual DbSet<FdodaQrLogin> FdodaQrLogins { get; set; }
        public virtual DbSet<FdodaQrPedimentoAmericano> FdodaQrPedimentoAmericanos { get; set; }
        public virtual DbSet<FdodaQrXml> FdodaQrXmls { get; set; }
        public virtual DbSet<FdordenCompra> FdordenCompras { get; set; }
        public virtual DbSet<Fdtrafico> Fdtraficos { get; set; }
        public virtual DbSet<FeEmisor> FeEmisors { get; set; }
        public virtual DbSet<FeEmisorRegimenfiscal> FeEmisorRegimenfiscals { get; set; }
        public virtual DbSet<Fembarque> Fembarques { get; set; }
        public virtual DbSet<Fembarque1> Fembarques1 { get; set; }
        public virtual DbSet<FembarqueEei> FembarqueEeis { get; set; }
        public virtual DbSet<FembarqueEliminado> FembarqueEliminados { get; set; }
        public virtual DbSet<FembarqueInbond> FembarqueInbonds { get; set; }
        public virtual DbSet<FembarqueIssue> FembarqueIssues { get; set; }
        public virtual DbSet<FembarqueLight> FembarqueLights { get; set; }
        public virtual DbSet<Fencabezado> Fencabezados { get; set; }
        public virtual DbSet<FentradaBodega> FentradaBodegas { get; set; }
        public virtual DbSet<FentradaBodegaRespaldo> FentradaBodegaRespaldos { get; set; }
        public virtual DbSet<FentradaCarton> FentradaCartons { get; set; }
        public virtual DbSet<FentradaContenedore> FentradaContenedores { get; set; }
        public virtual DbSet<FentradaDefault> FentradaDefaults { get; set; }
        public virtual DbSet<FentradaGuium> FentradaGuia { get; set; }
        public virtual DbSet<FentradaMaster> FentradaMasters { get; set; }
        public virtual DbSet<FentradaQuimico> FentradaQuimicos { get; set; }
        public virtual DbSet<FequivalenciaCoveHelp> FequivalenciaCoveHelps { get; set; }
        public virtual DbSet<FequivalenciaUnidade> FequivalenciaUnidades { get; set; }
        public virtual DbSet<Ferror> Ferrors { get; set; }
        public virtual DbSet<FerrorAvisoTraslado> FerrorAvisoTraslados { get; set; }
        public virtual DbSet<FerrorBanco> FerrorBancos { get; set; }
        public virtual DbSet<FerrorBancoCentralizado> FerrorBancoCentralizados { get; set; }
        public virtual DbSet<FerrorEncargo> FerrorEncargos { get; set; }
        public virtual DbSet<FerrorNopedimento> FerrorNopedimentos { get; set; }
        public virtual DbSet<FerrorSagar> FerrorSagars { get; set; }
        public virtual DbSet<FerrorSagar2> FerrorSagar2s { get; set; }
        public virtual DbSet<FerrorShcp> FerrorShcps { get; set; }
        public virtual DbSet<FerrorShcpM3> FerrorShcpM3s { get; set; }
        public virtual DbSet<Fescape> Fescapes { get; set; }
        public virtual DbSet<Festado> Festados { get; set; }
        public virtual DbSet<Fevento> Feventos { get; set; }
        public virtual DbSet<FeventoManual> FeventoManuals { get; set; }
        public virtual DbSet<FeventosAduana> FeventosAduanas { get; set; }
        public virtual DbSet<FeventosAduana2> FeventosAduana2s { get; set; }
        public virtual DbSet<FeventosAduanaEstado> FeventosAduanaEstados { get; set; }
        public virtual DbSet<FeventosAduanaSubedo> FeventosAduanaSubedos { get; set; }
        public virtual DbSet<FfactorMonedum> FfactorMoneda { get; set; }
        public virtual DbSet<FfacturaClasLight> FfacturaClasLights { get; set; }
        public virtual DbSet<FfacturaDet> FfacturaDets { get; set; }
        public virtual DbSet<FfacturaDetLight> FfacturaDetLights { get; set; }
        public virtual DbSet<FfacturaDetalleCaso> FfacturaDetalleCasos { get; set; }
        public virtual DbSet<FfacturaGen> FfacturaGens { get; set; }
        public virtual DbSet<FfacturaGenLight> FfacturaGenLights { get; set; }
        public virtual DbSet<FfacturasConsolidada> FfacturasConsolidadas { get; set; }
        public virtual DbSet<FfacturasDetalle> FfacturasDetalles { get; set; }
        public virtual DbSet<FfccCarrosFpedimentoDetalleView> FfccCarrosFpedimentoDetalleViews { get; set; }
        public virtual DbSet<FferrConocimiento> FferrConocimientos { get; set; }
        public virtual DbSet<FferrConocimientoCarro> FferrConocimientoCarros { get; set; }
        public virtual DbSet<Fferrocarril> Fferrocarrils { get; set; }
        public virtual DbSet<FferrocarrilCarro> FferrocarrilCarros { get; set; }
        public virtual DbSet<FferrocarrilFactura> FferrocarrilFacturas { get; set; }
        public virtual DbSet<FferrocarrilIdentificador> FferrocarrilIdentificadors { get; set; }
        public virtual DbSet<FferrocarrilPartidum> FferrocarrilPartida { get; set; }
        public virtual DbSet<FferrocarrilPermiso> FferrocarrilPermisos { get; set; }
        public virtual DbSet<FfgAcceso> FfgAccesos { get; set; }
        public virtual DbSet<FfgAduanaSeccion> FfgAduanaSeccions { get; set; }
        public virtual DbSet<FfgClaveProdServCfdi> FfgClaveProdServCfdis { get; set; }
        public virtual DbSet<FfgClaveUnidadCfdi> FfgClaveUnidadCfdis { get; set; }
        public virtual DbSet<FfgClienteMetodoFormaPago> FfgClienteMetodoFormaPagos { get; set; }
        public virtual DbSet<FfgClientePerfilPago> FfgClientePerfilPagos { get; set; }
        public virtual DbSet<FfgCodigopostalCfdi> FfgCodigopostalCfdis { get; set; }
        public virtual DbSet<FfgConsecuFactura> FfgConsecuFacturas { get; set; }
        public virtual DbSet<FfgConsecuNotum> FfgConsecuNota { get; set; }
        public virtual DbSet<FfgConsecutivoFactAme> FfgConsecutivoFactAmes { get; set; }
        public virtual DbSet<FfgConsecutivoFactura> FfgConsecutivoFacturas { get; set; }
        public virtual DbSet<FfgConsecutivoFolio> FfgConsecutivoFolios { get; set; }
        public virtual DbSet<FfgConsecutivoFolioAme> FfgConsecutivoFolioAmes { get; set; }
        public virtual DbSet<FfgConsecutivoPrecuentum> FfgConsecutivoPrecuenta { get; set; }
        public virtual DbSet<FfgConsecutivoRelacion> FfgConsecutivoRelacions { get; set; }
        public virtual DbSet<FfgConsecutivoRelacionAme> FfgConsecutivoRelacionAmes { get; set; }
        public virtual DbSet<FfgConsecutivoRendicion> FfgConsecutivoRendicions { get; set; }
        public virtual DbSet<FfgControlPagoPeca> FfgControlPagoPecas { get; set; }
        public virtual DbSet<FfgDfacturaAme> FfgDfacturaAmes { get; set; }
        public virtual DbSet<FfgDfacturaMex> FfgDfacturaMices { get; set; }
        public virtual DbSet<FfgDprecuentaMex> FfgDprecuentaMices { get; set; }
        public virtual DbSet<FfgDrelPagoComision> FfgDrelPagoComisions { get; set; }
        public virtual DbSet<FfgDrelacionEnvio> FfgDrelacionEnvios { get; set; }
        public virtual DbSet<FfgDrelacionEnvioAme> FfgDrelacionEnvioAmes { get; set; }
        public virtual DbSet<FfgDtabulador> FfgDtabuladors { get; set; }
        public virtual DbSet<FfgEsquemaFacturaElectronica> FfgEsquemaFacturaElectronicas { get; set; }
        public virtual DbSet<FfgEstadoPac> FfgEstadoPacs { get; set; }
        public virtual DbSet<FfgFormaPago> FfgFormaPagos { get; set; }
        public virtual DbSet<FfgFormaPagoCfdi> FfgFormaPagoCfdis { get; set; }
        public virtual DbSet<FfgGeneralFacAme> FfgGeneralFacAmes { get; set; }
        public virtual DbSet<FfgGeneralFactura> FfgGeneralFacturas { get; set; }
        public virtual DbSet<FfgGfacturaAme> FfgGfacturaAmes { get; set; }
        public virtual DbSet<FfgGfacturaMex> FfgGfacturaMices { get; set; }
        public virtual DbSet<FfgGprecuentaMex> FfgGprecuentaMices { get; set; }
        public virtual DbSet<FfgGtabulador> FfgGtabuladors { get; set; }
        public virtual DbSet<FfgHonorario> FfgHonorarios { get; set; }
        public virtual DbSet<FfgImpuestoCfdi> FfgImpuestoCfdis { get; set; }
        public virtual DbSet<FfgLeyenda> FfgLeyendas { get; set; }
        public virtual DbSet<FfgListaEnvio> FfgListaEnvios { get; set; }
        public virtual DbSet<FfgMetodoPago> FfgMetodoPagos { get; set; }
        public virtual DbSet<FfgMetodoPagoCfdi> FfgMetodoPagoCfdis { get; set; }
        public virtual DbSet<FfgMonedaCfdi> FfgMonedaCfdis { get; set; }
        public virtual DbSet<FfgMotivosCancelacion> FfgMotivosCancelacions { get; set; }
        public virtual DbSet<FfgOficinasAme> FfgOficinasAmes { get; set; }
        public virtual DbSet<FfgOficinasMex> FfgOficinasMices { get; set; }
        public virtual DbSet<FfgPaisCfdi> FfgPaisCfdis { get; set; }
        public virtual DbSet<FfgPedimentosExterno> FfgPedimentosExternos { get; set; }
        public virtual DbSet<FfgRegimenFiscalCfdi> FfgRegimenFiscalCfdis { get; set; }
        public virtual DbSet<FfgRelArchivosEnvioPdf> FfgRelArchivosEnvioPdfs { get; set; }
        public virtual DbSet<FfgRelCliTab> FfgRelCliTabs { get; set; }
        public virtual DbSet<FfgRelClifacCliped> FfgRelClifacClipeds { get; set; }
        public virtual DbSet<FfgRelFacameEntTraf> FfgRelFacameEntTrafs { get; set; }
        public virtual DbSet<FfgRelOficinaCliente> FfgRelOficinaClientes { get; set; }
        public virtual DbSet<FfgRelOficinaClienteMex> FfgRelOficinaClienteMices { get; set; }
        public virtual DbSet<FfgRelPagoComision> FfgRelPagoComisions { get; set; }
        public virtual DbSet<FfgRelPedFact> FfgRelPedFacts { get; set; }
        public virtual DbSet<FfgRelacionEnvio> FfgRelacionEnvios { get; set; }
        public virtual DbSet<FfgRelacionEnvioAme> FfgRelacionEnvioAmes { get; set; }
        public virtual DbSet<FfgReporteClienteConcepto> FfgReporteClienteConceptos { get; set; }
        public virtual DbSet<FfgTabAduana> FfgTabAduanas { get; set; }
        public virtual DbSet<FfgTabRegiman> FfgTabRegimen { get; set; }
        public virtual DbSet<FfgTabuladorDet> FfgTabuladorDets { get; set; }
        public virtual DbSet<FfgTabuladorGen> FfgTabuladorGens { get; set; }
        public virtual DbSet<FfgTasaoCuotaCfdi> FfgTasaoCuotaCfdis { get; set; }
        public virtual DbSet<FfgTipoComprobanteCfdi> FfgTipoComprobanteCfdis { get; set; }
        public virtual DbSet<FfgTipoFactor> FfgTipoFactors { get; set; }
        public virtual DbSet<FfgTipoRelacionCfdi> FfgTipoRelacionCfdis { get; set; }
        public virtual DbSet<FfgUsoCfdi> FfgUsoCfdis { get; set; }
        public virtual DbSet<FfirmaDigital> FfirmaDigitals { get; set; }
        public virtual DbSet<Ffolio> Ffolios { get; set; }
        public virtual DbSet<FfolioNoUtilizado> FfolioNoUtilizados { get; set; }
        public virtual DbSet<FfolioRango> FfolioRangos { get; set; }
        public virtual DbSet<FformaPago> FformaPagos { get; set; }
        public virtual DbSet<Fforwarding> Fforwardings { get; set; }
        public virtual DbSet<FfracMexAdvaTemp> FfracMexAdvaTemps { get; set; }
        public virtual DbSet<FfraccionAme> FfraccionAmes { get; set; }
        public virtual DbSet<FfraccionCliente> FfraccionClientes { get; set; }
        public virtual DbSet<FfraccionIep> FfraccionIeps { get; set; }
        public virtual DbSet<FfraccionIepsTipo> FfraccionIepsTipos { get; set; }
        public virtual DbSet<FfraccionIepsTiposTipoAyudum> FfraccionIepsTiposTipoAyuda { get; set; }
        public virtual DbSet<FfraccionIepsTiposTipoMonedaAyudum> FfraccionIepsTiposTipoMonedaAyuda { get; set; }
        public virtual DbSet<FfraccionMex> FfraccionMices { get; set; }
        public virtual DbSet<FfraccionMexn> FfraccionMexns { get; set; }
        public virtual DbSet<FfraccionNico> FfraccionNicos { get; set; }
        public virtual DbSet<FfraccionRestriccion> FfraccionRestriccions { get; set; }
        public virtual DbSet<FfraccionRestriccionDetalle> FfraccionRestriccionDetalles { get; set; }
        public virtual DbSet<Ffraccione> Ffracciones { get; set; }
        public virtual DbSet<FfraccionesDaltile> FfraccionesDaltiles { get; set; }
        public virtual DbSet<FfraccionesSensible> FfraccionesSensibles { get; set; }
        public virtual DbSet<FgLote> FgLotes { get; set; }
        public virtual DbSet<FgcertificadoOrigen> FgcertificadoOrigens { get; set; }
        public virtual DbSet<Fgenerale> Fgenerales { get; set; }
        public virtual DbSet<Fgenerales2> Fgenerales2s { get; set; }
        public virtual DbSet<FgeneralesAviso> FgeneralesAvisos { get; set; }
        public virtual DbSet<FgeneralesCove> FgeneralesCoves { get; set; }
        public virtual DbSet<FgeneralesRuta> FgeneralesRutas { get; set; }
        public virtual DbSet<Fgfactura> Fgfacturas { get; set; }
        public virtual DbSet<FgfacturaElect> FgfacturaElects { get; set; }
        public virtual DbSet<FgfacturaSalesOrder> FgfacturaSalesOrders { get; set; }
        public virtual DbSet<FgordenCompra> FgordenCompras { get; set; }
        public virtual DbSet<Fgrupo> Fgrupos { get; set; }
        public virtual DbSet<FgrupoCliente> FgrupoClientes { get; set; }
        public virtual DbSet<FgrupoUsuario> FgrupoUsuarios { get; set; }
        public virtual DbSet<Fgtrafico> Fgtraficos { get; set; }
        public virtual DbSet<FgtraficoObservacion> FgtraficoObservacions { get; set; }
        public virtual DbSet<FhojaCalculo> FhojaCalculos { get; set; }
        public virtual DbSet<FidentificadorNoFactorActualizacion> FidentificadorNoFactorActualizacions { get; set; }
        public virtual DbSet<Fimpuesto> Fimpuestos { get; set; }
        public virtual DbSet<Findie> Findice { get; set; }
        public virtual DbSet<Flaboratorio> Flaboratorios { get; set; }
        public virtual DbSet<FlectorCimex> FlectorCimices { get; set; }
        public virtual DbSet<FleyendaCalculo> FleyendaCalculos { get; set; }
        public virtual DbSet<FleyendaPedimento> FleyendaPedimentos { get; set; }
        public virtual DbSet<FleyendaSistema> FleyendaSistemas { get; set; }
        public virtual DbSet<FlimiteCliente> FlimiteClientes { get; set; }
        public virtual DbSet<FlineaFletera> FlineaFleteras { get; set; }
        public virtual DbSet<FmanifestacionAnexos65> FmanifestacionAnexos65s { get; set; }
        public virtual DbSet<Fmanifestacione> Fmanifestaciones { get; set; }
        public virtual DbSet<FmedioTransporte> FmedioTransportes { get; set; }
        public virtual DbSet<Fmenu> Fmenus { get; set; }
        public virtual DbSet<FmercanciaLight> FmercanciaLights { get; set; }
        public virtual DbSet<FmercanciaLog> FmercanciaLogs { get; set; }
        public virtual DbSet<Fmercancium> Fmercancia { get; set; }
        public virtual DbSet<FmonedaFactor> FmonedaFactors { get; set; }
        public virtual DbSet<FmotivoR1> FmotivoR1s { get; set; }
        public virtual DbSet<FmovimentoComandum> FmovimentoComanda { get; set; }
        public virtual DbSet<FmovimientoBodega> FmovimientoBodegas { get; set; }
        public virtual DbSet<Fmunicipio> Fmunicipios { get; set; }
        public virtual DbSet<FnoPedimento> FnoPedimentos { get; set; }
        public virtual DbSet<FnoPedimentoDetalle> FnoPedimentoDetalles { get; set; }
        public virtual DbSet<FnoelecCliente> FnoelecClientes { get; set; }
        public virtual DbSet<FnoelecClienteAduana> FnoelecClienteAduanas { get; set; }
        public virtual DbSet<Fnomenclatura> Fnomenclaturas { get; set; }
        public virtual DbSet<FnumerosDeOrden> FnumerosDeOrdens { get; set; }
        public virtual DbSet<Fobjeto> Fobjetos { get; set; }
        public virtual DbSet<Fobjeto1> Fobjetos1 { get; set; }
        public virtual DbSet<Fobservacione> Fobservaciones { get; set; }
        public virtual DbSet<FoliadorBc> FoliadorBcs { get; set; }
        public virtual DbSet<FoliadorCliente> FoliadorClientes { get; set; }
        public virtual DbSet<FotosEmbarque> FotosEmbarques { get; set; }
        public virtual DbSet<FotosEntradum> FotosEntrada { get; set; }
        public virtual DbSet<FotosReciboDamageLight> FotosReciboDamageLights { get; set; }
        public virtual DbSet<FotosReciboLight> FotosReciboLights { get; set; }
        public virtual DbSet<FpagoGeneral> FpagoGenerals { get; set; }
        public virtual DbSet<FpagoGeneralManual> FpagoGeneralManuals { get; set; }
        public virtual DbSet<Fpai> Fpais { get; set; }
        public virtual DbSet<FpaisConversion> FpaisConversions { get; set; }
        public virtual DbSet<FparametrosChequeElectronico> FparametrosChequeElectronicos { get; set; }
        public virtual DbSet<FpedCartaCupo> FpedCartaCupos { get; set; }
        public virtual DbSet<FpedCartaCupoIdent> FpedCartaCupoIdents { get; set; }
        public virtual DbSet<FpedCasoComple> FpedCasoComples { get; set; }
        public virtual DbSet<FpedComple> FpedComples { get; set; }
        public virtual DbSet<FpedCompleCompensacion> FpedCompleCompensacions { get; set; }
        public virtual DbSet<FpedCompleCompensacionFpv> FpedCompleCompensacionFpvs { get; set; }
        public virtual DbSet<FpedComplePermiso> FpedComplePermisos { get; set; }
        public virtual DbSet<FpedComplementarioDiferencia> FpedComplementarioDiferencias { get; set; }
        public virtual DbSet<FpedDescargosComple> FpedDescargosComples { get; set; }
        public virtual DbSet<FpedDetObserComple> FpedDetObserComples { get; set; }
        public virtual DbSet<FpedDetalleComple> FpedDetalleComples { get; set; }
        public virtual DbSet<FpedDetalleGravComple> FpedDetalleGravComples { get; set; }
        public virtual DbSet<FpedDetalleImpComple> FpedDetalleImpComples { get; set; }
        public virtual DbSet<FpedObserComple> FpedObserComples { get; set; }
        public virtual DbSet<FpedPruebaComple> FpedPruebaComples { get; set; }
        public virtual DbSet<FpedTasasComple> FpedTasasComples { get; set; }
        public virtual DbSet<Fpedimento> Fpedimentos { get; set; }
        public virtual DbSet<FpedimentoAutorizacion> FpedimentoAutorizacions { get; set; }
        public virtual DbSet<FpedimentoBulto> FpedimentoBultos { get; set; }
        public virtual DbSet<FpedimentoBultoDetalle> FpedimentoBultoDetalles { get; set; }
        public virtual DbSet<FpedimentoCaso> FpedimentoCasos { get; set; }
        public virtual DbSet<FpedimentoCompensacion> FpedimentoCompensacions { get; set; }
        public virtual DbSet<FpedimentoCompensacionFpv> FpedimentoCompensacionFpvs { get; set; }
        public virtual DbSet<FpedimentoContCopiaSimple> FpedimentoContCopiaSimples { get; set; }
        public virtual DbSet<FpedimentoContenedor> FpedimentoContenedors { get; set; }
        public virtual DbSet<FpedimentoCopiaSimple> FpedimentoCopiaSimples { get; set; }
        public virtual DbSet<FpedimentoCopiaSimpleDetalle> FpedimentoCopiaSimpleDetalles { get; set; }
        public virtual DbSet<FpedimentoCuentaAduanera> FpedimentoCuentaAduaneras { get; set; }
        public virtual DbSet<FpedimentoDescarga> FpedimentoDescargas { get; set; }
        public virtual DbSet<FpedimentoDestinatario> FpedimentoDestinatarios { get; set; }
        public virtual DbSet<FpedimentoDetCuentaAduanera> FpedimentoDetCuentaAduaneras { get; set; }
        public virtual DbSet<FpedimentoDetalle> FpedimentoDetalles { get; set; }
        public virtual DbSet<FpedimentoDetalle303> FpedimentoDetalle303s { get; set; }
        public virtual DbSet<FpedimentoDetalleCaso> FpedimentoDetalleCasos { get; set; }
        public virtual DbSet<FpedimentoDetalleCuentasGtium> FpedimentoDetalleCuentasGtia { get; set; }
        public virtual DbSet<FpedimentoDetalleIep> FpedimentoDetalleIeps { get; set; }
        public virtual DbSet<FpedimentoDetalleObservacion> FpedimentoDetalleObservacions { get; set; }
        public virtual DbSet<FpedimentoDiferencia> FpedimentoDiferencias { get; set; }
        public virtual DbSet<FpedimentoError> FpedimentoErrors { get; set; }
        public virtual DbSet<FpedimentoFerrocarril> FpedimentoFerrocarrils { get; set; }
        public virtual DbSet<FpedimentoFumiga> FpedimentoFumigas { get; set; }
        public virtual DbSet<FpedimentoGuium> FpedimentoGuia { get; set; }
        public virtual DbSet<FpedimentoInbond> FpedimentoInbonds { get; set; }
        public virtual DbSet<FpedimentoMercancium> FpedimentoMercancia { get; set; }
        public virtual DbSet<FpedimentoObservacion> FpedimentoObservacions { get; set; }
        public virtual DbSet<FpedimentoParte2> FpedimentoParte2s { get; set; }
        public virtual DbSet<FpedimentoParte2Detalle> FpedimentoParte2Detalles { get; set; }
        public virtual DbSet<FpedimentoParte2Niu> FpedimentoParte2Nius { get; set; }
        public virtual DbSet<FpedimentoParte2Sellosm> FpedimentoParte2Sellosms { get; set; }
        public virtual DbSet<FpedimentoPermiso> FpedimentoPermisos { get; set; }
        public virtual DbSet<FpedimentoRegla261> FpedimentoRegla261s { get; set; }
        public virtual DbSet<FpedimentoSello> FpedimentoSellos { get; set; }
        public virtual DbSet<FpedimentoTipoCaso> FpedimentoTipoCasos { get; set; }
        public virtual DbSet<FpedimentoTipoContenedor> FpedimentoTipoContenedors { get; set; }
        public virtual DbSet<FpedimentoTrafico> FpedimentoTraficos { get; set; }
        public virtual DbSet<FpedimentoTransportistum> FpedimentoTransportista { get; set; }
        public virtual DbSet<FpermIdentEliminado> FpermIdentEliminados { get; set; }
        public virtual DbSet<Fpermiso> Fpermisos { get; set; }
        public virtual DbSet<FpermisoVigente> FpermisoVigentes { get; set; }
        public virtual DbSet<FpicudoDetalleFfrr> FpicudoDetalleFfrrs { get; set; }
        public virtual DbSet<FpicudoFfrr> FpicudoFfrrs { get; set; }
        public virtual DbSet<FplantaAutorizadum> FplantaAutorizada { get; set; }
        public virtual DbSet<FplantaTiff> FplantaTiffs { get; set; }
        public virtual DbSet<Fplantum> Fplanta { get; set; }
        public virtual DbSet<Fprefijo> Fprefijos { get; set; }
        public virtual DbSet<FprevioDet> FprevioDets { get; set; }
        public virtual DbSet<FprevioEnc> FprevioEncs { get; set; }
        public virtual DbSet<Fprocedimiento> Fprocedimientos { get; set; }
        public virtual DbSet<Fproceso> Fprocesos { get; set; }
        public virtual DbSet<Fproducto> Fproductos { get; set; }
        public virtual DbSet<Fproducto1> Fproductos1 { get; set; }
        public virtual DbSet<Fproducto11> Fproducto1s { get; set; }
        public virtual DbSet<FproductoCove> FproductoCoves { get; set; }
        public virtual DbSet<FproductoCoveHistorico> FproductoCoveHistoricos { get; set; }
        public virtual DbSet<FproductoNaftaGeneral> FproductoNaftaGenerals { get; set; }
        public virtual DbSet<FproductoQuimico> FproductoQuimicos { get; set; }
        public virtual DbSet<FproductoValidacion> FproductoValidacions { get; set; }
        public virtual DbSet<FproductosTlc> FproductosTlcs { get; set; }
        public virtual DbSet<Fproductoso> Fproductosos { get; set; }
        public virtual DbSet<Fprofepa> Fprofepas { get; set; }
        public virtual DbSet<FprofepaDocumento> FprofepaDocumentos { get; set; }
        public virtual DbSet<FprofepaEstado> FprofepaEstados { get; set; }
        public virtual DbSet<FprofepaFactura> FprofepaFacturas { get; set; }
        public virtual DbSet<FprofepaFraccion> FprofepaFraccions { get; set; }
        public virtual DbSet<FprofepaPagoFracc> FprofepaPagoFraccs { get; set; }
        public virtual DbSet<FprofepaProdCientifico> FprofepaProdCientificos { get; set; }
        public virtual DbSet<FprofepaProdComercial> FprofepaProdComercials { get; set; }
        public virtual DbSet<FprofepaTipoDocumento> FprofepaTipoDocumentos { get; set; }
        public virtual DbSet<FprofepaTipoProducto> FprofepaTipoProductos { get; set; }
        public virtual DbSet<FprofepaTransportistum> FprofepaTransportista { get; set; }
        public virtual DbSet<Fproveedor> Fproveedors { get; set; }
        public virtual DbSet<FproveedorCerMercCli> FproveedorCerMercClis { get; set; }
        public virtual DbSet<FproveedorIncrementable> FproveedorIncrementables { get; set; }
        public virtual DbSet<FproveedorInterno> FproveedorInternos { get; set; }
        public virtual DbSet<Fproveedore> Fproveedores { get; set; }
        public virtual DbSet<FpxmqAviso> FpxmqAvisos { get; set; }
        public virtual DbSet<FpxmqAvisosMercancium> FpxmqAvisosMercancia { get; set; }
        public virtual DbSet<FpxmqPlantaBodega> FpxmqPlantaBodegas { get; set; }
        public virtual DbSet<FraccionesNueva> FraccionesNuevas { get; set; }
        public virtual DbSet<FrangoPedimento> FrangoPedimentos { get; set; }
        public virtual DbSet<Frecargo> Frecargos { get; set; }
        public virtual DbSet<Frecibo> Frecibos { get; set; }
        public virtual DbSet<FrecoFnm> FrecoFnms { get; set; }
        public virtual DbSet<FreferenciaEnUso> FreferenciaEnUsos { get; set; }
        public virtual DbSet<FreferenciasEnvioDocto> FreferenciasEnvioDoctos { get; set; }
        public virtual DbSet<Freg001Pedimento> Freg001Pedimentos { get; set; }
        public virtual DbSet<Fregiman> Fregimen { get; set; }
        public virtual DbSet<FregimenCuotaFija> FregimenCuotaFijas { get; set; }
        public virtual DbSet<FregistrosSaaim3> FregistrosSaaim3s { get; set; }
        public virtual DbSet<FreglaOctava> FreglaOctavas { get; set; }
        public virtual DbSet<FreglaOctavaDetalle> FreglaOctavaDetalles { get; set; }
        public virtual DbSet<FrelBancoIdent> FrelBancoIdents { get; set; }
        public virtual DbSet<FrelBodProducto> FrelBodProductos { get; set; }
        public virtual DbSet<FrelClaveCliente> FrelClaveClientes { get; set; }
        public virtual DbSet<FrelClientePlantum> FrelClientePlanta { get; set; }
        public virtual DbSet<FrelClienteProveedor> FrelClienteProveedors { get; set; }
        public virtual DbSet<FrelClienteSector> FrelClienteSectors { get; set; }
        public virtual DbSet<FrelCorresponsalCliente> FrelCorresponsalClientes { get; set; }
        public virtual DbSet<FrelFactPerm> FrelFactPerms { get; set; }
        public virtual DbSet<FrelFacturaFecha> FrelFacturaFechas { get; set; }
        public virtual DbSet<FrelFacturasConsolidada> FrelFacturasConsolidadas { get; set; }
        public virtual DbSet<FrelFracAdva> FrelFracAdvas { get; set; }
        public virtual DbSet<FrelFracFact> FrelFracFacts { get; set; }
        public virtual DbSet<FrelFracImpu> FrelFracImpus { get; set; }
        public virtual DbSet<FrelFracPerm> FrelFracPerms { get; set; }
        public virtual DbSet<FrelImpRegPago> FrelImpRegPagos { get; set; }
        public virtual DbSet<FrelImpRegPagoPerfil> FrelImpRegPagoPerfils { get; set; }
        public virtual DbSet<FrelPartidasFacturaPedimento> FrelPartidasFacturaPedimentos { get; set; }
        public virtual DbSet<FrelPatenteApoderado> FrelPatenteApoderados { get; set; }
        public virtual DbSet<FrelPedimentoFactura> FrelPedimentoFacturas { get; set; }
        public virtual DbSet<FrelPermReg> FrelPermRegs { get; set; }
        public virtual DbSet<FrelProdFrac> FrelProdFracs { get; set; }
        public virtual DbSet<FrelProdFrac1> FrelProdFrac1s { get; set; }
        public virtual DbSet<FrelProdFracciones2> FrelProdFracciones2s { get; set; }
        public virtual DbSet<FrelProdIdentObli> FrelProdIdentOblis { get; set; }
        public virtual DbSet<FrelProdPermObli> FrelProdPermOblis { get; set; }
        public virtual DbSet<FrelProdPermiso> FrelProdPermisos { get; set; }
        public virtual DbSet<FrelProdTipoAdval> FrelProdTipoAdvals { get; set; }
        public virtual DbSet<FrelRegimenCompliance> FrelRegimenCompliances { get; set; }
        public virtual DbSet<FrelShipperTrafico> FrelShipperTraficos { get; set; }
        public virtual DbSet<FrelTipoClienteConcepto> FrelTipoClienteConceptos { get; set; }
        public virtual DbSet<FrelTipoPedimentoRegiman> FrelTipoPedimentoRegimen { get; set; }
        public virtual DbSet<FrelTrafPerm> FrelTrafPerms { get; set; }
        public virtual DbSet<FrelTraficoPedimento> FrelTraficoPedimentos { get; set; }
        public virtual DbSet<FrelUnidade> FrelUnidades { get; set; }
        public virtual DbSet<FrelUsuactDetalle> FrelUsuactDetalles { get; set; }
        public virtual DbSet<FrelUsuarioBodega> FrelUsuarioBodegas { get; set; }
        public virtual DbSet<FrelVehiculoContenedor> FrelVehiculoContenedors { get; set; }
        public virtual DbSet<FrelacionDocumentosDetFull> FrelacionDocumentosDetFulls { get; set; }
        public virtual DbSet<FrelacionDocumentosFull> FrelacionDocumentosFulls { get; set; }
        public virtual DbSet<FrelacionFfrr> FrelacionFfrrs { get; set; }
        public virtual DbSet<FrelacionFfrrDetalle> FrelacionFfrrDetalles { get; set; }
        public virtual DbSet<FremesaAviso> FremesaAvisos { get; set; }
        public virtual DbSet<FremesaConsecutivo> FremesaConsecutivos { get; set; }
        public virtual DbSet<FremesaGuium> FremesaGuia { get; set; }
        public virtual DbSet<FremesaIdentificadore> FremesaIdentificadores { get; set; }
        public virtual DbSet<FremesaMercancia> FremesaMercancias { get; set; }
        public virtual DbSet<FremesaMercanciasIdentificadore> FremesaMercanciasIdentificadores { get; set; }
        public virtual DbSet<FremesaObservacion> FremesaObservacions { get; set; }
        public virtual DbSet<FreporteAutomatico> FreporteAutomaticos { get; set; }
        public virtual DbSet<Frestriccion> Frestriccions { get; set; }
        public virtual DbSet<FrutasFacturasElec> FrutasFacturasElecs { get; set; }
        public virtual DbSet<FsagarDetLote> FsagarDetLotes { get; set; }
        public virtual DbSet<FsagarDetalle> FsagarDetalles { get; set; }
        public virtual DbSet<FsagarDetalleProv> FsagarDetalleProvs { get; set; }
        public virtual DbSet<FsagarGeneral> FsagarGenerals { get; set; }
        public virtual DbSet<FsagarMuestra> FsagarMuestras { get; set; }
        public virtual DbSet<Fseccion> Fseccions { get; set; }
        public virtual DbSet<Fsectore> Fsectores { get; set; }
        public virtual DbSet<FsellosDisponible> FsellosDisponibles { get; set; }
        public virtual DbSet<Fseries> Fseries { get; set; }
        public virtual DbSet<Fservice> Fservices { get; set; }
        public virtual DbSet<Fshipper> Fshippers { get; set; }
        public virtual DbSet<Fsituacion> Fsituacions { get; set; }
        public virtual DbSet<FsituacionPedimento> FsituacionPedimentos { get; set; }
        public virtual DbSet<Fsolicitud251> Fsolicitud251s { get; set; }
        public virtual DbSet<FsolicitudConsecutivo> FsolicitudConsecutivos { get; set; }
        public virtual DbSet<FsolicitudEncargo> FsolicitudEncargos { get; set; }
        public virtual DbSet<FsolicitudFfrr> FsolicitudFfrrs { get; set; }
        public virtual DbSet<FsolicitudFfrrDetalle> FsolicitudFfrrDetalles { get; set; }
        public virtual DbSet<FtabuladorPlano> FtabuladorPlanos { get; set; }
        public virtual DbSet<FtabuladorRango> FtabuladorRangos { get; set; }
        public virtual DbSet<FtempPedimentoDetalleObservacion> FtempPedimentoDetalleObservacions { get; set; }
        public virtual DbSet<FtemporalPedimentoCaso> FtemporalPedimentoCasos { get; set; }
        public virtual DbSet<FtemporalPedimentoDetalle> FtemporalPedimentoDetalles { get; set; }
        public virtual DbSet<FtemporalPedimentoObservacion> FtemporalPedimentoObservacions { get; set; }
        public virtual DbSet<FtemporalSello> FtemporalSellos { get; set; }
        public virtual DbSet<FtipoAdvalorem> FtipoAdvalorems { get; set; }
        public virtual DbSet<FtipoAdvaloremComplemento> FtipoAdvaloremComplementos { get; set; }
        public virtual DbSet<FtipoCalculo> FtipoCalculos { get; set; }
        public virtual DbSet<FtipoCambio> FtipoCambios { get; set; }
        public virtual DbSet<FtipoConcepto> FtipoConceptos { get; set; }
        public virtual DbSet<FtipoCuentum> FtipoCuenta { get; set; }
        public virtual DbSet<FtipoDeCliente> FtipoDeClientes { get; set; }
        public virtual DbSet<FtipoEnvio> FtipoEnvios { get; set; }
        public virtual DbSet<FtipoFactura> FtipoFacturas { get; set; }
        public virtual DbSet<FtipoFlete> FtipoFletes { get; set; }
        public virtual DbSet<FtipoInbond> FtipoInbonds { get; set; }
        public virtual DbSet<FtipoIva> FtipoIvas { get; set; }
        public virtual DbSet<FtipoMaterial> FtipoMaterials { get; set; }
        public virtual DbSet<FtipoMaterialProd> FtipoMaterialProds { get; set; }
        public virtual DbSet<FtipoMercancium> FtipoMercancia { get; set; }
        public virtual DbSet<FtipoMovtoAlmacen> FtipoMovtoAlmacens { get; set; }
        public virtual DbSet<FtipoOrganizacion> FtipoOrganizacions { get; set; }
        public virtual DbSet<FtipoPedimento> FtipoPedimentos { get; set; }
        public virtual DbSet<FtipoPedimentoAmericano> FtipoPedimentoAmericanos { get; set; }
        public virtual DbSet<FtipoPermiso> FtipoPermisos { get; set; }
        public virtual DbSet<FtipoRegiman> FtipoRegimen { get; set; }
        public virtual DbSet<FtipoUsuario> FtipoUsuarios { get; set; }
        public virtual DbSet<FtipoVehic> FtipoVehics { get; set; }
        public virtual DbSet<FtlcanPermiso> FtlcanPermisos { get; set; }
        public virtual DbSet<FtlcanRegiman> FtlcanRegimen { get; set; }
        public virtual DbSet<FtlcuePai> FtlcuePais { get; set; }
        public virtual DbSet<Ftmpfactura> Ftmpfacturas { get; set; }
        public virtual DbSet<Ftmppai> Ftmppais { get; set; }
        public virtual DbSet<FtradingAmericana> FtradingAmericanas { get; set; }
        public virtual DbSet<FtradingAmericanaDetalle> FtradingAmericanaDetalles { get; set; }
        public virtual DbSet<FtradingAnticipo> FtradingAnticipos { get; set; }
        public virtual DbSet<FtradingCliente> FtradingClientes { get; set; }
        public virtual DbSet<FtradingMexicana> FtradingMexicanas { get; set; }
        public virtual DbSet<FtraficoCaso> FtraficoCasos { get; set; }
        public virtual DbSet<FtraficoDesasociado> FtraficoDesasociados { get; set; }
        public virtual DbSet<FtraficoDetalleCaso> FtraficoDetalleCasos { get; set; }
        public virtual DbSet<FtraficoDetalleCasoAux> FtraficoDetalleCasoAuxes { get; set; }
        public virtual DbSet<FtransfSello> FtransfSellos { get; set; }
        public virtual DbSet<FtransfSelloLight> FtransfSelloLights { get; set; }
        public virtual DbSet<FtransferPagado> FtransferPagados { get; set; }
        public virtual DbSet<FultimateConsigneeType> FultimateConsigneeTypes { get; set; }
        public virtual DbSet<Funidad> Funidads { get; set; }
        public virtual DbSet<FunidadCfdi> FunidadCfdis { get; set; }
        public virtual DbSet<FunidadConversion> FunidadConversions { get; set; }
        public virtual DbSet<FunidadUniversal> FunidadUniversals { get; set; }
        public virtual DbSet<FunidadesFacturacion> FunidadesFacturacions { get; set; }
        public virtual DbSet<Fuser> Fusers { get; set; }
        public virtual DbSet<FusoProducto> FusoProductos { get; set; }
        public virtual DbSet<Fusuario> Fusuarios { get; set; }
        public virtual DbSet<FvalidaProductoRegiman> FvalidaProductoRegimen { get; set; }
        public virtual DbSet<FvalidacionPedimento> FvalidacionPedimentos { get; set; }
        public virtual DbSet<Fvaloracion> Fvaloracions { get; set; }
        public virtual DbSet<FventanasConsecutivo> FventanasConsecutivos { get; set; }
        public virtual DbSet<FversionVigenciaCove> FversionVigenciaCoves { get; set; }
        public virtual DbSet<FvinculacionClienteProveedor> FvinculacionClienteProveedors { get; set; }
        public virtual DbSet<GAduEdi> GAduEdis { get; set; }
        public virtual DbSet<GgAutorizacione> GgAutorizaciones { get; set; }
        public virtual DbSet<GgAutorizacionesModulo> GgAutorizacionesModulos { get; set; }
        public virtual DbSet<GgCatempresa> GgCatempresas { get; set; }
        public virtual DbSet<GgCiudad> GgCiudads { get; set; }
        public virtual DbSet<GgConcurso> GgConcursos { get; set; }
        public virtual DbSet<GgContrato> GgContratos { get; set; }
        public virtual DbSet<GgDwcampo> GgDwcampos { get; set; }
        public virtual DbSet<GgDwcamposCopy> GgDwcamposCopies { get; set; }
        public virtual DbSet<GgEstado> GgEstados { get; set; }
        public virtual DbSet<GgImagene> GgImagenes { get; set; }
        public virtual DbSet<GgLastWork> GgLastWorks { get; set; }
        public virtual DbSet<GgLlafe> GgLlaves { get; set; }
        public virtual DbSet<GgMascarasCampo> GgMascarasCampos { get; set; }
        public virtual DbSet<GgMensaje> GgMensajes { get; set; }
        public virtual DbSet<GgMiSistema> GgMiSistemas { get; set; }
        public virtual DbSet<GgModulo> GgModulos { get; set; }
        public virtual DbSet<GgNivelAdm> GgNivelAdms { get; set; }
        public virtual DbSet<GgReporte> GgReportes { get; set; }
        public virtual DbSet<GgReportes2> GgReportes2s { get; set; }
        public virtual DbSet<GgTareasModulo> GgTareasModulos { get; set; }
        public virtual DbSet<GtoClavesIso> GtoClavesIsos { get; set; }
        public virtual DbSet<LogMov> LogMovs { get; set; }
        public virtual DbSet<Mascara> Mascaras { get; set; }
        public virtual DbSet<MascarasEstructura> MascarasEstructuras { get; set; }
        public virtual DbSet<MateriaPrima> MateriaPrimas { get; set; }
        public virtual DbSet<NoEmpresa> NoEmpresas { get; set; }
        public virtual DbSet<NoParametro> NoParametros { get; set; }
        public virtual DbSet<NoPersonal> NoPersonals { get; set; }
        public virtual DbSet<NomBanco> NomBancos { get; set; }
        public virtual DbSet<Nomsimportum> Nomsimporta { get; set; }
        public virtual DbSet<NormCliente> NormClientes { get; set; }
        public virtual DbSet<OcActividadClasificacion> OcActividadClasificacions { get; set; }
        public virtual DbSet<OcAgenciaPatente> OcAgenciaPatentes { get; set; }
        public virtual DbSet<OcAlmacenGenerale> OcAlmacenGenerales { get; set; }
        public virtual DbSet<OcAsnBulto> OcAsnBultos { get; set; }
        public virtual DbSet<OcAsnEncabezado> OcAsnEncabezados { get; set; }
        public virtual DbSet<OcAsnProducto> OcAsnProductos { get; set; }
        public virtual DbSet<OcBodegaAgente> OcBodegaAgentes { get; set; }
        public virtual DbSet<OcBulto> OcBultos { get; set; }
        public virtual DbSet<OcBultoAsn> OcBultoAsns { get; set; }
        public virtual DbSet<OcBultoLocalizacion> OcBultoLocalizacions { get; set; }
        public virtual DbSet<OcBultoProducto> OcBultoProductos { get; set; }
        public virtual DbSet<OcBultoProductoAsn> OcBultoProductoAsns { get; set; }
        public virtual DbSet<OcBultoProductoSerie> OcBultoProductoSeries { get; set; }
        public virtual DbSet<OcChofer> OcChofers { get; set; }
        public virtual DbSet<OcClaseCarga> OcClaseCargas { get; set; }
        public virtual DbSet<OcClaseLocalizacion> OcClaseLocalizacions { get; set; }
        public virtual DbSet<OcClaseMaterial> OcClaseMaterials { get; set; }
        public virtual DbSet<OcConfServidor> OcConfServidors { get; set; }
        public virtual DbSet<OcConsignatario> OcConsignatarios { get; set; }
        public virtual DbSet<OcConsignatarioAlmacen> OcConsignatarioAlmacens { get; set; }
        public virtual DbSet<OcConsolidacion> OcConsolidacions { get; set; }
        public virtual DbSet<OcConsolidacionDetalle> OcConsolidacionDetalles { get; set; }
        public virtual DbSet<OcConsolidacionFactura> OcConsolidacionFacturas { get; set; }
        public virtual DbSet<OcCubicaje> OcCubicajes { get; set; }
        public virtual DbSet<OcDestino> OcDestinos { get; set; }
        public virtual DbSet<OcDetalle> OcDetalles { get; set; }
        public virtual DbSet<OcDetalleError> OcDetalleErrors { get; set; }
        public virtual DbSet<OcDivisionArea> OcDivisionAreas { get; set; }
        public virtual DbSet<OcEmbarque> OcEmbarques { get; set; }
        public virtual DbSet<OcEmbarqueAlertaBitacora> OcEmbarqueAlertaBitacoras { get; set; }
        public virtual DbSet<OcEmbarqueBillboardLog> OcEmbarqueBillboardLogs { get; set; }
        public virtual DbSet<OcEmbarqueBulto> OcEmbarqueBultos { get; set; }
        public virtual DbSet<OcEmbarqueBultoDistribucion> OcEmbarqueBultoDistribucions { get; set; }
        public virtual DbSet<OcEmbarqueConsolidacion> OcEmbarqueConsolidacions { get; set; }
        public virtual DbSet<OcEmbarqueDefault> OcEmbarqueDefaults { get; set; }
        public virtual DbSet<OcEmbarqueDestino> OcEmbarqueDestinos { get; set; }
        public virtual DbSet<OcEmbarqueDestinoVehiculo> OcEmbarqueDestinoVehiculos { get; set; }
        public virtual DbSet<OcEmbarqueEei> OcEmbarqueEeis { get; set; }
        public virtual DbSet<OcEmbarqueInbond> OcEmbarqueInbonds { get; set; }
        public virtual DbSet<OcEmbarqueNoCruzo> OcEmbarqueNoCruzos { get; set; }
        public virtual DbSet<OcEmbarqueVehiculo> OcEmbarqueVehiculos { get; set; }
        public virtual DbSet<OcEmbarqueVehiculoSello> OcEmbarqueVehiculoSellos { get; set; }
        public virtual DbSet<OcEncabezado> OcEncabezados { get; set; }
        public virtual DbSet<OcEncabezadoError> OcEncabezadoErrors { get; set; }
        public virtual DbSet<OcEnvioDetalle> OcEnvioDetalles { get; set; }
        public virtual DbSet<OcEnvioEncabezado> OcEnvioEncabezados { get; set; }
        public virtual DbSet<OcError> OcErrors { get; set; }
        public virtual DbSet<OcEstadoMercancium> OcEstadoMercancia { get; set; }
        public virtual DbSet<OcFacturaDetalle> OcFacturaDetalles { get; set; }
        public virtual DbSet<OcFacturaDetalleSerie> OcFacturaDetalleSeries { get; set; }
        public virtual DbSet<OcFacturaEncabezado> OcFacturaEncabezados { get; set; }
        public virtual DbSet<OcFacturaExpoDetalleSerie> OcFacturaExpoDetalleSeries { get; set; }
        public virtual DbSet<OcFacturaExportacion> OcFacturaExportacions { get; set; }
        public virtual DbSet<OcFacturaExportacionCfdi> OcFacturaExportacionCfdis { get; set; }
        public virtual DbSet<OcFacturaExportacionDetalle> OcFacturaExportacionDetalles { get; set; }
        public virtual DbSet<OcFacturaImpoDetalleSerie> OcFacturaImpoDetalleSeries { get; set; }
        public virtual DbSet<OcFacturaImportacion> OcFacturaImportacions { get; set; }
        public virtual DbSet<OcFacturaImportacionDetalle> OcFacturaImportacionDetalles { get; set; }
        public virtual DbSet<OcFirmaFactura> OcFirmaFacturas { get; set; }
        public virtual DbSet<OcFreightChargeTerm> OcFreightChargeTerms { get; set; }
        public virtual DbSet<OcGenerale> OcGenerales { get; set; }
        public virtual DbSet<OcGeneralesOperacionBodega> OcGeneralesOperacionBodegas { get; set; }
        public virtual DbSet<OcGuiaCorresponsal> OcGuiaCorresponsals { get; set; }
        public virtual DbSet<OcGuiaSerie> OcGuiaSeries { get; set; }
        public virtual DbSet<OcGuiasMultiple> OcGuiasMultiples { get; set; }
        public virtual DbSet<OcGuium> OcGuia { get; set; }
        public virtual DbSet<OcIdentificador> OcIdentificadors { get; set; }
        public virtual DbSet<OcInconformidad> OcInconformidads { get; set; }
        public virtual DbSet<OcInconformidadCliente> OcInconformidadClientes { get; set; }
        public virtual DbSet<OcIncoterm> OcIncoterms { get; set; }
        public virtual DbSet<OcInstBulto> OcInstBultos { get; set; }
        public virtual DbSet<OcInstFacturaDetalle> OcInstFacturaDetalles { get; set; }
        public virtual DbSet<OcInstFacturaDetalleSerie> OcInstFacturaDetalleSeries { get; set; }
        public virtual DbSet<OcInstFacturaEncabezado> OcInstFacturaEncabezados { get; set; }
        public virtual DbSet<OcInstGuium> OcInstGuia { get; set; }
        public virtual DbSet<OcInstPacking> OcInstPackings { get; set; }
        public virtual DbSet<OcInstPackingDetalle> OcInstPackingDetalles { get; set; }
        public virtual DbSet<OcInstPackingDetalleSerie> OcInstPackingDetalleSeries { get; set; }
        public virtual DbSet<OcInstruccion> OcInstruccions { get; set; }
        public virtual DbSet<OcInstruccionBak> OcInstruccionBaks { get; set; }
        public virtual DbSet<OcLeyenda> OcLeyendas { get; set; }
        public virtual DbSet<OcLineaAgente> OcLineaAgentes { get; set; }
        public virtual DbSet<OcLocalizacion> OcLocalizacions { get; set; }
        public virtual DbSet<OcLocalizacionBulto> OcLocalizacionBultos { get; set; }
        public virtual DbSet<OcLocalizacionMovil> OcLocalizacionMovils { get; set; }
        public virtual DbSet<OcMedioTransporte> OcMedioTransportes { get; set; }
        public virtual DbSet<OcMonedum> OcMoneda { get; set; }
        public virtual DbSet<OcMotivoReacomodo> OcMotivoReacomodos { get; set; }
        public virtual DbSet<OcMovimiento> OcMovimientos { get; set; }
        public virtual DbSet<OcMovimientoBulto> OcMovimientoBultos { get; set; }
        public virtual DbSet<OcMovimientoTarea> OcMovimientoTareas { get; set; }
        public virtual DbSet<OcMovimientoTareaBulto> OcMovimientoTareaBultos { get; set; }
        public virtual DbSet<OcNivelDano> OcNivelDanos { get; set; }
        public virtual DbSet<OcOrdenCompraMultiple> OcOrdenCompraMultiples { get; set; }
        public virtual DbSet<OcPackingDetalle> OcPackingDetalles { get; set; }
        public virtual DbSet<OcPackingDetalleBitacora> OcPackingDetalleBitacoras { get; set; }
        public virtual DbSet<OcPackingDetalleFactura> OcPackingDetalleFacturas { get; set; }
        public virtual DbSet<OcPackingDetalleSerie> OcPackingDetalleSeries { get; set; }
        public virtual DbSet<OcPackingEncabezado> OcPackingEncabezados { get; set; }
        public virtual DbSet<OcPai> OcPais { get; set; }
        public virtual DbSet<OcPaqueteriaEncabezado> OcPaqueteriaEncabezados { get; set; }
        public virtual DbSet<OcPaqueteriaGuium> OcPaqueteriaGuia { get; set; }
        public virtual DbSet<OcPaqueteriaLinea> OcPaqueteriaLineas { get; set; }
        public virtual DbSet<OcPatenteAduana> OcPatenteAduanas { get; set; }
        public virtual DbSet<OcPedimentoConsolidado> OcPedimentoConsolidados { get; set; }
        public virtual DbSet<OcPedimentoCorresponsal> OcPedimentoCorresponsals { get; set; }
        public virtual DbSet<OcPedimentoPago> OcPedimentoPagos { get; set; }
        public virtual DbSet<OcPedimentoPrepago> OcPedimentoPrepagos { get; set; }
        public virtual DbSet<OcPermiso> OcPermisos { get; set; }
        public virtual DbSet<OcPlantCode> OcPlantCodes { get; set; }
        public virtual DbSet<OcProceso> OcProcesos { get; set; }
        public virtual DbSet<OcProcesoDirectorio> OcProcesoDirectorios { get; set; }
        public virtual DbSet<OcProcesoDirectorioDocumento> OcProcesoDirectorioDocumentos { get; set; }
        public virtual DbSet<OcProcesoDirectorioDocumentosNecesario> OcProcesoDirectorioDocumentosNecesarios { get; set; }
        public virtual DbSet<OcProcesoDirectorioDocumentosParametro> OcProcesoDirectorioDocumentosParametros { get; set; }
        public virtual DbSet<OcProducto> OcProductos { get; set; }
        public virtual DbSet<OcProductoBitacora> OcProductoBitacoras { get; set; }
        public virtual DbSet<OcProductoClienteUnidadAux> OcProductoClienteUnidadAuxes { get; set; }
        public virtual DbSet<OcProductoDocumento> OcProductoDocumentos { get; set; }
        public virtual DbSet<OcProductoIdentObli> OcProductoIdentOblis { get; set; }
        public virtual DbSet<OcProductoIdentificador> OcProductoIdentificadors { get; set; }
        public virtual DbSet<OcProductoObservacionDetalle> OcProductoObservacionDetalles { get; set; }
        public virtual DbSet<OcProductoPermObli> OcProductoPermOblis { get; set; }
        public virtual DbSet<OcProductoPermiso> OcProductoPermisos { get; set; }
        public virtual DbSet<OcProductoProveedor> OcProductoProveedors { get; set; }
        public virtual DbSet<OcProductoProveedorRegiman> OcProductoProveedorRegimen { get; set; }
        public virtual DbSet<OcProductoTareaClasificacion> OcProductoTareaClasificacions { get; set; }
        public virtual DbSet<OcProveedor> OcProveedors { get; set; }
        public virtual DbSet<OcProveedorAgente> OcProveedorAgentes { get; set; }
        public virtual DbSet<OcProveedorVinculacion> OcProveedorVinculacions { get; set; }
        public virtual DbSet<OcProyecto> OcProyectos { get; set; }
        public virtual DbSet<OcRecibo> OcRecibos { get; set; }
        public virtual DbSet<OcReciboActividad> OcReciboActividads { get; set; }
        public virtual DbSet<OcReciboCorresponsal> OcReciboCorresponsals { get; set; }
        public virtual DbSet<OcReciboFactura> OcReciboFacturas { get; set; }
        public virtual DbSet<OcReciboInconformidad> OcReciboInconformidads { get; set; }
        public virtual DbSet<OcReciboInventario> OcReciboInventarios { get; set; }
        public virtual DbSet<OcReciboOrdencompra> OcReciboOrdencompras { get; set; }
        public virtual DbSet<OcReciboPrevio> OcReciboPrevios { get; set; }
        public virtual DbSet<OcReciboSalidum> OcReciboSalida { get; set; }
        public virtual DbSet<OcReciboSubdivision> OcReciboSubdivisions { get; set; }
        public virtual DbSet<OcRegiman> OcRegimen { get; set; }
        public virtual DbSet<OcRevisionDetalle> OcRevisionDetalles { get; set; }
        public virtual DbSet<OcRevisionEncabezado> OcRevisionEncabezados { get; set; }
        public virtual DbSet<OcSellosDisponible> OcSellosDisponibles { get; set; }
        public virtual DbSet<OcSerie> OcSeries { get; set; }
        public virtual DbSet<OcSerieCatalogo> OcSerieCatalogos { get; set; }
        public virtual DbSet<OcSituacionFactura> OcSituacionFacturas { get; set; }
        public virtual DbSet<OcSolicitudClasificacion> OcSolicitudClasificacions { get; set; }
        public virtual DbSet<OcStatusEmbarque> OcStatusEmbarques { get; set; }
        public virtual DbSet<OcStatusEnvio> OcStatusEnvios { get; set; }
        public virtual DbSet<OcStatusFactura> OcStatusFacturas { get; set; }
        public virtual DbSet<OcStatusLocalizacion> OcStatusLocalizacions { get; set; }
        public virtual DbSet<OcStatusMovimiento> OcStatusMovimientos { get; set; }
        public virtual DbSet<OcStatusOperacion> OcStatusOperacions { get; set; }
        public virtual DbSet<OcStatusOrden> OcStatusOrdens { get; set; }
        public virtual DbSet<OcStatusOrdenDetalle> OcStatusOrdenDetalles { get; set; }
        public virtual DbSet<OcStatusProducto> OcStatusProductos { get; set; }
        public virtual DbSet<OcStatusRecibo> OcStatusRecibos { get; set; }
        public virtual DbSet<OcStatusVehiculo> OcStatusVehiculos { get; set; }
        public virtual DbSet<OcSubnivelDano> OcSubnivelDanos { get; set; }
        public virtual DbSet<OcTareaClasificacion> OcTareaClasificacions { get; set; }
        public virtual DbSet<OcTipoBulto> OcTipoBultos { get; set; }
        public virtual DbSet<OcTipoCarga> OcTipoCargas { get; set; }
        public virtual DbSet<OcTipoDirectorio> OcTipoDirectorios { get; set; }
        public virtual DbSet<OcTipoEmbarque> OcTipoEmbarques { get; set; }
        public virtual DbSet<OcTipoEmbarqueArribo> OcTipoEmbarqueArribos { get; set; }
        public virtual DbSet<OcTipoFlete> OcTipoFletes { get; set; }
        public virtual DbSet<OcTipoGuium> OcTipoGuia { get; set; }
        public virtual DbSet<OcTipoImportacion> OcTipoImportacions { get; set; }
        public virtual DbSet<OcTipoIncrementable> OcTipoIncrementables { get; set; }
        public virtual DbSet<OcTipoLineafletera> OcTipoLineafleteras { get; set; }
        public virtual DbSet<OcTipoLocalizacion> OcTipoLocalizacions { get; set; }
        public virtual DbSet<OcTipoMaterial> OcTipoMaterials { get; set; }
        public virtual DbSet<OcTipoMaterialProveedor> OcTipoMaterialProveedors { get; set; }
        public virtual DbSet<OcTipoMovimientoVehiculo> OcTipoMovimientoVehiculos { get; set; }
        public virtual DbSet<OcTipoOperacion> OcTipoOperacions { get; set; }
        public virtual DbSet<OcTipoOrganizacion> OcTipoOrganizacions { get; set; }
        public virtual DbSet<OcTipoSolicitud> OcTipoSolicituds { get; set; }
        public virtual DbSet<OcTipoSolicitudClasificacion> OcTipoSolicitudClasificacions { get; set; }
        public virtual DbSet<OcTipoTransporte> OcTipoTransportes { get; set; }
        public virtual DbSet<OcTm> OcTms { get; set; }
        public virtual DbSet<OcTraspasoDefault> OcTraspasoDefaults { get; set; }
        public virtual DbSet<OcTratadoPedimento> OcTratadoPedimentos { get; set; }
        public virtual DbSet<OcUnidadConversion> OcUnidadConversions { get; set; }
        public virtual DbSet<OcUnidadMedidum> OcUnidadMedida { get; set; }
        public virtual DbSet<OcUnidadNegocio> OcUnidadNegocios { get; set; }
        public virtual DbSet<OcUnidadPedimento> OcUnidadPedimentos { get; set; }
        public virtual DbSet<OcVehiculo> OcVehiculos { get; set; }
        public virtual DbSet<OcVehiculoBitacora> OcVehiculoBitacoras { get; set; }
        public virtual DbSet<OcVehiculoCargado> OcVehiculoCargados { get; set; }
        public virtual DbSet<OcVehiculoCopy> OcVehiculoCopies { get; set; }
        public virtual DbSet<OcVehiculoFotografiaTipoMovimiento> OcVehiculoFotografiaTipoMovimientos { get; set; }
        public virtual DbSet<OcVehiculoFotografiaTipoVehiculo> OcVehiculoFotografiaTipoVehiculos { get; set; }
        public virtual DbSet<OcVehiculoFotografium> OcVehiculoFotografia { get; set; }
        public virtual DbSet<OcViewInventarioProducto> OcViewInventarioProductos { get; set; }
        public virtual DbSet<OcVinculacion> OcVinculacions { get; set; }
        public virtual DbSet<OcZona> OcZonas { get; set; }
        public virtual DbSet<Pbcatcol> Pbcatcols { get; set; }
        public virtual DbSet<Pbcatedt> Pbcatedts { get; set; }
        public virtual DbSet<Pbcatfmt> Pbcatfmts { get; set; }
        public virtual DbSet<Pbcattbl> Pbcattbls { get; set; }
        public virtual DbSet<Pbcatvld> Pbcatvlds { get; set; }
        public virtual DbSet<PdfEntradum> PdfEntrada { get; set; }
        public virtual DbSet<Pedimento> Pedimentos { get; set; }
        public virtual DbSet<PoReceiver> PoReceivers { get; set; }
        public virtual DbSet<PrCliente> PrClientes { get; set; }
        public virtual DbSet<PrControlEstructura> PrControlEstructuras { get; set; }
        public virtual DbSet<PrMonedum> PrMoneda { get; set; }
        public virtual DbSet<PrNivelA> PrNivelAs { get; set; }
        public virtual DbSet<PrNivele> PrNiveles { get; set; }
        public virtual DbSet<PrParametro> PrParametros { get; set; }
        public virtual DbSet<PrParametrosEstructura> PrParametrosEstructuras { get; set; }
        public virtual DbSet<PrProycotizacion> PrProycotizacions { get; set; }
        public virtual DbSet<PrProyecto> PrProyectos { get; set; }
        public virtual DbSet<ProcesarFacturaExcel> ProcesarFacturaExcels { get; set; }
        public virtual DbSet<Prueba> Pruebas { get; set; }
        public virtual DbSet<Prueba1> Pruebas1 { get; set; }
        public virtual DbSet<Pruebaxd2> Pruebaxd2s { get; set; }
        public virtual DbSet<Reporte> Reportes { get; set; }
        public virtual DbSet<Result> Results { get; set; }
        public virtual DbSet<SeModulo> SeModulos { get; set; }
        public virtual DbSet<SeUsrProyecto> SeUsrProyectos { get; set; }
        public virtual DbSet<SeUsrmod> SeUsrmods { get; set; }
        public virtual DbSet<SeUsuario> SeUsuarios { get; set; }
        public virtual DbSet<ShipperBatchControlHeader> ShipperBatchControlHeaders { get; set; }
        public virtual DbSet<ShipperBlockControlHeader> ShipperBlockControlHeaders { get; set; }
        public virtual DbSet<ShipperGenerale> ShipperGenerales { get; set; }
        public virtual DbSet<ShipperItemCommodityDetail> ShipperItemCommodityDetails { get; set; }
        public virtual DbSet<ShipperItemDetail> ShipperItemDetails { get; set; }
        public virtual DbSet<ShipperLicence> ShipperLicences { get; set; }
        public virtual DbSet<ShipperLicenceException> ShipperLicenceExceptions { get; set; }
        public virtual DbSet<ShipperLicenseDetail> ShipperLicenseDetails { get; set; }
        public virtual DbSet<ShipperPartyAddressN02> ShipperPartyAddressN02s { get; set; }
        public virtual DbSet<ShipperPartyAddressN03> ShipperPartyAddressN03s { get; set; }
        public virtual DbSet<ShipperPartyHeader> ShipperPartyHeaders { get; set; }
        public virtual DbSet<ShipperShipmentCs1> ShipperShipmentCs1s { get; set; }
        public virtual DbSet<ShipperShipmentCs2> ShipperShipmentCs2s { get; set; }
        public virtual DbSet<ShipperTransportationDetail> ShipperTransportationDetails { get; set; }
        public virtual DbSet<SptSpace> SptSpaces { get; set; }
        public virtual DbSet<StatusEmbarque> StatusEmbarques { get; set; }
        public virtual DbSet<StatusMovimiento> StatusMovimientos { get; set; }
        public virtual DbSet<StatusTrafico> StatusTraficos { get; set; }
        public virtual DbSet<TarFolio> TarFolios { get; set; }
        public virtual DbSet<Tarea> Tareas { get; set; }
        public virtual DbSet<TareasSecurity> TareasSecurities { get; set; }
        public virtual DbSet<TeAvisoCargoAbono> TeAvisoCargoAbonos { get; set; }
        public virtual DbSet<TeBanco> TeBancos { get; set; }
        public virtual DbSet<TeChequera> TeChequeras { get; set; }
        public virtual DbSet<TeChequesCobro> TeChequesCobros { get; set; }
        public virtual DbSet<TeConceptosPagoIngreso> TeConceptosPagoIngresos { get; set; }
        public virtual DbSet<TeCptoAviso> TeCptoAvisos { get; set; }
        public virtual DbSet<TeCptosIngreso> TeCptosIngresos { get; set; }
        public virtual DbSet<TeCuentum> TeCuenta { get; set; }
        public virtual DbSet<TeDeposito> TeDepositos { get; set; }
        public virtual DbSet<TeDetReciboIngreso> TeDetReciboIngresos { get; set; }
        public virtual DbSet<TeDetReciboIngresoAd> TeDetReciboIngresoAds { get; set; }
        public virtual DbSet<TeLogTesorerium> TeLogTesoreria { get; set; }
        public virtual DbSet<TeReciboIngreso> TeReciboIngresos { get; set; }
        public virtual DbSet<TeReciboIngresoAd> TeReciboIngresoAds { get; set; }
        public virtual DbSet<TeTipoCuentum> TeTipoCuenta { get; set; }
        public virtual DbSet<TeTmpAnticipo> TeTmpAnticipos { get; set; }
        public virtual DbSet<TeTransferenciaBancarium> TeTransferenciaBancaria { get; set; }
        public virtual DbSet<TpCompensacion> TpCompensacions { get; set; }
        public virtual DbSet<TpConfiguracion> TpConfiguracions { get; set; }
        public virtual DbSet<TpContenedor> TpContenedors { get; set; }
        public virtual DbSet<TpContribucionAmparoArt303Tlc> TpContribucionAmparoArt303Tlcs { get; set; }
        public virtual DbSet<TpCuentaAduanera> TpCuentaAduaneras { get; set; }
        public virtual DbSet<TpCuentaAduaneraPartidum> TpCuentaAduaneraPartida { get; set; }
        public virtual DbSet<TpDatosVehiculo> TpDatosVehiculos { get; set; }
        public virtual DbSet<TpDescargo> TpDescargos { get; set; }
        public virtual DbSet<TpDestinatario> TpDestinatarios { get; set; }
        public virtual DbSet<TpDetalleImportacionEuCanadum> TpDetalleImportacionEuCanada { get; set; }
        public virtual DbSet<TpDeterminacionContribucionesArticulo303> TpDeterminacionContribucionesArticulo303s { get; set; }
        public virtual DbSet<TpDiferenciaContribucion> TpDiferenciaContribucions { get; set; }
        public virtual DbSet<TpDocumentoPago> TpDocumentoPagos { get; set; }
        public virtual DbSet<TpDtaRectificacion> TpDtaRectificacions { get; set; }
        public virtual DbSet<TpFactura> TpFacturas { get; set; }
        public virtual DbSet<TpFecha> TpFechas { get; set; }
        public virtual DbSet<TpGravaman> TpGravamen { get; set; }
        public virtual DbSet<TpGuium> TpGuia { get; set; }
        public virtual DbSet<TpIdentificador> TpIdentificadors { get; set; }
        public virtual DbSet<TpIdentificadorPartidum> TpIdentificadorPartida { get; set; }
        public virtual DbSet<TpImportadorExportador> TpImportadorExportadors { get; set; }
        public virtual DbSet<TpImporte> TpImportes { get; set; }
        public virtual DbSet<TpInformeIndustriaAutomotriz> TpInformeIndustriaAutomotrizs { get; set; }
        public virtual DbSet<TpObservacione> TpObservaciones { get; set; }
        public virtual DbSet<TpObservacionesPartidum> TpObservacionesPartida { get; set; }
        public virtual DbSet<TpPagoContribucione> TpPagoContribuciones { get; set; }
        public virtual DbSet<TpPartida> TpPartidas { get; set; }
        public virtual DbSet<TpPartidasInformeIndustriaAutomotriz> TpPartidasInformeIndustriaAutomotrizs { get; set; }
        public virtual DbSet<TpPartidum> TpPartida { get; set; }
        public virtual DbSet<TpPasswordWeb> TpPasswordWebs { get; set; }
        public virtual DbSet<TpPedimento> TpPedimentos { get; set; }
        public virtual DbSet<TpPedimentoComplementario> TpPedimentoComplementarios { get; set; }
        public virtual DbSet<TpPermiso> TpPermisos { get; set; }
        public virtual DbSet<TpPrevioConsolidado> TpPrevioConsolidados { get; set; }
        public virtual DbSet<TpProveedorComprador> TpProveedorCompradors { get; set; }
        public virtual DbSet<TpPruebaSuficiente> TpPruebaSuficientes { get; set; }
        public virtual DbSet<TpRectificacion> TpRectificacions { get; set; }
        public virtual DbSet<TpTasa> TpTasas { get; set; }
        public virtual DbSet<TpTasaPartidum> TpTasaPartida { get; set; }
        public virtual DbSet<TpTransporte> TpTransportes { get; set; }
        public virtual DbSet<TpValoracion> TpValoracions { get; set; }
        public virtual DbSet<TpVinculacion> TpVinculacions { get; set; }
        public virtual DbSet<UsacRelUsuarioOficina> UsacRelUsuarioOficinas { get; set; }
        public virtual DbSet<UsacSituacionesRefmaster> UsacSituacionesRefmasters { get; set; }
        public virtual DbSet<UsacTipoOperacion> UsacTipoOperacions { get; set; }
        public virtual DbSet<ViewEmbarque> ViewEmbarques { get; set; }
        public virtual DbSet<ViewPedimentoFactura> ViewPedimentoFacturas { get; set; }
        public virtual DbSet<ViewRegistroShcp500> ViewRegistroShcp500s { get; set; }
        public virtual DbSet<ViewRegistroShcp501> ViewRegistroShcp501s { get; set; }
        public virtual DbSet<ViewRegistroShcp502> ViewRegistroShcp502s { get; set; }
        public virtual DbSet<ViewRegistroShcp503> ViewRegistroShcp503s { get; set; }
        public virtual DbSet<ViewRegistroShcp504> ViewRegistroShcp504s { get; set; }
        public virtual DbSet<ViewRegistroShcp505> ViewRegistroShcp505s { get; set; }
        public virtual DbSet<ViewRegistroShcp506> ViewRegistroShcp506s { get; set; }
        public virtual DbSet<ViewRegistroShcp507> ViewRegistroShcp507s { get; set; }
        public virtual DbSet<ViewRegistroShcp508> ViewRegistroShcp508s { get; set; }
        public virtual DbSet<ViewRegistroShcp509> ViewRegistroShcp509s { get; set; }
        public virtual DbSet<ViewRegistroShcp510> ViewRegistroShcp510s { get; set; }
        public virtual DbSet<ViewRegistroShcp511> ViewRegistroShcp511s { get; set; }
        public virtual DbSet<ViewRegistroShcp512> ViewRegistroShcp512s { get; set; }
        public virtual DbSet<ViewRegistroShcp513> ViewRegistroShcp513s { get; set; }
        public virtual DbSet<ViewRegistroShcp514> ViewRegistroShcp514s { get; set; }
        public virtual DbSet<ViewRegistroShcp516> ViewRegistroShcp516s { get; set; }
        public virtual DbSet<ViewRegistroShcp520> ViewRegistroShcp520s { get; set; }
        public virtual DbSet<ViewRegistroShcp551> ViewRegistroShcp551s { get; set; }
        public virtual DbSet<ViewRegistroShcp552> ViewRegistroShcp552s { get; set; }
        public virtual DbSet<ViewRegistroShcp553> ViewRegistroShcp553s { get; set; }
        public virtual DbSet<ViewRegistroShcp554> ViewRegistroShcp554s { get; set; }
        public virtual DbSet<ViewRegistroShcp555> ViewRegistroShcp555s { get; set; }
        public virtual DbSet<ViewRegistroShcp556> ViewRegistroShcp556s { get; set; }
        public virtual DbSet<ViewRegistroShcp557> ViewRegistroShcp557s { get; set; }
        public virtual DbSet<ViewRegistroShcp558> ViewRegistroShcp558s { get; set; }
        public virtual DbSet<ViewRegistroShcp601> ViewRegistroShcp601s { get; set; }
        public virtual DbSet<ViewRegistroShcp701> ViewRegistroShcp701s { get; set; }
        public virtual DbSet<ViewRegistroShcp702> ViewRegistroShcp702s { get; set; }
        public virtual DbSet<ViewRegistroShcp800> ViewRegistroShcp800s { get; set; }
        public virtual DbSet<VwCpStatusDcto> VwCpStatusDctos { get; set; }
        public virtual DbSet<VwFechaActual> VwFechaActuals { get; set; }
        public virtual DbSet<Wdigitalizacion> Wdigitalizacions { get; set; }
        public virtual DbSet<WdigitalizacionCliDetalle> WdigitalizacionCliDetalles { get; set; }
        public virtual DbSet<WdigitalizacionCliente> WdigitalizacionClientes { get; set; }
        public virtual DbSet<WdigitalizacionDetalle> WdigitalizacionDetalles { get; set; }
        public virtual DbSet<WdigitalizacionDocumento> WdigitalizacionDocumentos { get; set; }
        public virtual DbSet<WdigitalizacionGenerale> WdigitalizacionGenerales { get; set; }
        public virtual DbSet<WdigitalizacionModulo> WdigitalizacionModulos { get; set; }
        public virtual DbSet<WdigitalizacionModuloDoc> WdigitalizacionModuloDocs { get; set; }
        public virtual DbSet<WdigitalizacionParametro> WdigitalizacionParametros { get; set; }
        public virtual DbSet<WdigitalizacionReferencium> WdigitalizacionReferencia { get; set; }
        public virtual DbSet<WebAcceso> WebAccesos { get; set; }
        public virtual DbSet<WebAplicacion> WebAplicacions { get; set; }
        public virtual DbSet<WebAplicacionCorreo> WebAplicacionCorreos { get; set; }
        public virtual DbSet<WebClasificacionUsuario> WebClasificacionUsuarios { get; set; }
        public virtual DbSet<WebErrorLog> WebErrorLogs { get; set; }
        public virtual DbSet<WebGrupo> WebGrupos { get; set; }
        public virtual DbSet<WebGrupoCliente> WebGrupoClientes { get; set; }
        public virtual DbSet<WebGrupoPerfilCliente> WebGrupoPerfilClientes { get; set; }
        public virtual DbSet<WebLocale> WebLocales { get; set; }
        public virtual DbSet<WebModulo> WebModulos { get; set; }
        public virtual DbSet<WebModuloReporte> WebModuloReportes { get; set; }
        public virtual DbSet<WebPagina> WebPaginas { get; set; }
        public virtual DbSet<WebReporte> WebReportes { get; set; }
        public virtual DbSet<WebReporteAcceso> WebReporteAccesos { get; set; }
        public virtual DbSet<WebReporteCliente> WebReporteClientes { get; set; }
        public virtual DbSet<WebReporteClienteColumna> WebReporteClienteColumnas { get; set; }
        public virtual DbSet<WebReporteClienteDocumento> WebReporteClienteDocumentos { get; set; }
        public virtual DbSet<WebReporteClienteEmail> WebReporteClienteEmails { get; set; }
        public virtual DbSet<WebReporteClienteObservacion> WebReporteClienteObservacions { get; set; }
        public virtual DbSet<WebReporteColumna> WebReporteColumnas { get; set; }
        public virtual DbSet<WebReporteColumnaPersonal> WebReporteColumnaPersonals { get; set; }
        public virtual DbSet<WebReporteDinamico> WebReporteDinamicos { get; set; }
        public virtual DbSet<WebReporteLeyendum> WebReporteLeyenda { get; set; }
        public virtual DbSet<WebReporteLeyendum1> WebReporteLeyenda1 { get; set; }
        public virtual DbSet<WebReporteNotificacion> WebReporteNotificacions { get; set; }
        public virtual DbSet<WebReporteNotificacionEmail> WebReporteNotificacionEmails { get; set; }
        public virtual DbSet<WebReporteNotificacionParametro> WebReporteNotificacionParametros { get; set; }
        public virtual DbSet<WebReporteParametro> WebReporteParametros { get; set; }
        public virtual DbSet<WebReportePersonal> WebReportePersonals { get; set; }
        public virtual DbSet<WebReporteTemplate> WebReporteTemplates { get; set; }
        public virtual DbSet<WebReporteTemplateColumna> WebReporteTemplateColumnas { get; set; }
        public virtual DbSet<WebRol> WebRols { get; set; }
        public virtual DbSet<WebRolAlmacen> WebRolAlmacens { get; set; }
        public virtual DbSet<WebRolDefault> WebRolDefaults { get; set; }
        public virtual DbSet<WebRolModulo> WebRolModulos { get; set; }
        public virtual DbSet<WebSemaforo> WebSemaforos { get; set; }
        public virtual DbSet<WebTipoUsuario> WebTipoUsuarios { get; set; }
        public virtual DbSet<WebUsuario> WebUsuarios { get; set; }
        public virtual DbSet<WebUsuarioColumna> WebUsuarioColumnas { get; set; }
        public virtual DbSet<WebUsuarioError> WebUsuarioErrors { get; set; }
        public virtual DbSet<WebUsuarioPassword> WebUsuarioPasswords { get; set; }
        public virtual DbSet<WebUsuarioReporte> WebUsuarioReportes { get; set; }
        public virtual DbSet<WebUsuarioSucursal> WebUsuarioSucursals { get; set; }
        public virtual DbSet<WrBitacora> WrBitacoras { get; set; }
        public virtual DbSet<WrBitacoraModificacionCorreo> WrBitacoraModificacionCorreos { get; set; }
        public virtual DbSet<WrColumnaParametro> WrColumnaParametros { get; set; }
        public virtual DbSet<WrConfiguracion> WrConfiguracions { get; set; }
        public virtual DbSet<WrConfiguracionColumnaParametro> WrConfiguracionColumnaParametros { get; set; }
        public virtual DbSet<WrConfiguracionDirectorio> WrConfiguracionDirectorios { get; set; }
        public virtual DbSet<WrConfiguracionEmail> WrConfiguracionEmails { get; set; }
        public virtual DbSet<WrConfiguracionParametro> WrConfiguracionParametros { get; set; }
        public virtual DbSet<WrDiaSemana> WrDiaSemanas { get; set; }
        public virtual DbSet<WrEmail> WrEmails { get; set; }
        public virtual DbSet<WrEmailAduana> WrEmailAduanas { get; set; }
        public virtual DbSet<WrEmailAlmacen> WrEmailAlmacens { get; set; }
        public virtual DbSet<WrEmailCliente> WrEmailClientes { get; set; }
        public virtual DbSet<WrEmailPlantum> WrEmailPlanta { get; set; }
        public virtual DbSet<WrEmailRegiman> WrEmailRegimen { get; set; }
        public virtual DbSet<WrEmailTipoOperacion> WrEmailTipoOperacions { get; set; }
        public virtual DbSet<WrFormato> WrFormatos { get; set; }
        public virtual DbSet<WrParametro> WrParametros { get; set; }
        public virtual DbSet<WrPeriodo> WrPeriodos { get; set; }
        public virtual DbSet<WrRegistroModuloRol> WrRegistroModuloRols { get; set; }
        public virtual DbSet<WrReporteParametro> WrReporteParametros { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Server=pipesv;Database=aduasism3;User Id=sa;Password=Tesla7271");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<CcAnticiposFactura>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.IdFactura, e.Cliente, e.IdTrafico, e.MexAme });

                entity.Property(e => e.IdFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cliente)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdTrafico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MexAme)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.StatusContable).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<CcDetDistAnticipo>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumReciboIngreso, e.TipoBeneficiario, e.CveBeneficiario, e.CveCptoIngreso, e.IdTrafico, e.IdRectificacion, e.Consecutivo })
                    .HasName("pk_cc_det_dist_anticipo");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NumCuenta).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.TipoRef)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CcDetDistFactura>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumReciboIngreso, e.TipoBeneficiario, e.CveBeneficiario, e.CveCptoIngreso, e.IdFactura, e.TipoFactura })
                    .IsClustered(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.TipoFactura).IsUnicode(false);

                entity.Property(e => e.InvoiceNumber).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NoCertificado).IsUnicode(false);

                entity.Property(e => e.NumCuenta).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.PacCadenaOriginal).IsUnicode(false);

                entity.Property(e => e.PacMensajeError).IsUnicode(false);

                entity.Property(e => e.PacMsgError2).IsUnicode(false);

                entity.Property(e => e.PacMsgError3).IsUnicode(false);

                entity.Property(e => e.PacNoCertificadoSat).IsUnicode(false);

                entity.Property(e => e.PacUuid).IsUnicode(false);

                entity.Property(e => e.PacVersion).IsUnicode(false);

                entity.Property(e => e.StatusTimbre).IsUnicode(false);

                entity.Property(e => e.TipoCambioFactura).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CcDetDistFacturaCancelacione>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumReciboIngreso, e.TipoBeneficiario, e.CveBeneficiario, e.CveCptoIngreso, e.IdFactura, e.TipoFactura, e.PacUuid });

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.TipoFactura).IsUnicode(false);

                entity.Property(e => e.PacUuid).IsUnicode(false);

                entity.Property(e => e.CanceladoWs)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NoCertificado).IsUnicode(false);

                entity.Property(e => e.NumCuenta).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.PacCadenaOriginal).IsUnicode(false);

                entity.Property(e => e.PacMensajeError).IsUnicode(false);

                entity.Property(e => e.PacMsgError2).IsUnicode(false);

                entity.Property(e => e.PacMsgError3).IsUnicode(false);

                entity.Property(e => e.PacNoCertificadoSat).IsUnicode(false);

                entity.Property(e => e.PacVersion).IsUnicode(false);

                entity.Property(e => e.StatusTimbre).IsUnicode(false);

                entity.Property(e => e.TipoCambioFactura).HasDefaultValueSql("((0))");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.XmlCancelacion).IsUnicode(false);
            });

            modelBuilder.Entity<CcDetDistFacturaConse>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumReciboIngreso, e.TipoBeneficiario, e.CveBeneficiario, e.CveCptoIngreso, e.IdFactura, e.TipoFactura });

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.TipoFactura).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NumCuenta).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.StatusContable).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<CcDetOtrosIngreso>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumReciboIngreso, e.TipoBeneficiario, e.CveBeneficiario, e.CveCptoIngreso, e.IdTrafico })
                    .IsClustered(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NumCuenta).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.TipoRef)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CcEstadoCuentum>(entity =>
            {
                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.FechaInformacion).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.NombreCliente)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<CcParametro>(entity =>
            {
                entity.Property(e => e.CveParametro)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Valor)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CcReclasificacionFactura>(entity =>
            {
                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.FechaFactura).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.TipoFactura).IsUnicode(false);

                entity.Property(e => e.TipoRef)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CcReclasificacionFacturasConse>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.TipoFactura, e.IdFactura, e.IdTrafico, e.CveCptoIngreso, e.IdReferencia });

                entity.Property(e => e.TipoFactura).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.FechaFactura).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.StatusContable).HasDefaultValueSql("(1)");

                entity.Property(e => e.TipoRef)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CcReclasificacionFacturasPo>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.TipoFactura, e.IdFactura, e.IdTrafico, e.CveCptoReclasificacion });

                entity.Property(e => e.TipoFactura).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.FechaFactura).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.StatusContable).HasDefaultValueSql("((1))");

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CcReclasificacionIngreso>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumReciboIngreso, e.NumBanco, e.NumCuenta, e.TipoBeneficiarioAnt, e.CveBeneficiarioAnt, e.CveCptoIngresoAnt, e.ConsecutivoReclasificacion });

                entity.Property(e => e.NumCuenta).IsUnicode(false);

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<ClaseMaterial>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Clase })
                    .HasName("PKclase_material");

                entity.Property(e => e.Sucursal).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<ClienteContactosEmail>(entity =>
            {
                entity.Property(e => e.EmailContactoCliente).IsUnicode(false);

                entity.Property(e => e.EnvioEdocta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EnvioFactame)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EnvioFactmex)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EnvioPago)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.ImpExp)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((2))")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ClienteEnvioCorreo>(entity =>
            {
                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CorreoEdocta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CorreoFactame)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CorreoFactmex)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RutaEdocta).IsUnicode(false);

                entity.Property(e => e.RutaFactame).IsUnicode(false);

                entity.Property(e => e.RutaFactmex).IsUnicode(false);
            });

            modelBuilder.Entity<CmCveinsumo>(entity =>
            {
                entity.HasKey(e => new { e.Precedencia, e.Division })
                    .HasName("pk_cm_cveinsumo");

                entity.HasIndex(e => new { e.Precedencia, e.Division }, "cm_cveinsumo_x")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Division)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Predefinido).IsUnicode(false);

                entity.Property(e => e.Separador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoDato)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CmDetorden>(entity =>
            {
                entity.HasKey(e => new { e.Numproy, e.Numorden, e.Cveinsumo })
                    .HasName("pk_cm_detorden");

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Cveinsumo).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.Unidad).IsUnicode(false);
            });

            modelBuilder.Entity<CmDetrecepcion>(entity =>
            {
                entity.HasKey(e => new { e.Cveinsumo, e.Numorden, e.Numproy, e.Numrecep, e.Numrequisicion })
                    .HasName("PK_cm_detrecepcion_1__25");

                entity.Property(e => e.Cveinsumo).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.LocalizacionFisica).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.Notas).IsUnicode(false);

                entity.Property(e => e.NumAlmacen).IsUnicode(false);

                entity.Property(e => e.Unidad).IsUnicode(false);
            });

            modelBuilder.Entity<CmJefecompra>(entity =>
            {
                entity.HasKey(e => new { e.NoTarea, e.Cveautorizacion })
                    .HasName("jefecompras0")
                    .IsClustered(false);

                entity.Property(e => e.Cveautorizacion).IsUnicode(false);

                entity.Property(e => e.Login).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CmMoneda>(entity =>
            {
                entity.HasKey(e => e.Moneda)
                    .HasName("pk_cm_monedas");

                entity.HasIndex(e => e.Moneda, "cm_monedas_x")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Moneda)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Pais)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CmOrdencompra>(entity =>
            {
                entity.HasKey(e => new { e.Numproy, e.Numorden })
                    .HasName("pk_cm_ordencompra");

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Cveautorizacion).IsUnicode(false);

                entity.Property(e => e.Cvecomprador).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CmParametro>(entity =>
            {
                entity.HasKey(e => new { e.TipoParametro, e.CveParametro })
                    .HasName("PK_cm_parametros_1__17");

                entity.Property(e => e.CveParametro).IsUnicode(false);

                entity.Property(e => e.Valor).IsUnicode(false);
            });

            modelBuilder.Entity<CmProveedor>(entity =>
            {
                entity.HasKey(e => e.Cveproveedor)
                    .HasName("PK_cm_proveedor_1__11");

                entity.Property(e => e.Ciudad).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).HasDefaultValueSql("((0))");

                entity.Property(e => e.Contratista)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('n')");

                entity.Property(e => e.Direccion).IsUnicode(false);

                entity.Property(e => e.DireccionElec).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.NombreContacto).IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Telefono).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);

                entity.Property(e => e.TipoProveedor).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<CmRecepcion>(entity =>
            {
                entity.HasKey(e => new { e.Numorden, e.Numproy, e.Numrecepcion })
                    .HasName("PK_cm_recepcion_1__28");

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.CveAlmacenista).IsUnicode(false);

                entity.Property(e => e.LocalizacionFisica).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.Notas).IsUnicode(false);

                entity.Property(e => e.NumAlmacen).IsUnicode(false);

                entity.Property(e => e.Remision).IsUnicode(false);

                entity.Property(e => e.RepInspeccion).IsUnicode(false);

                entity.Property(e => e.SolInspeccion).IsUnicode(false);
            });

            modelBuilder.Entity<CmStatus>(entity =>
            {
                entity.HasKey(e => new { e.Tipostatus, e.Cvestatus })
                    .HasName("status")
                    .IsClustered(false);

                entity.HasIndex(e => new { e.Tipostatus, e.Cvestatus }, "status_1")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<CmTipocambio>(entity =>
            {
                entity.HasKey(e => new { e.Moneda, e.FechaCambio })
                    .HasName("pk_cm_tipocambio");

                entity.HasIndex(e => new { e.Moneda, e.TipoCambio, e.FechaCambio }, "tipocambio")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Moneda).IsUnicode(false);
            });

            modelBuilder.Entity<CmTipoinsumo>(entity =>
            {
                entity.HasKey(e => e.TipoInsumo)
                    .HasName("pk_cm_tipoinsumo");

                entity.HasIndex(e => e.TipoInsumo, "cm_tipoinsumo_x")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.TipoInsumo).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.NombreTabla).IsUnicode(false);
            });

            modelBuilder.Entity<CmTipopago>(entity =>
            {
                entity.HasKey(e => e.Cvetipopago)
                    .HasName("tipopago")
                    .IsClustered(false);

                entity.HasIndex(e => e.Cvetipopago, "cvetipopago")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<CmTipoproveedor>(entity =>
            {
                entity.HasKey(e => e.TipoProveedor)
                    .HasName("tipoproveedor")
                    .IsClustered(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<CmViaembarque>(entity =>
            {
                entity.HasKey(e => e.Cveviaembarque)
                    .HasName("pk_cm_viaembarque");

                entity.HasIndex(e => e.Cveviaembarque, "viaembarque")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<CoAreasCosto>(entity =>
            {
                entity.HasKey(e => e.CveArea)
                    .HasName("PK___1__27");

                entity.Property(e => e.Nombre).IsUnicode(false);
            });

            modelBuilder.Entity<CoAutorizacion>(entity =>
            {
                entity.HasKey(e => new { e.TipoAutoriza, e.NumEmpleado })
                    .HasName("PK_co_autorizacion_1__24");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);
            });

            modelBuilder.Entity<CoConceptoContable>(entity =>
            {
                entity.HasKey(e => e.Numproy)
                    .HasName("PK___5__27");

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.CentroCostos).IsUnicode(false);

                entity.Property(e => e.SubCentroCostos).IsUnicode(false);
            });

            modelBuilder.Entity<CoCostosPeriodo>(entity =>
            {
                entity.HasKey(e => new { e.Numproy, e.CvePeriodo, e.CveConcepto })
                    .HasName("cve_costos_per")
                    .IsClustered(false);

                entity.Property(e => e.Numproy).IsUnicode(false);
            });

            modelBuilder.Entity<CoCptosCosto>(entity =>
            {
                entity.HasKey(e => e.CveConcepto)
                    .HasName("PK_co_cptos_costos_1__27");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Relacion).IsUnicode(false);

                entity.Property(e => e.StatusConcepto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoConcepto)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CoDetLogCosto>(entity =>
            {
                entity.HasKey(e => new { e.ConsecutivoMovimiento, e.CveConcepto })
                    .HasName("PK_co_det_log_costos_1__26");
            });

            modelBuilder.Entity<CoLogCosto>(entity =>
            {
                entity.HasKey(e => e.ConsecutivoMovimiento)
                    .HasName("CONSECUTIVO_MOVIMIENTO")
                    .IsClustered(false);

                entity.Property(e => e.ConsecutivoMovimiento).ValueGeneratedOnAdd();

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.ProcesoActualiza).IsUnicode(false);

                entity.Property(e => e.TipoAfectacion).IsUnicode(false);

                entity.Property(e => e.TipoConcepto).IsUnicode(false);

                entity.Property(e => e.TipoDocumento).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CoPeriodosCosto>(entity =>
            {
                entity.HasKey(e => e.CvePeriodo)
                    .HasName("PK___2__27");

                entity.Property(e => e.StatusPeriodo)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ColorSello>(entity =>
            {
                entity.HasKey(e => e.Color)
                    .HasName("PKcolor_sellos");

                entity.Property(e => e.Color).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<CpAnticipoContratistum>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumDocumento, e.NumBeneficiario })
                    .HasName("PK_cp_anticipo_contratist1__17");

                entity.Property(e => e.Grupo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NumCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumFactura).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.TipoBeneficiario).HasDefaultValueSql("((2))");

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CpAnticipoOrdenCompra>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.Numproy, e.Numorden, e.ConsecutivoAnticipo })
                    .HasName("pk_cp_anticipo_orden_compra");

                entity.HasIndex(e => new { e.Numempresa, e.Numorden, e.NumBeneficiario, e.NumDocumento }, "cp_anticipo_oc")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Numproy)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Grupo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Moneda)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumFactura).IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CpBeneficiario>(entity =>
            {
                entity.HasKey(e => new { e.NumBeneficiario, e.TipoBeneficiario })
                    .HasName("cp_beneficiario_x");

                entity.Property(e => e.AplicaFinancia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Banco).IsUnicode(false);

                entity.Property(e => e.Ciudad).IsUnicode(false);

                entity.Property(e => e.ClaveBancoSatDestino).IsUnicode(false);

                entity.Property(e => e.ClavePagoGastos)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('98')");

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Cuenta).IsUnicode(false);

                entity.Property(e => e.CuentaDestino).IsUnicode(false);

                entity.Property(e => e.Curp).IsUnicode(false);

                entity.Property(e => e.Direccion).IsUnicode(false);

                entity.Property(e => e.EMail)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EstadoCivil)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fax)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdFiscal).IsUnicode(false);

                entity.Property(e => e.Nacionalidad)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NombreBeneficiario).IsUnicode(false);

                entity.Property(e => e.NumBenefTmsf).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Representante).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Scac).IsUnicode(false);

                entity.Property(e => e.SeguroSocial).IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sucursal).IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoContable).IsUnicode(false);

                entity.Property(e => e.TipoOperacionServicio)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTercero)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CpCheque>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumBanco, e.NumCuenta, e.NumDoctoPago, e.Clasificacion })
                    .IsClustered(false);

                entity.Property(e => e.NumCuenta).IsUnicode(false);

                entity.Property(e => e.Clasificacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.InvoiceNumber).IsUnicode(false);

                entity.Property(e => e.Leyenda).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NombreBeneficiario).IsUnicode(false);

                entity.Property(e => e.NumBancoDestino).IsUnicode(false);

                entity.Property(e => e.NumCuentaDestino).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.TipoCheque)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CpChequeCancelado>(entity =>
            {
                entity.HasKey(e => new { e.NumDoctoPago, e.NumBanco, e.NumCuenta, e.Numempresa })
                    .HasName("PK_cp_cheque_cancelado_1__30");

                entity.Property(e => e.NumCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NombreBeneficiario)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Referencia).IsUnicode(false);
            });

            modelBuilder.Entity<CpConceptoPago>(entity =>
            {
                entity.HasKey(e => e.CveConcepto)
                    .HasName("PK_cp_concepto_pago_1__18");

                entity.Property(e => e.CTipoFactor).IsUnicode(false);

                entity.Property(e => e.CveAmeMex)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CpContratoContratistum>(entity =>
            {
                entity.HasKey(e => new { e.NumContrato, e.Numproy })
                    .HasName("PK_cp_contrato_contratist1__28");

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<CpDetDoctoPago>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumBanco, e.NumCuenta, e.NumBeneficiario, e.NumDoctoPago, e.NumDocumento, e.TipoDocumento, e.TipoComprobante, e.Consecutivo })
                    .HasName("PK_cp_det_docto_pago_1__23");

                entity.Property(e => e.Numempresa).HasDefaultValueSql("((1))");

                entity.Property(e => e.NumCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoComprobante).HasDefaultValueSql("((1))");

                entity.Property(e => e.FechaDocumento).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaSeleccion).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaVencimiento).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Grupo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.InvoiceNumber).IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('MN')");

                entity.Property(e => e.NumFactura).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.SaldoCxp).HasDefaultValueSql("((0))");

                entity.Property(e => e.StatusContable).HasDefaultValueSql("((1))");

                entity.Property(e => e.StatusCxp).HasDefaultValueSql("((1))");

                entity.Property(e => e.Usuario)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ValorCxp).HasDefaultValueSql("((0))");

                entity.Property(e => e.ValorPago).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CpDetDoctoPagoCancelado>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumBanco, e.NumCuenta, e.NumBeneficiario, e.NumDoctoPago, e.NumDocumento, e.TipoDocumento, e.TipoComprobante, e.Consecutivo })
                    .HasName("PK_cp_det_docto_pago_canc2__18");

                entity.Property(e => e.NumCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Grupo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CpDetFacturaContratistum>(entity =>
            {
                entity.HasKey(e => new { e.ConsecutivoDetalle, e.Numempresa, e.NumDocumento, e.NumBeneficiario, e.NumContrato })
                    .HasName("PK_cp_det_factura_contrat1__39");

                entity.Property(e => e.Numproy).IsUnicode(false);
            });

            modelBuilder.Entity<CpDetFacturaPrestador>(entity =>
            {
                entity.HasKey(e => new { e.ConsecutivoDetalle, e.Numempresa, e.NumDocumento, e.NumBeneficiario })
                    .HasName("PK_cp_det_factura_prestad1__14");
            });

            modelBuilder.Entity<CpDetFacturaProveedor>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumBeneficiario, e.NumDocumento, e.ConsecutivoDetalle, e.NumAcuse });

                entity.HasIndex(e => new { e.Numempresa, e.NumBeneficiario, e.NumDocumento, e.ConsecutivoDetalle, e.NumAcuse }, "cp_det_factura_proveedor_x")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Numproy)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CpDetGastoComprobar>(entity =>
            {
                entity.HasKey(e => new { e.ConsecutivoDetalle, e.Numempresa, e.NumDocumento, e.NumBeneficiario, e.TipoBeneficiario })
                    .HasName("PK_cp_det_gasto_comprobar1__25");

                entity.Property(e => e.NombreBeneficiario)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CpDetOrdenPago>(entity =>
            {
                entity.HasKey(e => new { e.ConsecutivoDetalle, e.Numempresa, e.NumDocumento, e.NumBeneficiario, e.TipoBeneficiario })
                    .HasName("PK_cp_det_orden_pago_1__13");

                entity.Property(e => e.CTipoFactor).IsUnicode(false);

                entity.Property(e => e.ClavePagoGastos).IsUnicode(false);

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.GuardadoAutoXml)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.InvoiceNumber).IsUnicode(false);

                entity.Property(e => e.NombreXml).IsUnicode(false);

                entity.Property(e => e.NumFactura).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.RutaArchivoXml).IsUnicode(false);

                entity.Property(e => e.TipoRef)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.Uuid).IsUnicode(false);
            });

            modelBuilder.Entity<CpDetOrdenPagoCorrespo>(entity =>
            {
                entity.HasKey(e => new { e.ConsecutivoDetalle, e.Numempresa, e.NumDocumento, e.NumBeneficiario, e.TipoBeneficiario })
                    .HasName("PK_cp_det_orden_pago_correspo_1__13");

                entity.Property(e => e.CTipoFactor).IsUnicode(false);

                entity.Property(e => e.GuardadoAutoXml)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.MonedaTercero).IsUnicode(false);

                entity.Property(e => e.NombreXml).IsUnicode(false);

                entity.Property(e => e.NumFactura).IsUnicode(false);

                entity.Property(e => e.NumFacturaTercero).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RfcBeneficiarioDos).IsUnicode(false);

                entity.Property(e => e.RutaArchivoXml).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTabulador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Uuid).IsUnicode(false);

                entity.Property(e => e.UuidSat).IsUnicode(false);
            });

            modelBuilder.Entity<CpDetReembolso>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumDocumento, e.TipoBeneficiario, e.NumBeneficiario, e.ConsecutivoDetalle })
                    .HasName("PK_cp_det_reembolso_1__24");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.TipoRef)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CpEstimacion>(entity =>
            {
                entity.HasKey(e => new { e.NumContrato, e.NumEstimacion, e.Numproy })
                    .HasName("PK_cp_estimacion_1__28");

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<CpFacturaContratistaAjuste>(entity =>
            {
                entity.HasKey(e => new { e.NumAjuste, e.Numempresa, e.NumDocumento, e.NumBeneficiario, e.NumContrato })
                    .HasName("PK_cp_factura_contratista3__39");
            });

            modelBuilder.Entity<CpFacturaContratistum>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumDocumento, e.NumBeneficiario, e.NumContrato })
                    .HasName("PK_cp_factura_contratista1__15");

                entity.Property(e => e.Grupo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NumCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumFactura).IsUnicode(false);

                entity.Property(e => e.TipoBeneficiario).HasDefaultValueSql("((2))");

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CpFacturaPrestadorAjuste>(entity =>
            {
                entity.HasKey(e => new { e.NumAjuste, e.Numempresa, e.NumDocumento, e.NumBeneficiario })
                    .HasName("PK_cp_factura_prestador_a1__14");
            });

            modelBuilder.Entity<CpFacturaPrestadorServicio>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumDocumento, e.NumBeneficiario })
                    .HasName("PK_cp_factura_prestador_s1__14");

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NumCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumFactura).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.TipoBeneficiario).HasDefaultValueSql("((8))");

                entity.Property(e => e.TipoDocumento).HasDefaultValueSql("((5))");

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CpFacturaProveedor>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumBeneficiario, e.NumDocumento })
                    .HasName("PK_cp_factura_proveedor_1__23");

                entity.Property(e => e.FechaCaptura).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaContabilizacion).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaDocumento).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaRecepcion).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaVencimiento).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FormaPago).HasDefaultValueSql("((1))");

                entity.Property(e => e.Grupo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.ImporteIvaAcuses).HasDefaultValueSql("((0))");

                entity.Property(e => e.ImporteIvaAjuste).HasDefaultValueSql("((0))");

                entity.Property(e => e.Moneda)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('MN')");

                entity.Property(e => e.NumCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumFactura).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.PorIva).HasDefaultValueSql("((0.15))");

                entity.Property(e => e.SaldoCxp).HasDefaultValueSql("((0))");

                entity.Property(e => e.StatusContable).HasDefaultValueSql("((1))");

                entity.Property(e => e.StatusCxp).HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoBeneficiario).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoCambio).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoDocumento).HasDefaultValueSql("((22))");

                entity.Property(e => e.Usuario)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ValorBrutoAcuses).HasDefaultValueSql("((0))");

                entity.Property(e => e.ValorBrutoAjuste).HasDefaultValueSql("((0))");

                entity.Property(e => e.ValorCxp).HasDefaultValueSql("((0))");

                entity.Property(e => e.ValorCxpAcuses).HasDefaultValueSql("((0))");

                entity.Property(e => e.ValorCxpAjuste).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CpFacturaProveedorAjuste>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumBeneficiario, e.NumDocumento, e.NumAjuste })
                    .HasName("PK_cp_factura_proveedor_a1__26");
            });

            modelBuilder.Entity<CpGastoComprobar>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumDocumento, e.TipoBeneficiario, e.NumBeneficiario })
                    .HasName("PK_cp_gasto_comprobar_1__31");

                entity.Property(e => e.TipoBeneficiario).HasDefaultValueSql("((5))");

                entity.Property(e => e.Grupo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NumCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumFactura).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CpOrdenCompra>(entity =>
            {
                entity.HasKey(e => new { e.Numproy, e.Numorden })
                    .HasName("PK_cp_orden_compra_1__15");

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.ImporteActualAnticipo).HasDefaultValueSql("((0))");

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.SaldoAnticipo).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CpOrdenPagoAjuste>(entity =>
            {
                entity.Property(e => e.ReferenciaAjuste)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<CpOrdenPagoDctoSinFactura>(entity =>
            {
                entity.HasKey(e => new { e.NumDocumento, e.Numempresa, e.NumBeneficiario, e.TipoBeneficiario })
                    .HasName("PK_cp_orden_pago_dcto_sin1__13");

                entity.Property(e => e.Numempresa).HasDefaultValueSql("((1))");

                entity.Property(e => e.AduanaRazonSocial).IsUnicode(false);

                entity.Property(e => e.AjusteSn).HasDefaultValueSql("((0))");

                entity.Property(e => e.CTipoFactor).IsUnicode(false);

                entity.Property(e => e.ClavePagoGastos).IsUnicode(false);

                entity.Property(e => e.DetalleSn).HasDefaultValueSql("((0))");

                entity.Property(e => e.ExisteProvision)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.GuardadoAutoXml)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.InvoiceNumber).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NombrePdf).IsUnicode(false);

                entity.Property(e => e.NombreXml).IsUnicode(false);

                entity.Property(e => e.NumCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumFactura).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RutaArchivoXml).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.StatusContable).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoRef)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.Uuid).IsUnicode(false);
            });

            modelBuilder.Entity<CpParametro>(entity =>
            {
                entity.HasKey(e => new { e.TipoParametro, e.CveParametro })
                    .HasName("pk_cp_parametros");

                entity.Property(e => e.CveParametro)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Valor)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CpPorIva>(entity =>
            {
                entity.Property(e => e.CTipoFactor).IsUnicode(false);
            });

            modelBuilder.Entity<CpRecepcion>(entity =>
            {
                entity.HasIndex(e => e.NumAcuse, "cp_recepcion_x")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ImporteIva).HasDefaultValueSql("((0))");

                entity.Property(e => e.ImporteTotal).HasDefaultValueSql("((0))");

                entity.Property(e => e.Moneda)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('MN')");

                entity.Property(e => e.Numproy)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoCambio).HasDefaultValueSql("((1))");

                entity.Property(e => e.Total).HasDefaultValueSql("((0))");

                entity.Property(e => e.ValorDescuento).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CpReembolso>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumDocumento, e.TipoBeneficiario, e.NumBeneficiario })
                    .HasName("PK_cp_reembolso_1__31");

                entity.Property(e => e.Grupo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CpRelBenefConcepto>(entity =>
            {
                entity.HasKey(e => new { e.NumBeneficiario, e.TipoBeneficiario });
            });

            modelBuilder.Entity<CpSeleccionPagosDocto>(entity =>
            {
                entity.HasKey(e => new { e.NumBeneficiario, e.NumDocumento, e.Numempresa, e.TipoDocumento, e.TipoBeneficiario, e.Consecutivo })
                    .HasName("PK_cp_seleccion_pagos_doc1__24");

                entity.Property(e => e.Grupo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NumFactura).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CpStatus>(entity =>
            {
                entity.HasIndex(e => new { e.Tipostatus, e.Cvestatus }, "cp_status_x")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Descripcion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CpTablaXmlOrpa>(entity =>
            {
                entity.Property(e => e.Folio).IsUnicode(false);

                entity.Property(e => e.Mensaje).IsUnicode(false);

                entity.Property(e => e.Procesado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RfcEmisor).IsUnicode(false);

                entity.Property(e => e.RfcReceptor).IsUnicode(false);

                entity.Property(e => e.Ruta).IsUnicode(false);

                entity.Property(e => e.Serie).IsUnicode(false);

                entity.Property(e => e.Uuid).IsUnicode(false);

                entity.Property(e => e.Xml).IsUnicode(false);
            });

            modelBuilder.Entity<CpTipoBeneficiario>(entity =>
            {
                entity.HasKey(e => e.TipoBeneficiario)
                    .HasName("PK_cp_tipo_beneficiario_1__14");

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<CpTransSpeua>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumBanco, e.NumCuenta, e.NumDoctoPago })
                    .HasName("PK_cp_trans_speua_1__19");

                entity.Property(e => e.NumCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NombreBeneficiario)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Referencia).IsUnicode(false);
            });

            modelBuilder.Entity<CpTransSpeuaCanceladum>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumBanco, e.NumCuenta, e.NumDoctoPago })
                    .HasName("PK_cp_trans_speua_cancela1__16");

                entity.Property(e => e.NumCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NombreBeneficiario)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Referencia).IsUnicode(false);
            });

            modelBuilder.Entity<CtConsecPoliza>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.CvePeriodo, e.CvePoliza })
                    .HasName("pk_consec_poliza")
                    .IsClustered(false);
            });

            modelBuilder.Entity<CtConsecTipoPoliza>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.CvePeriodo, e.TipoPoliza })
                    .HasName("pk_consec_tipo_poliza")
                    .IsClustered(false);

                entity.Property(e => e.TipoPoliza).IsUnicode(false);
            });

            modelBuilder.Entity<CtConversion>(entity =>
            {
                entity.HasKey(e => new { e.CveTabla, e.CodigoConvertir })
                    .HasName("pk_conversion")
                    .IsClustered(false);

                entity.Property(e => e.CodigoConvertir).IsUnicode(false);
            });

            modelBuilder.Entity<CtCuentaContable>(entity =>
            {
                entity.HasKey(e => new { e.NumCuenta, e.SubCuenta, e.SubSubcuenta, e.Numempresa })
                    .HasName("pk_cuenta_contable")
                    .IsClustered(false);

                entity.HasIndex(e => new { e.NumCuenta, e.SubCuenta, e.SubSubcuenta, e.Numempresa }, "pk_cuenta_conta")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CtaBalanceResultado).IsUnicode(false);

                entity.Property(e => e.DescriCuenta).IsUnicode(false);

                entity.Property(e => e.FormulaSaldoProm).IsUnicode(false);

                entity.Property(e => e.Monetaria).IsUnicode(false);

                entity.Property(e => e.NaturalezaCuenta).IsUnicode(false);

                entity.Property(e => e.StatusCuenta).IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CtDetFormatosInforme>(entity =>
            {
                entity.HasKey(e => new { e.TipoFormato, e.CveFormato, e.NumeroRenglon, e.ConsecRenglon })
                    .HasName("pk_det_form_info")
                    .IsClustered(false);

                entity.Property(e => e.TipoFormato).IsUnicode(false);

                entity.Property(e => e.Operacion).IsUnicode(false);

                entity.Property(e => e.TipoRenglon).IsUnicode(false);
            });

            modelBuilder.Entity<CtDetMovtoContable>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.CvePeriodo, e.CvePoliza, e.NumeroMovto, e.ConsecAplicacion })
                    .HasName("pk_det_movto")
                    .IsClustered(false);

                entity.Property(e => e.DebitoCredito).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.ReferenciaOrigen).IsUnicode(false);

                entity.Property(e => e.TipoPoliza).IsUnicode(false);
            });

            modelBuilder.Entity<CtDetTipoPolizaContable>(entity =>
            {
                entity.HasKey(e => new { e.CvePoliza, e.DebitoCredito, e.NumCuenta, e.SubCuenta, e.SubSubcuenta })
                    .HasName("pk_cve_poliz")
                    .IsClustered(false);

                entity.Property(e => e.DebitoCredito).IsUnicode(false);
            });

            modelBuilder.Entity<CtEstadosFinanciero>(entity =>
            {
                entity.HasKey(e => new { e.Usuario, e.TipoReporte, e.Numempresa, e.CvePeriodo, e.Numproy, e.Renglon })
                    .IsClustered(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.TipoReporte).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Font)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CtFormatosInforme>(entity =>
            {
                entity.HasKey(e => new { e.TipoFormato, e.CveFormato, e.NumeroRenglon })
                    .HasName("pk_form_info")
                    .IsClustered(false);

                entity.Property(e => e.TipoFormato).IsUnicode(false);

                entity.Property(e => e.DescrFormato).IsUnicode(false);

                entity.Property(e => e.FormatoImpresion).IsUnicode(false);

                entity.Property(e => e.TipoImpresion).IsUnicode(false);
            });

            modelBuilder.Entity<CtInformesContable>(entity =>
            {
                entity.HasKey(e => e.CveInforme)
                    .HasName("pk_informe")
                    .IsClustered(false);

                entity.Property(e => e.DescrInformeContab).IsUnicode(false);
            });

            modelBuilder.Entity<CtLogContabilidad>(entity =>
            {
                entity.HasKey(e => new { e.NumDoctoPago, e.NumDocumento, e.TipoDocumento })
                    .HasName("pk_ct_log_contabilidad");

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.PantallaActualiza).IsUnicode(false);

                entity.Property(e => e.TipoAfectacion).IsUnicode(false);

                entity.Property(e => e.TipoConcepto).IsUnicode(false);
            });

            modelBuilder.Entity<CtLogicaContable>(entity =>
            {
                entity.HasKey(e => e.Logica)
                    .HasName("pk_logica")
                    .IsClustered(false);

                entity.Property(e => e.Logica).ValueGeneratedNever();

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CtMayorGeneral>(entity =>
            {
                entity.HasKey(e => new { e.CvePeriodo, e.Numempresa, e.Numproy, e.NumCuenta, e.SubCuenta, e.SubSubcuenta })
                    .HasName("pk_mayor_general")
                    .IsClustered(false);

                entity.Property(e => e.Numempresa).HasDefaultValueSql("((1))");

                entity.Property(e => e.Numproy).IsUnicode(false);
            });

            modelBuilder.Entity<CtMetodoPagoSat>(entity =>
            {
                entity.Property(e => e.Clave).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<CtMetodoPagoSatGasto>(entity =>
            {
                entity.Property(e => e.Clave).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<CtMovtoContable>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.CvePeriodo, e.CvePoliza, e.TipoPoliza, e.ConsecPoliza, e.NumeroMovto })
                    .HasName("pk_movto_contable")
                    .IsClustered(false);

                entity.Property(e => e.TipoPoliza).IsUnicode(false);

                entity.Property(e => e.IdError).IsUnicode(false);

                entity.Property(e => e.ReversarMovto).IsUnicode(false);

                entity.Property(e => e.TotalCredito).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalDebito).HasDefaultValueSql("((0))");

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CtOrigenCuentum>(entity =>
            {
                entity.HasKey(e => new { e.CvePoliza, e.NumeroDetalle, e.ConsecOrigenCuenta })
                    .HasName("pk_o_c")
                    .IsClustered(false);

                entity.Property(e => e.CampoCuenta).IsUnicode(false);

                entity.Property(e => e.CampoNumBeneficiario).IsUnicode(false);

                entity.Property(e => e.CampoProyecto).IsUnicode(false);

                entity.Property(e => e.CampoReferencia).IsUnicode(false);

                entity.Property(e => e.CampoSubcuenta).IsUnicode(false);

                entity.Property(e => e.CampoSubsubcuenta).IsUnicode(false);

                entity.Property(e => e.CampoTipoBeneficiario).IsUnicode(false);

                entity.Property(e => e.DebitoCredito).IsUnicode(false);

                entity.Property(e => e.Importe).IsUnicode(false);
            });

            modelBuilder.Entity<CtOrigenLogica>(entity =>
            {
                entity.HasKey(e => new { e.CvePoliza, e.NumeroDetalle, e.ClaveDetalle })
                    .HasName("pk_ori_log");

                entity.Property(e => e.AgruparPor).IsUnicode(false);

                entity.Property(e => e.ArchivoAuxiliarB).IsUnicode(false);

                entity.Property(e => e.ArchivoAuxiliarC).IsUnicode(false);

                entity.Property(e => e.ArchivoFuente).IsUnicode(false);

                entity.Property(e => e.CampoConsecutivo).IsUnicode(false);

                entity.Property(e => e.CampoContable).IsUnicode(false);

                entity.Property(e => e.CampoEmpresa).IsUnicode(false);

                entity.Property(e => e.CampoFechaContab).IsUnicode(false);

                entity.Property(e => e.CampoPeriodo).IsUnicode(false);

                entity.Property(e => e.CampoPoliza).IsUnicode(false);

                entity.Property(e => e.Condicion).IsUnicode(false);

                entity.Property(e => e.CondicionB).IsUnicode(false);

                entity.Property(e => e.CondicionC).IsUnicode(false);

                entity.Property(e => e.CondicionStatus).IsUnicode(false);

                entity.Property(e => e.Seleccion).IsUnicode(false);

                entity.Property(e => e.SeleccionB).IsUnicode(false);

                entity.Property(e => e.SeleccionC).IsUnicode(false);

                entity.Property(e => e.StatusOrigen).IsUnicode(false);

                entity.Property(e => e.TextoRef).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<CtOrigenOperacion>(entity =>
            {
                entity.HasKey(e => new { e.CvePoliza, e.NumeroDetalle, e.ConsecOperacion })
                    .HasName("pk_o_o")
                    .IsClustered(false);

                entity.Property(e => e.Operador1).IsUnicode(false);

                entity.Property(e => e.Operador2).IsUnicode(false);

                entity.Property(e => e.Operando).IsUnicode(false);
            });

            modelBuilder.Entity<CtParametro>(entity =>
            {
                entity.Property(e => e.CveParametro)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Valor)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CtPeriodoContable>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.CvePeriodo })
                    .HasName("pk_percont");

                entity.HasIndex(e => new { e.Numempresa, e.CvePeriodo }, "pk_per_cont")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Numempresa).HasDefaultValueSql("((1))");

                entity.Property(e => e.StatusPeriodo).IsUnicode(false);

                entity.Property(e => e.TipoPeriodo).IsUnicode(false);
            });

            modelBuilder.Entity<CtPresupuestoContable>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.CvePeriodo, e.TipoProforma, e.Numproy, e.NumCuenta, e.SubCuenta, e.SubSubcuenta })
                    .HasName("pk_presu_contable")
                    .IsClustered(false);

                entity.Property(e => e.Numproy).IsUnicode(false);
            });

            modelBuilder.Entity<CtSaldosBeneficiario>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.CvePeriodo, e.Numproy, e.NumCuenta, e.SubCuenta, e.SubSubcuenta, e.TipoBeneficiario, e.NumBeneficiario })
                    .HasName("pk_saldo_benef")
                    .IsClustered(false);

                entity.Property(e => e.Numproy).IsUnicode(false);
            });

            modelBuilder.Entity<CtTipoConversion>(entity =>
            {
                entity.HasKey(e => e.CveTabla)
                    .HasName("pk_tipo_conversion")
                    .IsClustered(false);

                entity.Property(e => e.DescriTabla).IsUnicode(false);
            });

            modelBuilder.Entity<CtTipoDocto>(entity =>
            {
                entity.HasKey(e => e.TipoDocumento)
                    .HasName("pk_tipo_docto")
                    .IsClustered(false);

                entity.Property(e => e.DescrTipoDocto).IsUnicode(false);

                entity.Property(e => e.NombreCorto).IsUnicode(false);
            });

            modelBuilder.Entity<CtTipoPolizaContable>(entity =>
            {
                entity.HasKey(e => e.CvePoliza)
                    .HasName("pk_tipo_poliza")
                    .IsClustered(false);

                entity.Property(e => e.DescrPoliza).IsUnicode(false);

                entity.Property(e => e.Prefijo).IsUnicode(false);

                entity.Property(e => e.StatusPoliza).IsUnicode(false);

                entity.Property(e => e.TipoPoliza).IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(user_name(NULL))");
            });

            modelBuilder.Entity<CtTipoProforma>(entity =>
            {
                entity.HasKey(e => e.TipoProforma)
                    .HasName("pk_tipo_proforma")
                    .IsClustered(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<DigAplicacion>(entity =>
            {
                entity.HasKey(e => e.IdAplicacion)
                    .HasName("PKdig_aplicacion");

                entity.Property(e => e.IdAplicacion).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<DigArchivo>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdModulo, e.IdDocumento, e.IdReferencia, e.Secuencial })
                    .HasName("PKdig_archivo");

                entity.Property(e => e.IdAplicacion).IsUnicode(false);

                entity.Property(e => e.IdModulo).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Direccion).IsUnicode(false);

                entity.Property(e => e.Extension).IsUnicode(false);

                entity.Property(e => e.FechaIngreso).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NombreArchivo).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('sis')");
            });

            modelBuilder.Entity<DigArchivoBitacora>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdModulo, e.IdDocumento, e.IdReferencia, e.Secuencial, e.FechaModificacion })
                    .HasName("PK__dig_arch__EB118AA424956483");

                entity.Property(e => e.IdAplicacion).IsUnicode(false);

                entity.Property(e => e.IdModulo).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.Movimiento).IsUnicode(false);
            });

            modelBuilder.Entity<DigArchivoExtension>(entity =>
            {
                entity.HasKey(e => e.Extension)
                    .HasName("PK__dig_arch__51EBE911A066E1CE");

                entity.Property(e => e.Extension).IsUnicode(false);

                entity.HasOne(d => d.IdTipoNavigation)
                    .WithMany(p => p.DigArchivoExtensions)
                    .HasForeignKey(d => d.IdTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__dig_archi__id_ti__1166F9DC");
            });

            modelBuilder.Entity<DigArchivoExtensionTipo>(entity =>
            {
                entity.HasKey(e => e.IdTipo)
                    .HasName("PK__dig_arch__CF901089EA5F874F");

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<DigArchivoExtensione>(entity =>
            {
                entity.HasKey(e => e.Extension)
                    .HasName("PK__dig_arch__51EBE911DF861E8B");

                entity.Property(e => e.Extension).IsUnicode(false);
            });

            modelBuilder.Entity<DigDigitalizacion>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdDocumento, e.IdDigitalizacion })
                    .HasName("PKdig_digitalizacion");

                entity.Property(e => e.IdAplicacion).IsUnicode(false);

                entity.Property(e => e.IdDigitalizacion).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<DigDigitalizacionParametro>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdDocumento, e.IdDigitalizacion, e.IdParametro })
                    .HasName("PKdig_digitalizacion_parametro");

                entity.Property(e => e.IdAplicacion).IsUnicode(false);

                entity.Property(e => e.IdDigitalizacion).IsUnicode(false);

                entity.Property(e => e.IdParametro).IsUnicode(false);

                entity.Property(e => e.Separador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Valor).IsUnicode(false);
            });

            modelBuilder.Entity<DigDocumento>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdDocumento })
                    .HasName("PKdig_documento");

                entity.Property(e => e.IdAplicacion).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.Extension).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<DigModulo>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdModulo })
                    .HasName("PKdig_modulo");

                entity.Property(e => e.IdAplicacion).IsUnicode(false);

                entity.Property(e => e.IdModulo).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<DigModuloDocumento>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdModulo, e.IdDocumento })
                    .HasName("PKdig_modulo_documento");

                entity.Property(e => e.IdAplicacion).IsUnicode(false);

                entity.Property(e => e.IdModulo).IsUnicode(false);

                entity.Property(e => e.IdDigitalizacion).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<DigModuloDocumentoCliente>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdModulo, e.IdDocumento, e.IdCliente })
                    .HasName("PKdig_modulo_documento_cliente");

                entity.Property(e => e.IdAplicacion).IsUnicode(false);

                entity.Property(e => e.IdModulo).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDigitalizacion).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<DigModuloEvento>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdModulo, e.IdEvento })
                    .HasName("Pk_dig_modulo_evento");

                entity.Property(e => e.IdAplicacion).IsUnicode(false);

                entity.Property(e => e.IdModulo).IsUnicode(false);

                entity.Property(e => e.IdEvento).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<DigParametro>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdParametro })
                    .HasName("PKdig_parametro");

                entity.Property(e => e.IdAplicacion).IsUnicode(false);

                entity.Property(e => e.IdParametro).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<DigRelacion>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacionMaster, e.IdModuloMaster, e.IdReferenciaMaster, e.IdAplicacion, e.IdModulo, e.IdReferencia })
                    .HasName("PKdig_relacion");

                entity.Property(e => e.IdAplicacionMaster).IsUnicode(false);

                entity.Property(e => e.IdModuloMaster).IsUnicode(false);

                entity.Property(e => e.IdReferenciaMaster).IsUnicode(false);

                entity.Property(e => e.IdAplicacion).IsUnicode(false);

                entity.Property(e => e.IdModulo).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);
            });

            modelBuilder.Entity<DigSuscripcion>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdModulo, e.IdEvento, e.IdReferencia, e.IdUsuario })
                    .HasName("Pk_dig_suscripcion");

                entity.Property(e => e.IdAplicacion).IsUnicode(false);

                entity.Property(e => e.IdModulo).IsUnicode(false);

                entity.Property(e => e.IdEvento).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<EPedimento>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.DateLog).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReferenciaCfit).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newsequentialid())");
            });

            modelBuilder.Entity<EmailContactosCliente>(entity =>
            {
                entity.HasKey(e => new { e.IdContacto, e.Cliente });

                entity.Property(e => e.IdContacto).ValueGeneratedOnAdd();

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.CoveFirmaBanco).IsUnicode(false);

                entity.Property(e => e.CoveFirmaBancoOp).IsUnicode(false);

                entity.Property(e => e.Economia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EconomiaOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.EmbarqueOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EntradaOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EnvioArchivos)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EnvioDoctos)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.EnvioDoctosOpn)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.EnvioRelDoctos).IsUnicode(false);

                entity.Property(e => e.EnvioRelDoctosOpn).IsUnicode(false);

                entity.Property(e => e.EventosAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EventosAduanaPorDia).IsUnicode(false);

                entity.Property(e => e.EventosInternoOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EventosOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacElecOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Factura).IsUnicode(false);

                entity.Property(e => e.FacturaCliente).HasDefaultValueSql("((0))");

                entity.Property(e => e.FacturaOp).IsUnicode(false);

                entity.Property(e => e.FerrocarrilOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FraccionSensible)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FraccionSensibleOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotifiCopImpFirBan)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotifiCopImpFirBanOp)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('2')");

                entity.Property(e => e.NotificacionCambioFraccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionCambioFraccionOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionClasificacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionClasificacionEntrada)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.NotificacionClasificacionEntradaOp)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('2')");

                entity.Property(e => e.NotificacionClasificacionOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionEmbarque)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionEntrada)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionEventos)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionFacElec)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionFerrocarril)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionHc)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionMv)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionPedimento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionPedimentoTxt)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionPrevio).IsUnicode(false);

                entity.Property(e => e.NotificacionRal)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionRalOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OperacionHc)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OperacionMv)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OrdenRemision).IsUnicode(false);

                entity.Property(e => e.OrdenRemisionOp).IsUnicode(false);

                entity.Property(e => e.PedimentoOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Proforma)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rectificacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RectificacionOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Relacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RelacionOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Remesas)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Vulnerable)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.VulnerableOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<EmailContactosClienteCove>(entity =>
            {
                entity.HasKey(e => new { e.IdContacto, e.Cliente })
                    .HasName("pk_email_Contactos_cliente_cove");

                entity.Property(e => e.IdContacto).ValueGeneratedOnAdd();

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.CoveDigital).IsUnicode(false);

                entity.Property(e => e.CoveDigitalOp).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);
            });

            modelBuilder.Entity<EmailContactosLineaFletera>(entity =>
            {
                entity.HasKey(e => new { e.IdContacto, e.IdLineaFletera });

                entity.Property(e => e.IdContacto).ValueGeneratedOnAdd();

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.NotificacionEmbarque)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionEmbarqueOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<EntradaOrdenCompra>(entity =>
            {
                entity.HasKey(e => new { e.IdBodega, e.IdEntrada, e.OrdenCompra });

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<FAcceso>(entity =>
            {
                entity.HasKey(e => new { e.IdClase, e.IdProceso, e.IdObjeto })
                    .HasName("pk_accesos");

                entity.Property(e => e.IdClase).IsUnicode(false);

                entity.Property(e => e.IdProceso).IsUnicode(false);

                entity.Property(e => e.IdObjeto).IsUnicode(false);
            });

            modelBuilder.Entity<FAduPatUsuario>(entity =>
            {
                entity.HasKey(e => new { e.IdUsuario, e.IdAduana, e.IdPatente })
                    .HasName("PK__f_adu_pa__AC6C28C25343711A");

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);
            });

            modelBuilder.Entity<FAutorizacionClienteImmex>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.NoAutorizacion })
                    .HasName("PK_autorizacion_cliente_immex");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.NoAutorizacion).IsUnicode(false);

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.UnidadMedida).IsUnicode(false);
            });

            modelBuilder.Entity<FLogAutomail>(entity =>
            {
                entity.Property(e => e.Consecutivo).ValueGeneratedNever();

                entity.Property(e => e.Archivos).IsUnicode(false);

                entity.Property(e => e.Destinatarios).IsUnicode(false);
            });

            modelBuilder.Entity<FRfcServicio>(entity =>
            {
                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);
            });

            modelBuilder.Entity<FRfcServiciosCliente>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.Rfc, e.RazonSocial, e.Patente, e.Aduana, e.CDefault })
                    .HasName("PK__f_rfc_se__2CD3BD226AE5F081");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.CDefault).IsUnicode(false);
            });

            modelBuilder.Entity<FUsuarioAdu>(entity =>
            {
                entity.HasKey(e => new { e.IdUsuario, e.IdAduana })
                    .HasName("PK__f_usuari__F4DB8881571401FE");

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);
            });

            modelBuilder.Entity<FUsuarioPat>(entity =>
            {
                entity.HasKey(e => new { e.IdUsuario, e.IdPatente })
                    .HasName("PK__f_usuari__C54400985AE492E2");

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);
            });

            modelBuilder.Entity<Factividad>(entity =>
            {
                entity.HasKey(e => e.IdActividad)
                    .HasName("pk_factividad");

                entity.Property(e => e.IdActividad).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Facturable)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdProceso).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IdProcesoNavigation)
                    .WithMany(p => p.Factividads)
                    .HasForeignKey(d => d.IdProceso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_factividad");
            });

            modelBuilder.Entity<Factualizacion>(entity =>
            {
                entity.Property(e => e.IdAct).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<Faduana>(entity =>
            {
                entity.HasKey(e => new { e.IdAduana, e.SeccionAduana })
                    .HasName("pk_faduana");

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.SeccionAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.CvePrevalidador).IsUnicode(false);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.CveTipoAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescripcionOficial).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.RazonSocialAbreviada).IsUnicode(false);

                entity.Property(e => e.RestriccionHorario)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.RutaSubirFactElectPc).IsUnicode(false);

                entity.Property(e => e.SiglasAaa).IsUnicode(false);

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);

                entity.Property(e => e.Telefono3).IsUnicode(false);

                entity.Property(e => e.Telefono4).IsUnicode(false);

                entity.HasOne(d => d.IdMunicipioNavigation)
                    .WithMany(p => p.Faduanas)
                    .HasForeignKey(d => d.IdMunicipio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_faduana");
            });

            modelBuilder.Entity<FaduanaSagarpa>(entity =>
            {
                entity.HasKey(e => new { e.IdAduana, e.Seccion });

                entity.Property(e => e.IdAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FaduanaVigor>(entity =>
            {
                entity.HasKey(e => new { e.IdAduana, e.Seccion });

                entity.Property(e => e.IdAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FaduasisComplemento1>(entity =>
            {
                entity.HasKey(e => new { e.IdComp, e.Secuencial })
                    .HasName("PK_fdia_complemento1");

                entity.Property(e => e.IdComp).IsUnicode(false);

                entity.Property(e => e.Secuencial).ValueGeneratedOnAdd();

                entity.Property(e => e.Ident)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FaduasisCuotac>(entity =>
            {
                entity.HasKey(e => new { e.Fraccion, e.Pais, e.CveTipoOpn, e.Ident })
                    .HasName("PK_FADUASIS_CUOTAC");

                entity.Property(e => e.Fraccion).IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.Ident).ValueGeneratedOnAdd();

                entity.Property(e => e.Nombre).IsUnicode(false);
            });

            modelBuilder.Entity<FaduasisNom>(entity =>
            {
                entity.HasKey(e => new { e.Fraccion, e.Nom, e.CveTipoOpn, e.Ident })
                    .HasName("PK_FADUASIS_NOMS");

                entity.Property(e => e.Fraccion).IsUnicode(false);

                entity.Property(e => e.Nom).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.Ident).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<FaduasisPermiso>(entity =>
            {
                entity.HasKey(e => new { e.Fraccion, e.Dependencia, e.CveTipoOpn, e.Clavem3, e.Ident })
                    .HasName("PK_fdia_permiso_1");

                entity.Property(e => e.Fraccion).IsUnicode(false);

                entity.Property(e => e.Dependencia).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.Clavem3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Ident).ValueGeneratedOnAdd();

                entity.Property(e => e.Permiso).IsUnicode(false);
            });

            modelBuilder.Entity<FaduasisWsSecurity>(entity =>
            {
                entity.HasKey(e => e.Usuario)
                    .HasName("PK__faduasis__9AFF8FC7B60796B5");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.Contrasena).IsUnicode(false);
            });

            modelBuilder.Entity<FagAdAme>(entity =>
            {
                entity.HasKey(e => e.IdAgAdAme)
                    .HasName("pk_fag_ad_ame");

                entity.Property(e => e.IdAgAdAme).IsUnicode(false);

                entity.Property(e => e.ApMaterno).IsUnicode(false);

                entity.Property(e => e.ApPaterno).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Irs).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);

                entity.Property(e => e.Telefono3).IsUnicode(false);

                entity.Property(e => e.Telefono4).IsUnicode(false);

                entity.Property(e => e.Titulo).IsUnicode(false);

                entity.HasOne(d => d.IdMunicipioNavigation)
                    .WithMany(p => p.FagAdAmes)
                    .HasForeignKey(d => d.IdMunicipio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fag_ad_ame");

                entity.HasOne(d => d.IdUsuarioRegistroNavigation)
                    .WithMany(p => p.FagAdAmes)
                    .HasForeignKey(d => d.IdUsuarioRegistro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fag_ad_ame");
            });

            modelBuilder.Entity<FagAdMex>(entity =>
            {
                entity.HasKey(e => e.IdPatente)
                    .HasName("pk_fag_ad_mex");

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.ApMaterno).IsUnicode(false);

                entity.Property(e => e.ApPaterno).IsUnicode(false);

                entity.Property(e => e.ArchivoBat).IsUnicode(false);

                entity.Property(e => e.ArchivoCer).IsUnicode(false);

                entity.Property(e => e.ArchivoKey).IsUnicode(false);

                entity.Property(e => e.ArchivosFirmar).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CerVencimiento)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.ContrasenaCiec).IsUnicode(false);

                entity.Property(e => e.ContrasenaKey).IsUnicode(false);

                entity.Property(e => e.ContrasenaWeb).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.Curp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.CveTipoPatente)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.Firma).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.PasswFea).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.Registro).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.RutaCer).IsUnicode(false);

                entity.Property(e => e.RutaKey).IsUnicode(false);

                entity.Property(e => e.RutaXml).IsUnicode(false);

                entity.Property(e => e.RutaXmlDoda).IsUnicode(false);

                entity.Property(e => e.RutaXmlPortal).IsUnicode(false);

                entity.Property(e => e.Scc).IsUnicode(false);

                entity.Property(e => e.Sha256).IsUnicode(false);

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);

                entity.Property(e => e.Telefono3).IsUnicode(false);

                entity.Property(e => e.Telefono4).IsUnicode(false);

                entity.Property(e => e.Titulo).IsUnicode(false);

                entity.HasOne(d => d.IdMunicipioNavigation)
                    .WithMany(p => p.FagAdMices)
                    .HasForeignKey(d => d.IdMunicipio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fag_ad_mex");
            });

            modelBuilder.Entity<FagenciaAduanal>(entity =>
            {
                entity.HasKey(e => e.IdAgenciaAduanal)
                    .HasName("i_id_ag_aduanal");

                entity.Property(e => e.IdAgenciaAduanal).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.ClaveFfrr).IsUnicode(false);

                entity.Property(e => e.CodPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.EstacionFfrr).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.RazonSocialAbreviada).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);

                entity.Property(e => e.Telefono3).IsUnicode(false);

                entity.Property(e => e.Telefono4).IsUnicode(false);

                entity.HasOne(d => d.IdMunicipioNavigation)
                    .WithMany(p => p.FagenciaAduanals)
                    .HasForeignKey(d => d.IdMunicipio)
                    .HasConstraintName("fk1_fagencia_aduanal");

                entity.HasOne(d => d.IdUsuarioRegistroNavigation)
                    .WithMany(p => p.FagenciaAduanals)
                    .HasForeignKey(d => d.IdUsuarioRegistro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fagencia_aduanal");
            });

            modelBuilder.Entity<FalmacenFiscal>(entity =>
            {
                entity.HasKey(e => e.IdAlmacenFiscal)
                    .HasName("pk_falmacen_fiscal");

                entity.Property(e => e.IdAlmacenFiscal)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescripcionAlmFiscal).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Fanexo10Factura>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdFactura })
                    .HasName("pk_fanexo10_factura");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.DescripcionAutorizacion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioAutorizacion).IsUnicode(false);
            });

            modelBuilder.Entity<Fanexo10Referencium>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion })
                    .HasName("pk_fanexo10_referencia");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.DescripcionAutorizacion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioAutorizacion).IsUnicode(false);
            });

            modelBuilder.Entity<Fanexo10Remesa>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Consecutivo })
                    .HasName("pk_fanexo10_remesa");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.DescripcionAutorizacion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioAutorizacion).IsUnicode(false);
            });

            modelBuilder.Entity<Fapoderado>(entity =>
            {
                entity.HasKey(e => e.IdApoderado)
                    .HasName("pk_apoderado");

                entity.Property(e => e.IdApoderado).IsUnicode(false);

                entity.Property(e => e.ApMaterno).IsUnicode(false);

                entity.Property(e => e.ApPaterno).IsUnicode(false);

                entity.Property(e => e.ArchivoBat).IsUnicode(false);

                entity.Property(e => e.ArchivoCer).IsUnicode(false);

                entity.Property(e => e.ArchivoKey).IsUnicode(false);

                entity.Property(e => e.ArchivosFirmar).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.ContrasenaCiec).IsUnicode(false);

                entity.Property(e => e.ContrasenaKey).IsUnicode(false);

                entity.Property(e => e.ContrasenaWeb).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.Curp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.Firma).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.PasswFea).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.RutaCer).IsUnicode(false);

                entity.Property(e => e.RutaKey).IsUnicode(false);

                entity.Property(e => e.RutaXml).IsUnicode(false);

                entity.Property(e => e.Sha256).IsUnicode(false);

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);

                entity.Property(e => e.Telefono3).IsUnicode(false);

                entity.Property(e => e.Telefono4).IsUnicode(false);

                entity.Property(e => e.Titulo).IsUnicode(false);

                entity.HasOne(d => d.IdMunicipioNavigation)
                    .WithMany(p => p.Fapoderados)
                    .HasForeignKey(d => d.IdMunicipio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fapoderado");

                entity.HasOne(d => d.IdUsuarioRegistroNavigation)
                    .WithMany(p => p.Fapoderados)
                    .HasForeignKey(d => d.IdUsuarioRegistro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fapoderado");
            });

            modelBuilder.Entity<FarchivoEnvioFactura>(entity =>
            {
                entity.HasKey(e => e.FechaFactura)
                    .HasName("pk_archivo_envio_factura");
            });

            modelBuilder.Entity<FarchivoEnvioFerrocarril>(entity =>
            {
                entity.HasKey(e => e.FechaFerrocarril)
                    .HasName("pk_farchivo_envio_ferrocarril");
            });

            modelBuilder.Entity<FarchivoEnvioOperacion>(entity =>
            {
                entity.HasKey(e => e.FechaOperacion)
                    .HasName("pk_farchivo_envio_operacion");
            });

            modelBuilder.Entity<FarchivoEnvioPedimento>(entity =>
            {
                entity.HasKey(e => e.FechaPedimento)
                    .HasName("pk_farchivo_envio_pedimento");
            });

            modelBuilder.Entity<FarchivosExpFactura>(entity =>
            {
                entity.Property(e => e.Archivo).IsUnicode(false);

                entity.Property(e => e.Archivodet).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Factura).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.Proveedor).IsUnicode(false);

                entity.Property(e => e.Tipofac).IsUnicode(false);
            });

            modelBuilder.Entity<FautorizaDesbloquearCove>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion })
                    .HasName("PK__fautoriz__F3A92BD6E9693131");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdUsuarioAutoriza).IsUnicode(false);
            });

            modelBuilder.Entity<FautorizaEmbarque>(entity =>
            {
                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.AutorizaUsuario).IsUnicode(false);

                entity.Property(e => e.AutorizaUsuarioFtz).IsUnicode(false);

                entity.Property(e => e.FtzUsuario).IsUnicode(false);

                entity.Property(e => e.RojoUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<FautorizaModifImpuesto>(entity =>
            {
                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdUsuarioAutoriza).IsUnicode(false);
            });

            modelBuilder.Entity<FautorizaRectificacion>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion })
                    .HasName("PK__fautoriz__F3A92BD6DAA867DA");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdUsuarioAutoriza).IsUnicode(false);
            });

            modelBuilder.Entity<FautorizaReferencia>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion })
                    .HasName("PK__fautoriz__F3A92BD6B44272F0");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdUsuarioAutoriza).IsUnicode(false);
            });

            modelBuilder.Entity<FautorizaReferenciaPago>(entity =>
            {
                entity.Property(e => e.IdBanco).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.Identificador)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FautorizaTrafico>(entity =>
            {
                entity.HasKey(e => e.IdTrafico)
                    .HasName("PK__fautoriz__E8972E7789DFEA36");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdUsuarioAutoriza).IsUnicode(false);
            });

            modelBuilder.Entity<FautorizacionEmbarquePeso>(entity =>
            {
                entity.HasKey(e => e.IdEmbarque)
                    .HasName("PK_autorizacion_embarque_peso");

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdUsuarioAutoriza).IsUnicode(false);
            });

            modelBuilder.Entity<FautorizacionPagoVulnerable>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion })
                    .HasName("PK_autorizacion_pago_vulnerable");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<FautorizacionPedimento>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<FautorizacionR1>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdMotivo).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioR1).IsUnicode(false);
            });

            modelBuilder.Entity<FauxCliente>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.CveCliente });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CveCliente).IsUnicode(false);

                entity.Property(e => e.IdClienteSis).IsUnicode(false);
            });

            modelBuilder.Entity<FauxCuentaCliente>(entity =>
            {
                entity.Property(e => e.CuentaAduasis).IsUnicode(false);

                entity.Property(e => e.CuentaCliente).IsUnicode(false);

                entity.Property(e => e.NaturalezaCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FauxOrigenExcel>(entity =>
            {
                entity.Property(e => e.PaisOrigenArchivo).IsUnicode(false);

                entity.Property(e => e.PaisOrigenAduasis).IsUnicode(false);
            });

            modelBuilder.Entity<FauxProveedor>(entity =>
            {
                entity.HasKey(e => new { e.IdProveedor, e.CveCliente });

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.CveCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedorSis).IsUnicode(false);
            });

            modelBuilder.Entity<FauxTipoAdvalExcel>(entity =>
            {
                entity.HasKey(e => new { e.TipoAdvalArchivo, e.TipoAdvalAduasis, e.IdPais });

                entity.Property(e => e.TipoAdvalArchivo).IsUnicode(false);

                entity.Property(e => e.TipoAdvalAduasis).IsUnicode(false);

                entity.Property(e => e.IdPais).IsUnicode(false);
            });

            modelBuilder.Entity<FauxUnidad>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidad, e.CveCliente });

                entity.Property(e => e.IdUnidad).IsUnicode(false);

                entity.Property(e => e.CveCliente).IsUnicode(false);

                entity.Property(e => e.IdUnidadCom).IsUnicode(false);
            });

            modelBuilder.Entity<FauxUnidadExcel>(entity =>
            {
                entity.Property(e => e.UnidadArchivo).IsUnicode(false);

                entity.Property(e => e.UnidadAduasis).IsUnicode(false);
            });

            modelBuilder.Entity<Fbanco>(entity =>
            {
                entity.HasKey(e => e.IdBanco)
                    .HasName("pk_fbanco");

                entity.Property(e => e.IdBanco).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.CveShcp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.DescripcionSucursal).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.NumeroSucursal).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.RazonSocialAbreviada).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);

                entity.Property(e => e.Telefono3).IsUnicode(false);

                entity.Property(e => e.Telefono4).IsUnicode(false);

                entity.HasOne(d => d.IdMunicipioNavigation)
                    .WithMany(p => p.Fbancos)
                    .HasForeignKey(d => d.IdMunicipio)
                    .HasConstraintName("fk1_fbanco");
            });

            modelBuilder.Entity<FbitacoraArchivosGenerado>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.FechaGeneracion })
                    .HasName("pk_bitacora_archivos_generados");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.FirmaBanco).IsUnicode(false);

                entity.Property(e => e.FirmaShcp).IsUnicode(false);

                entity.Property(e => e.IdUsuarioFirmo).IsUnicode(false);

                entity.Property(e => e.IdUsuarioGenero).IsUnicode(false);

                entity.Property(e => e.RutaArchivo).IsUnicode(false);

                entity.Property(e => e.TipoArchivo).IsUnicode(false);
            });

            modelBuilder.Entity<FbitacoraTarifa>(entity =>
            {
                entity.Property(e => e.Actualizacion).ValueGeneratedNever();

                entity.Property(e => e.Ejemplo).IsUnicode(false);
            });

            modelBuilder.Entity<FbmpsFigura>(entity =>
            {
                entity.Property(e => e.IdFigura).IsUnicode(false);

                entity.Property(e => e.IdFirma).IsUnicode(false);
            });

            modelBuilder.Entity<Fbodega>(entity =>
            {
                entity.HasKey(e => e.IdBodega)
                    .HasName("pk_fbodega");

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CandadoBodega)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CandadoBultosTrafico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.ForeignTradeZone).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioResponsable).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.InbondCode).IsUnicode(false);

                entity.Property(e => e.MedioTransporteDefault).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.PesoPorGuia).HasDefaultValueSql("((0))");

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.SeccionAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ShipperInbond).HasDefaultValueSql("((0))");

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);

                entity.Property(e => e.Telefono3).IsUnicode(false);

                entity.Property(e => e.Telefono4).IsUnicode(false);

                entity.HasOne(d => d.IdUsuarioRegistroNavigation)
                    .WithMany(p => p.FbodegaIdUsuarioRegistroNavigations)
                    .HasForeignKey(d => d.IdUsuarioRegistro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk3_fbodega");

                entity.HasOne(d => d.IdUsuarioResponsableNavigation)
                    .WithMany(p => p.FbodegaIdUsuarioResponsableNavigations)
                    .HasForeignKey(d => d.IdUsuarioResponsable)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fbodega");
            });

            modelBuilder.Entity<FbultoDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdEntrada, e.NoSecBulto })
                    .HasName("PKfbulto_detalle");

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.Danado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescGral).IsUnicode(false);

                entity.Property(e => e.Detalle).IsUnicode(false);

                entity.Property(e => e.Guia).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdUnidad).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.Numeros).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UnidadDesglose).IsUnicode(false);

                entity.HasOne(d => d.IdEntradaNavigation)
                    .WithMany(p => p.FbultoDetalles)
                    .HasForeignKey(d => d.IdEntrada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fbulto_detalle");

                entity.HasOne(d => d.IdUnidadNavigation)
                    .WithMany(p => p.FbultoDetalles)
                    .HasForeignKey(d => d.IdUnidad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_bulto_detalle");
            });

            modelBuilder.Entity<FbultoDetalleInventario>(entity =>
            {
                entity.HasKey(e => new { e.IdEntrada, e.NoSecRep, e.NoSecBulto })
                    .HasName("PK_fbulto_detalle_inventa2__17");

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.Danado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescGral).IsUnicode(false);

                entity.Property(e => e.Detalle).IsUnicode(false);

                entity.Property(e => e.IdUnidad).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.Numeros).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FbultoHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdEntrada, e.NoSecBulto, e.FechaRegistro })
                    .HasName("pk_fbulto_historico");

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.Danado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescGral).IsUnicode(false);

                entity.Property(e => e.Detalle).IsUnicode(false);

                entity.Property(e => e.IdUnidad).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.Numeros).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.TipoMovimiento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdEntradaNavigation)
                    .WithMany(p => p.FbultoHistoricos)
                    .HasForeignKey(d => d.IdEntrada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fbulto_historico");
            });

            modelBuilder.Entity<FbultoInventario>(entity =>
            {
                entity.HasKey(e => new { e.IdEntrada, e.NoSecRep })
                    .HasName("PK_fbulto_inventario_1__17");

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.BloBra)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Carrier).IsUnicode(false);

                entity.Property(e => e.CarrierDeliv).IsUnicode(false);

                entity.Property(e => e.Consignatario).IsUnicode(false);

                entity.Property(e => e.Contacto).IsUnicode(false);

                entity.Property(e => e.Cuenta).IsUnicode(false);

                entity.Property(e => e.Destino).IsUnicode(false);

                entity.Property(e => e.Estado).IsUnicode(false);

                entity.Property(e => e.FlatcarIni).IsUnicode(false);

                entity.Property(e => e.FlatcarNum).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Ruta).IsUnicode(false);

                entity.Property(e => e.SealNo).IsUnicode(false);

                entity.Property(e => e.Shipper).IsUnicode(false);

                entity.Property(e => e.Telefono).IsUnicode(false);

                entity.Property(e => e.TipoPago)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TrailerIni).IsUnicode(false);

                entity.Property(e => e.TrailerNum).IsUnicode(false);
            });

            modelBuilder.Entity<FbultoTraf>(entity =>
            {
                entity.HasKey(e => e.IdTrafico)
                    .HasName("pk_fbulto_traf");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IdTraficoNavigation)
                    .WithOne(p => p.FbultoTraf)
                    .HasForeignKey<FbultoTraf>(d => d.IdTrafico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fbulto_traf");

                entity.HasOne(d => d.IdUsuarioRegistroNavigation)
                    .WithMany(p => p.FbultoTrafs)
                    .HasForeignKey(d => d.IdUsuarioRegistro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fbulto_traf");
            });

            modelBuilder.Entity<FbultoTrafDetum>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.NoSecuencial })
                    .HasName("pk_fbulto_traf_deta");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.NoSecuencial).IsUnicode(false);

                entity.Property(e => e.DescMcia).IsUnicode(false);

                entity.Property(e => e.Detalle).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.IdUnidad).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.Numeros).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);

                entity.HasOne(d => d.IdTraficoNavigation)
                    .WithMany(p => p.FbultoTrafDeta)
                    .HasForeignKey(d => d.IdTrafico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fbulto_traf_deta");

                entity.HasOne(d => d.IdUnidadNavigation)
                    .WithMany(p => p.FbultoTrafDeta)
                    .HasForeignKey(d => d.IdUnidad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fbulto_traf_deta");
            });

            modelBuilder.Entity<FcalculoFracFerro>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.CveTipoOpn, e.IdFraccionMex, e.IdTipoAdvalorem, e.CveUnidadComercial, e.NumSecuencial })
                    .HasName("pk_fcalculo_frac_ferro");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.CveUnidadComercial).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FcalculoFracPaso>(entity =>
            {
                entity.HasKey(e => new { e.IdCalculo, e.IdFraccionMex, e.CveTipoOpn, e.IdTipoAdvalorem, e.CveUnidadComercial });

                entity.Property(e => e.IdCalculo).IsUnicode(false);

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.CveUnidadComercial).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.NumSecuencial).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<FcalculoFraccion>(entity =>
            {
                entity.HasKey(e => new { e.IdCalculo, e.CveTipoOpn, e.IdFraccionMex, e.IdTipoAdvalorem, e.CveUnidadComercial, e.NumSecuencial })
                    .HasName("pk_fcalculo_fraccion");

                entity.Property(e => e.IdCalculo).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.CveUnidadComercial).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IdCalculoNavigation)
                    .WithMany(p => p.FcalculoFraccions)
                    .HasForeignKey(d => d.IdCalculo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fcalculo_fraccion");

                entity.HasOne(d => d.IdTipoAdvaloremNavigation)
                    .WithMany(p => p.FcalculoFraccions)
                    .HasForeignKey(d => d.IdTipoAdvalorem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk3_fcalculo_fraccion");

                entity.HasOne(d => d.FfraccionMex)
                    .WithMany(p => p.FcalculoFraccions)
                    .HasForeignKey(d => new { d.CveTipoOpn, d.IdFraccionMex })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fcalculo_fraccion");
            });

            modelBuilder.Entity<FcalculoGasto>(entity =>
            {
                entity.HasKey(e => new { e.IdCalculo, e.Gasto, e.Comprobado });

                entity.Property(e => e.IdCalculo).IsUnicode(false);

                entity.Property(e => e.Gasto).IsUnicode(false);

                entity.Property(e => e.Comprobado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdConcepto).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FcalculoGastosAme>(entity =>
            {
                entity.HasKey(e => new { e.IdCalculo, e.Gasto, e.Comprobado });

                entity.Property(e => e.IdCalculo).IsUnicode(false);

                entity.Property(e => e.Gasto).IsUnicode(false);

                entity.Property(e => e.Comprobado)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FcalculoGenFer>(entity =>
            {
                entity.HasKey(e => e.IdTrafico)
                    .HasName("pk_fcalculo_gen_fer");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdContacto).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdTipoIva).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FcalculoGeneral>(entity =>
            {
                entity.HasKey(e => e.IdCalculo)
                    .HasName("pk_fcalculo_general");

                entity.Property(e => e.IdCalculo).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdContacto).IsUnicode(false);

                entity.Property(e => e.IdProceso).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdTabuladorAme)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdTabuladorMex)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdTipoIva).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.IdentificadorProceso).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IdProcesoNavigation)
                    .WithMany(p => p.FcalculoGenerals)
                    .HasForeignKey(d => d.IdProceso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fcalculo_general");
            });

            modelBuilder.Entity<FcalculoImpuesto>(entity =>
            {
                entity.HasKey(e => new { e.IdCalculo, e.IdImpuesto })
                    .HasName("pk_fcalculo_impuesto");

                entity.Property(e => e.IdCalculo).IsUnicode(false);

                entity.Property(e => e.IdImpuesto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdFormaPago).IsUnicode(false);

                entity.Property(e => e.IdFormaPago2).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IdCalculoNavigation)
                    .WithMany(p => p.FcalculoImpuestos)
                    .HasForeignKey(d => d.IdCalculo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fcalculo_impuesto");

                entity.HasOne(d => d.IdFormaPagoNavigation)
                    .WithMany(p => p.FcalculoImpuestos)
                    .HasForeignKey(d => d.IdFormaPago)
                    .HasConstraintName("fk3_fcalculo_impuesto");

                entity.HasOne(d => d.IdImpuestoNavigation)
                    .WithMany(p => p.FcalculoImpuestos)
                    .HasForeignKey(d => d.IdImpuesto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fcalculo_impuesto");
            });

            modelBuilder.Entity<FcalculoImpuestoFer>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.IdImpuesto })
                    .HasName("pk_fcalculo_impuesto_fer");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdImpuesto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdFormaPago).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FcartaSubdivision>(entity =>
            {
                entity.HasKey(e => new { e.IdEntrada, e.IdFactura, e.Secuencial });

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdApoderado).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.Subdivision).IsUnicode(false);
            });

            modelBuilder.Entity<FcatalogoOpn>(entity =>
            {
                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.TipoOpn).IsUnicode(false);

                entity.Property(e => e.TipoOpnIe).IsUnicode(false);
            });

            modelBuilder.Entity<FclaCalidad>(entity =>
            {
                entity.Property(e => e.IdCalidad)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Descripcionimp).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Fcliente>(entity =>
            {
                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.AgrupMarcModFrac).IsUnicode(false);

                entity.Property(e => e.Agrupar)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true);

                entity.Property(e => e.AgruparXDesc).IsUnicode(false);

                entity.Property(e => e.AgruparXFactprov).IsUnicode(false);

                entity.Property(e => e.AgruparXIdent).IsUnicode(false);

                entity.Property(e => e.AgruparXPermisos)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AgruparXProducto).IsUnicode(false);

                entity.Property(e => e.Almacen).IsUnicode(false);

                entity.Property(e => e.Anexo24).IsUnicode(false);

                entity.Property(e => e.AplicaFactorSeguro).IsUnicode(false);

                entity.Property(e => e.AuthenSmtp).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutomaticSmtp).HasDefaultValueSql("((0))");

                entity.Property(e => e.AutorizadoVulnerable).IsUnicode(false);

                entity.Property(e => e.AutorizarPagoIgi).IsUnicode(false);

                entity.Property(e => e.BdIntel)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.Cconsecutivo).IsUnicode(false);

                entity.Property(e => e.ClasificaPoUm).IsUnicode(false);

                entity.Property(e => e.ClienteFacturacion).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.ContactFirstName).IsUnicode(false);

                entity.Property(e => e.ContactLastName).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.Crossdock)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.Curp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveCliente)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.CveTipoEmpresa).IsUnicode(false);

                entity.Property(e => e.DescripcionGrupoPerfil).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.FerrApoderado).IsUnicode(false);

                entity.Property(e => e.FerrEscape).IsUnicode(false);

                entity.Property(e => e.FerrEstacion).IsUnicode(false);

                entity.Property(e => e.FirmaAutografa).IsUnicode(false);

                entity.Property(e => e.Ft2).IsUnicode(false);

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdConsec1).IsUnicode(false);

                entity.Property(e => e.IdConsec2).IsUnicode(false);

                entity.Property(e => e.IdConsec3).IsUnicode(false);

                entity.Property(e => e.IdConsec4).IsUnicode(false);

                entity.Property(e => e.IdCorresponsal).IsUnicode(false);

                entity.Property(e => e.IdFiscal).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Jwt).IsUnicode(false);

                entity.Property(e => e.LeyendaNotifEnt)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Localidad).IsUnicode(false);

                entity.Property(e => e.Logo).IsUnicode(false);

                entity.Property(e => e.MenajeDeCasa)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoPartePed)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Notificacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumPlanta).IsUnicode(false);

                entity.Property(e => e.NumPrograma).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.NumeroInterior)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ObsPartidaAgrupar).IsUnicode(false);

                entity.Property(e => e.ObsPartidaNoagrupar).IsUnicode(false);

                entity.Property(e => e.ObserFacturaParte)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ObservFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ObservProveedor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OficinaOrigen).IsUnicode(false);

                entity.Property(e => e.OrdenNota)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.PacklistPendienteFctra).IsUnicode(false);

                entity.Property(e => e.PasarMarcaModelo).IsUnicode(false);

                entity.Property(e => e.PasarProductoMarca).IsUnicode(false);

                entity.Property(e => e.PasarSeriesVins).IsUnicode(false);

                entity.Property(e => e.PasarTxDestinatario).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.PasswordSmtp).IsUnicode(false);

                entity.Property(e => e.PathA24).IsUnicode(false);

                entity.Property(e => e.PdfUnico)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PoSeriesNotaRev).IsUnicode(false);

                entity.Property(e => e.PrefijoCliente).IsUnicode(false);

                entity.Property(e => e.PrefijoOcOrRe).IsUnicode(false);

                entity.Property(e => e.ProdXCliente)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ProtocolSmtp).HasDefaultValueSql("((0))");

                entity.Property(e => e.R1CopiaUnidades).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.RazonSocialAbreviada).IsUnicode(false);

                entity.Property(e => e.RefAuxMvHc).IsUnicode(false);

                entity.Property(e => e.Regla8va)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ReportePedTxt)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.RnimRnpp).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.SagarColonia).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ServerSmtp).IsUnicode(false);

                entity.Property(e => e.SiempreGeneraShipper)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tarifa)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);

                entity.Property(e => e.Telefono3).IsUnicode(false);

                entity.Property(e => e.Telefono4).IsUnicode(false);

                entity.Property(e => e.TraficosFast).IsUnicode(false);

                entity.Property(e => e.UltimateConsigneeType).IsUnicode(false);

                entity.Property(e => e.UseridSmtp).IsUnicode(false);

                entity.Property(e => e.V1SinVehiculo).IsUnicode(false);

                entity.Property(e => e.ValFolioSolf)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValSalesOrder).IsUnicode(false);

                entity.Property(e => e.ValidarCove).IsUnicode(false);

                entity.Property(e => e.ValidarProducto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValidarProductosRegimen)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<FclienteAduanaRegiman>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdAduana, e.IdRegimen, e.CveTipoOpn })
                    .HasName("pk_cli_adu_reg");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.Agrupar).IsUnicode(false);

                entity.Property(e => e.Orden).IsUnicode(false);

                entity.Property(e => e.Seccion).IsUnicode(false);
            });

            modelBuilder.Entity<FclienteAutorizadoPagoFraccVul>(entity =>
            {
                entity.HasKey(e => e.IdCliente)
                    .HasName("PK_FCLIENTE_AUT_PAGO_FRACC_VUL");

                entity.Property(e => e.IdCliente).IsUnicode(false);
            });

            modelBuilder.Entity<FclienteConsecutivo>(entity =>
            {
                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Prefijo).IsUnicode(false);
            });

            modelBuilder.Entity<FclienteConsecutivoRecibo>(entity =>
            {
                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Prefijo).IsUnicode(false);
            });

            modelBuilder.Entity<FclienteCordone>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdRuta });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdRuta).ValueGeneratedOnAdd();

                entity.Property(e => e.CordonCentro).IsUnicode(false);

                entity.Property(e => e.CordonIstmo).IsUnicode(false);

                entity.Property(e => e.CordonNorte).IsUnicode(false);

                entity.Property(e => e.CordonPeninsular).IsUnicode(false);

                entity.Property(e => e.CordonSur).IsUnicode(false);
            });

            modelBuilder.Entity<FclienteEscape>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdEscape })
                    .HasName("pk_fcliente_escape");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdEscape).ValueGeneratedOnAdd();

                entity.Property(e => e.Clave).IsUnicode(false);

                entity.Property(e => e.Consignatario).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Domicilio).IsUnicode(false);

                entity.Property(e => e.Estacion).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Telefono).IsUnicode(false);

                entity.HasOne(d => d.IdClienteNavigation)
                    .WithMany(p => p.FclienteEscapes)
                    .HasForeignKey(d => d.IdCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fcliente_escape");

                entity.HasOne(d => d.IdMunicipioNavigation)
                    .WithMany(p => p.FclienteEscapes)
                    .HasForeignKey(d => d.IdMunicipio)
                    .HasConstraintName("fk1_fcliente_escape");
            });

            modelBuilder.Entity<FclienteManifestacione>(entity =>
            {
                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.LeyendaArticulo65).IsUnicode(false);
            });

            modelBuilder.Entity<FclienteNotificacion>(entity =>
            {
                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Adjunto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Asunto).IsUnicode(false);

                entity.Property(e => e.Mensaje).IsUnicode(false);
            });

            modelBuilder.Entity<FclientePerfil>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.CveTipoOp });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CveTipoOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AnexoFacturasPedCompleto).IsUnicode(false);

                entity.Property(e => e.CalcularFactor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CartaEncomenda)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CertificadoOrigen)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoBarrasPedCompleto).IsUnicode(false);

                entity.Property(e => e.CoveObservacionesPedimento).IsUnicode(false);

                entity.Property(e => e.CveDestino)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTransArribo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTransEnt)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTransSalida)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescripcionClas).IsUnicode(false);

                entity.Property(e => e.DualidadProductos)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FiltroFc)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.ManifestacionValor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PagoElectronico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PasarContenedor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PasarObservaciones).IsUnicode(false);

                entity.Property(e => e.ProdObligatorio)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RazonSocialProv).IsUnicode(false);

                entity.Property(e => e.TipoFactura).IsUnicode(false);
            });

            modelBuilder.Entity<FclientePerfilCartaEncomiendum>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.CveTipoOp, e.IdPatente })
                    .HasName("pk_cliente_perfil_carta_encomienda");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CveTipoOp).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.CartaEncomienda).IsUnicode(false);
            });

            modelBuilder.Entity<FclientePerfilEncargoConferido>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdPatente })
                    .HasName("pk_cliente_perfil_encargo_conferido");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.EncargoConferido).IsUnicode(false);
            });

            modelBuilder.Entity<FclientePerfilFactMex>(entity =>
            {
                entity.HasKey(e => e.IdCliente)
                    .HasName("pk_fcliente_perfil_fact_mex");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Atencion).IsUnicode(false);

                entity.Property(e => e.CPais).IsUnicode(false);

                entity.Property(e => e.CUsoCfdi).IsUnicode(false);

                entity.Property(e => e.CuentaPredial).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdOrganizacion).IsUnicode(false);

                entity.Property(e => e.IdTipoOrg).IsUnicode(false);

                entity.Property(e => e.IncluirCtaAme).IsUnicode(false);

                entity.Property(e => e.Localidad).IsUnicode(false);

                entity.Property(e => e.Mensajeria).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RutaArchivoPdf).IsUnicode(false);

                entity.Property(e => e.TipoContable).IsUnicode(false);
            });

            modelBuilder.Entity<FclientePerfilGeneral>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.CveTipoOper });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CveTipoOper)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FclientePerfilLeyendum>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.CveTipoOp, e.Secuencial, e.IdRegimen });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CveTipoOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.Leyenda).IsUnicode(false);
            });

            modelBuilder.Entity<FclientePerfilManvalcartum>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.CveTipoOp, e.IdPatente });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CveTipoOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.CartaEncomenda)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ManifestacionValor)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FclientePerfilProsec>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.CveTipoOp, e.IdRegimen, e.IdTipoAdvalorem });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CveTipoOp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.Orden)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FclientePerfilRegFraccionPer>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.CveTipoOper, e.IdRegimen, e.IdFraccion, e.IdPermiso, e.NumeroPermiso });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CveTipoOper)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.NumeroPermiso).IsUnicode(false);

                entity.Property(e => e.FirmaPermiso).IsUnicode(false);
            });

            modelBuilder.Entity<FclientePerfilRegiIdenAduana>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.CveTipoOper, e.IdRegimen, e.TipoCaso, e.IdAduana, e.Complemento1, e.Complemento2, e.Complemento3 });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CveTipoOper)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.Complemento1).IsUnicode(false);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);
            });

            modelBuilder.Entity<FclientePerfilRegiman>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.CveTipoOper, e.IdRegimen, e.TipoCaso, e.Complemento1, e.Complemento2, e.Complemento3 });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CveTipoOper)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Complemento1).IsUnicode(false);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);
            });

            modelBuilder.Entity<FclientePerfilRegimenAduana>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.CveTipoOper, e.IdRegimen, e.TipoCaso, e.IdAduana, e.Complemento1, e.Complemento2, e.Complemento3 });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CveTipoOper)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.Complemento1).IsUnicode(false);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);
            });

            modelBuilder.Entity<FclientePerfilRegimenFraccion>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.CveTipoOper, e.IdRegimen, e.TipoCaso, e.IdFraccion, e.Complemento1, e.Complemento2, e.Complemento3 });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CveTipoOper)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.Complemento1).IsUnicode(false);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);
            });

            modelBuilder.Entity<FclientePerfilRegimenFraccionAduana>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.CveTipoOper, e.IdRegimen, e.TipoCaso, e.IdAduana, e.IdFraccion, e.Complemento1, e.Complemento2, e.Complemento3 });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CveTipoOper)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.Complemento1).IsUnicode(false);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);
            });

            modelBuilder.Entity<FclientePerfilTransporte>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.CveTipoOp, e.IdRegimen, e.IdAduana })
                    .HasName("pk_fcliente_perfil_transporte");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CveTipoOp).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.CveTransArribo).IsUnicode(false);

                entity.Property(e => e.CveTransEntrada).IsUnicode(false);

                entity.Property(e => e.CveTransSalida).IsUnicode(false);
            });

            modelBuilder.Entity<FclientePlantum>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.NumPlanta })
                    .HasName("pk_cliente_planta");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FclientePrefijo>(entity =>
            {
                entity.HasKey(e => e.IdClientePrefijo)
                    .HasName("pk_fcliente_prefijos");

                entity.Property(e => e.IdClientePrefijo).ValueGeneratedNever();

                entity.Property(e => e.IdCliente).IsUnicode(false);
            });

            modelBuilder.Entity<FclienteProveedorCatalogo>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor })
                    .HasName("PK__fcliente__FFACE7176EB68165");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);
            });

            modelBuilder.Entity<Fcompliance>(entity =>
            {
                entity.Property(e => e.IdComp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Seccion).IsUnicode(false);
            });

            modelBuilder.Entity<Fconcepto>(entity =>
            {
                entity.HasKey(e => new { e.IdConcepto, e.CveAmeMex })
                    .HasName("pk_fconceptos");

                entity.Property(e => e.IdConcepto).IsUnicode(false);

                entity.Property(e => e.CveAmeMex)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AfectaHon)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.CClaveProdServ).IsUnicode(false);

                entity.Property(e => e.CClaveUnidad).IsUnicode(false);

                entity.Property(e => e.CtaContable).IsUnicode(false);

                entity.Property(e => e.Descripcion2).IsUnicode(false);

                entity.Property(e => e.DescripcionConc).IsUnicode(false);

                entity.Property(e => e.DescripcionSat).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);
            });

            modelBuilder.Entity<FconceptosAme>(entity =>
            {
                entity.Property(e => e.AfectaHon)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CtaContable).IsUnicode(false);

                entity.Property(e => e.CveAmeMex)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescripcionConc).IsUnicode(false);

                entity.Property(e => e.IdConcepto).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);
            });

            modelBuilder.Entity<FconceptosNoPedimento>(entity =>
            {
                entity.Property(e => e.IdConcepto).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FconsecXAdupat>(entity =>
            {
                entity.HasKey(e => new { e.IdAduana, e.Seccion });

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdPrefijo).IsUnicode(false);
            });

            modelBuilder.Entity<FconsecpedNout>(entity =>
            {
                entity.HasKey(e => new { e.IdAduana, e.IdPatente, e.Seccion, e.Pedimento, e.IdAnio });

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Pedimento).IsUnicode(false);
            });

            modelBuilder.Entity<FconsecutivoEmbarque>(entity =>
            {
                entity.HasIndex(e => e.ConsecutivoEmbarque, "i_consecutivo_embarque")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);
            });

            modelBuilder.Entity<FconsecutivoEntradum>(entity =>
            {
                entity.HasIndex(e => e.ConsecutivoEntrada, "i_consecutivo_entrada")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);
            });

            modelBuilder.Entity<FconsecutivoFactura>(entity =>
            {
                entity.Property(e => e.Prefijo).IsUnicode(false);
            });

            modelBuilder.Entity<FconsecutivoFerrocarril>(entity =>
            {
                entity.HasIndex(e => e.ConsecutivoFerrocarril, "i_consecutivo_ferrocarril")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);
            });

            modelBuilder.Entity<FconsecutivoShipper>(entity =>
            {
                entity.HasKey(e => e.ConsecutivoShipper)
                    .HasName("pk_fconsecutivo_shipper");
            });

            modelBuilder.Entity<FconsecutivoTrafico>(entity =>
            {
                entity.HasIndex(e => e.ConsecutivoTrafico, "i_consecutivo_trafico")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);
            });

            modelBuilder.Entity<FconsecutivoTraficoCliente>(entity =>
            {
                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdPrefijo).IsUnicode(false);
            });

            modelBuilder.Entity<FconsecutivoXBodegaCalculo>(entity =>
            {
                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdPrefijo).IsUnicode(false);
            });

            modelBuilder.Entity<FconsecutivoXBodegaEmbarque>(entity =>
            {
                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdPrefijo).IsUnicode(false);
            });

            modelBuilder.Entity<FconsecutivoXBodegaPedimento>(entity =>
            {
                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdPrefijo).IsUnicode(false);
            });

            modelBuilder.Entity<FconsecutivoXBodegaTrafico>(entity =>
            {
                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdPrefijo).IsUnicode(false);
            });

            modelBuilder.Entity<Fconsignatario>(entity =>
            {
                entity.HasKey(e => e.IdConsignatario)
                    .HasName("pk_fconsignatario");

                entity.Property(e => e.IdConsignatario).IsUnicode(false);

                entity.Property(e => e.ApMaterno).IsUnicode(false);

                entity.Property(e => e.ApPaterno).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.Curp).IsUnicode(false);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);

                entity.Property(e => e.Telefono3).IsUnicode(false);

                entity.Property(e => e.Telefono4).IsUnicode(false);

                entity.HasOne(d => d.IdMunicipioNavigation)
                    .WithMany(p => p.Fconsignatarios)
                    .HasForeignKey(d => d.IdMunicipio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fconsignatario");

                entity.HasOne(d => d.IdUsuarioRegistroNavigation)
                    .WithMany(p => p.FconsignatarioIdUsuarioRegistroNavigations)
                    .HasForeignKey(d => d.IdUsuarioRegistro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fconsignatario");

                entity.HasOne(d => d.IdUsuarioUltmodifNavigation)
                    .WithMany(p => p.FconsignatarioIdUsuarioUltmodifNavigations)
                    .HasForeignKey(d => d.IdUsuarioUltmodif)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk3_fconsignatario");
            });

            modelBuilder.Entity<FconsolidaFacturasCarga>(entity =>
            {
                entity.HasKey(e => new { e.NumControl, e.IdReferencia, e.IdRectificacion, e.IdTipoVehiculo, e.NumeroVehiculo, e.IdFactura, e.Consecutivo })
                    .HasName("PK_fcfacturas_carga");

                entity.Property(e => e.NumControl).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.Caat).IsUnicode(false);

                entity.Property(e => e.ConsecutivoOriginal).HasDefaultValueSql("(0)");

                entity.Property(e => e.Contenedor1).IsUnicode(false);

                entity.Property(e => e.Contenedor2).IsUnicode(false);

                entity.Property(e => e.Contenedor3).IsUnicode(false);

                entity.Property(e => e.Contenedor4).IsUnicode(false);

                entity.Property(e => e.Edocument).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdAgente).IsUnicode(false);

                entity.Property(e => e.IdApoderado).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.Pedimento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FcontBanco>(entity =>
            {
                entity.HasIndex(e => e.ContadorBancos, "i_fcont_bancos")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);
            });

            modelBuilder.Entity<FcontMaquila>(entity =>
            {
                entity.HasIndex(e => e.ContadorMaquila, "i_fcont_maquila")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);
            });

            modelBuilder.Entity<FcontNormal>(entity =>
            {
                entity.HasKey(e => e.ContadorNormal)
                    .HasName("pk_fcont_normal");

                entity.Property(e => e.ContadorNormal).ValueGeneratedNever();
            });

            modelBuilder.Entity<FcontNormalAux>(entity =>
            {
                entity.HasKey(e => e.ContadorNormal)
                    .HasName("pk_fcont_normal_aux");

                entity.Property(e => e.ContadorNormal).ValueGeneratedNever();
            });

            modelBuilder.Entity<FcontProfepa>(entity =>
            {
                entity.HasKey(e => e.ContadorProfepa)
                    .HasName("pk_fcont_profepa");

                entity.Property(e => e.ContadorProfepa).ValueGeneratedNever();
            });

            modelBuilder.Entity<FcontSagar>(entity =>
            {
                entity.HasKey(e => e.ContadorSagar)
                    .HasName("pk_fcont_sagar")
                    .IsClustered(false);

                entity.HasIndex(e => e.ContadorSagar, "i_fcont_sagar")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ContadorSagar).ValueGeneratedNever();
            });

            modelBuilder.Entity<Fcontacto>(entity =>
            {
                entity.HasKey(e => e.IdContacto)
                    .HasName("pk_fcontacto");

                entity.Property(e => e.IdContacto).IsUnicode(false);

                entity.Property(e => e.ApMaterno).IsUnicode(false);

                entity.Property(e => e.ApPaterno).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.CveTipoOrganizacion).IsUnicode(false);

                entity.Property(e => e.Defaultt)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdOrg).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Puesto).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);

                entity.Property(e => e.Telefono3).IsUnicode(false);

                entity.Property(e => e.Telefono4).IsUnicode(false);

                entity.Property(e => e.Titulo).IsUnicode(false);

                entity.HasOne(d => d.CveTipoOrganizacionNavigation)
                    .WithMany(p => p.Fcontactos)
                    .HasForeignKey(d => d.CveTipoOrganizacion)
                    .HasConstraintName("fk4_fcontacto");
            });

            modelBuilder.Entity<FcontadoresAduanaPatente>(entity =>
            {
                entity.HasKey(e => new { e.IdPatente, e.IdAduana })
                    .HasName("pk_fcontadores_aduana_patente");

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);
            });

            modelBuilder.Entity<FcontrolBascula>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.ClaveRecinto).IsUnicode(false);

                entity.Property(e => e.Granel)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.NumIdentifica).IsUnicode(false);

                entity.Property(e => e.NumeroContenedor).IsUnicode(false);

                entity.Property(e => e.Pedimento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FcontrolEmbarque>(entity =>
            {
                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.AgAdAmeObserv).IsUnicode(false);

                entity.Property(e => e.AgAdAmeSello).IsUnicode(false);

                entity.Property(e => e.AgenciaAdObserv).IsUnicode(false);

                entity.Property(e => e.AgenciaAdSello).IsUnicode(false);

                entity.Property(e => e.ClienteObserv).IsUnicode(false);

                entity.Property(e => e.ClienteSello).IsUnicode(false);

                entity.Property(e => e.Entry).IsUnicode(false);

                entity.Property(e => e.IdAgAdAme).IsUnicode(false);

                entity.Property(e => e.IdAgenciaAduanal).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdLineaFleteraAme).IsUnicode(false);

                entity.Property(e => e.IdLineaFleteraMex).IsUnicode(false);

                entity.Property(e => e.IdOrdenCompra).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.IdTransfer).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.LineaAmeObserv).IsUnicode(false);

                entity.Property(e => e.LineaAmeSello).IsUnicode(false);

                entity.Property(e => e.LineaMexObserv).IsUnicode(false);

                entity.Property(e => e.LineaMexSello).IsUnicode(false);

                entity.Property(e => e.NumVehiculo).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.PreFile).IsUnicode(false);

                entity.Property(e => e.ProveedorOberv).IsUnicode(false);

                entity.Property(e => e.ProveedorSello).IsUnicode(false);

                entity.Property(e => e.TransferObserv).IsUnicode(false);

                entity.Property(e => e.TransferSello).IsUnicode(false);

                entity.Property(e => e.Vehiculos).IsUnicode(false);
            });

            modelBuilder.Entity<Fcoorporativo>(entity =>
            {
                entity.HasKey(e => e.IdCoorporativo)
                    .HasName("pk_fcoorporativo");

                entity.Property(e => e.IdCoorporativo).IsUnicode(false);

                entity.Property(e => e.Abreviado).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.Representante).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FcoorporativoCliente>(entity =>
            {
                entity.HasKey(e => new { e.IdCoorporativo, e.IdCliente })
                    .HasName("pk_fcoorporativo_cliente");

                entity.Property(e => e.IdCoorporativo).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IdCoorporativoNavigation)
                    .WithMany(p => p.FcoorporativoClientes)
                    .HasForeignKey(d => d.IdCoorporativo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fcoorporativo_cliente");
            });

            modelBuilder.Entity<Fcordon>(entity =>
            {
                entity.Property(e => e.IdCordon).IsUnicode(false);

                entity.Property(e => e.Cordon)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Estado).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Zona)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FcorrelFrac>(entity =>
            {
                entity.HasKey(e => new { e.IdFraccionAnt, e.IdFraccionNva, e.Nico })
                    .HasName("PK__fcorrel___1486FEB7F19A3E3B");

                entity.Property(e => e.IdFraccionAnt).IsUnicode(false);

                entity.Property(e => e.IdFraccionNva).IsUnicode(false);

                entity.Property(e => e.Nico).IsUnicode(false);

                entity.Property(e => e.Actualizacion).IsUnicode(false);

                entity.Property(e => e.Complemento).IsUnicode(false);

                entity.Property(e => e.Eliminar).IsUnicode(false);
            });

            modelBuilder.Entity<FcorreoInterno>(entity =>
            {
                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.IdProceso).IsUnicode(false);
            });

            modelBuilder.Entity<Fcorresponsal>(entity =>
            {
                entity.HasKey(e => e.IdCorresponsal)
                    .HasName("pk_fcorresponsal");

                entity.Property(e => e.IdCorresponsal).IsUnicode(false);

                entity.Property(e => e.ApMaterno).IsUnicode(false);

                entity.Property(e => e.ApPaterno).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.CveOperatico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);

                entity.Property(e => e.Telefono3).IsUnicode(false);

                entity.Property(e => e.Telefono4).IsUnicode(false);

                entity.Property(e => e.TipoCorresponsalContable).IsUnicode(false);

                entity.Property(e => e.Titulo).IsUnicode(false);

                entity.HasOne(d => d.IdMunicipioNavigation)
                    .WithMany(p => p.Fcorresponsals)
                    .HasForeignKey(d => d.IdMunicipio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fcorresponsal");

                entity.HasOne(d => d.IdUsuarioRegistroNavigation)
                    .WithMany(p => p.Fcorresponsals)
                    .HasForeignKey(d => d.IdUsuarioRegistro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fcorresponsal");
            });

            modelBuilder.Entity<FcorresponsalReferencium>(entity =>
            {
                entity.Property(e => e.BillGuia).IsUnicode(false);

                entity.Property(e => e.Comentarios).IsUnicode(false);

                entity.Property(e => e.Contacto).IsUnicode(false);

                entity.Property(e => e.Corresponsal).IsUnicode(false);

                entity.Property(e => e.Destino).IsUnicode(false);

                entity.Property(e => e.Factura).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltMod).IsUnicode(false);

                entity.Property(e => e.LineaBarco).IsUnicode(false);

                entity.Property(e => e.LineaSalida).IsUnicode(false);

                entity.Property(e => e.Mercancia).IsUnicode(false);

                entity.Property(e => e.NoContenedor).IsUnicode(false);

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.ReferenciaCorres).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.TalonSalida).IsUnicode(false);

                entity.Property(e => e.Transporte).IsUnicode(false);
            });

            modelBuilder.Entity<Fcove>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdFactura, e.Identificador, e.Consecutivo })
                    .HasName("pk_fcove");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.Adenda).IsUnicode(false);

                entity.Property(e => e.CadenaOriginal).IsUnicode(false);

                entity.Property(e => e.Certificado).IsUnicode(false);

                entity.Property(e => e.Curp).IsUnicode(false);

                entity.Property(e => e.CurpFigura).IsUnicode(false);

                entity.Property(e => e.Edocument).IsUnicode(false);

                entity.Property(e => e.FechaTransaccion).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdApoderado).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.MensajeTransaccion).IsUnicode(false);

                entity.Property(e => e.NumExportConfiable).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.NumeroTransaccion).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.RazonSocialConsulta).IsUnicode(false);

                entity.Property(e => e.RelFac)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.RfcConsulta).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Subdivision)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TaxId).IsUnicode(false);

                entity.Property(e => e.TipoFigura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoFiguraCove).IsUnicode(false);

                entity.Property(e => e.TipoIdentificador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOperacion).IsUnicode(false);
            });

            modelBuilder.Entity<FcoveClienteObservacione>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdObservacion })
                    .HasName("pk_cliente_observacion");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdObservacion).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<FcoveFactura>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdFactura, e.Identificador, e.Consecutivo })
                    .HasName("pk_fcove_facturas");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.Curp).IsUnicode(false);

                entity.Property(e => e.DesApellidoMaterno).IsUnicode(false);

                entity.Property(e => e.DesApellidoPaterno).IsUnicode(false);

                entity.Property(e => e.DesCalle).IsUnicode(false);

                entity.Property(e => e.DesCodigoPostal).IsUnicode(false);

                entity.Property(e => e.DesColonia).IsUnicode(false);

                entity.Property(e => e.DesEstado).IsUnicode(false);

                entity.Property(e => e.DesLocalidad).IsUnicode(false);

                entity.Property(e => e.DesMunicipio).IsUnicode(false);

                entity.Property(e => e.DesNombre).IsUnicode(false);

                entity.Property(e => e.DesNumeroExterior).IsUnicode(false);

                entity.Property(e => e.DesNumeroInterior).IsUnicode(false);

                entity.Property(e => e.DesPais).IsUnicode(false);

                entity.Property(e => e.DesReferencia).IsUnicode(false);

                entity.Property(e => e.EmApellidoMaterno).IsUnicode(false);

                entity.Property(e => e.EmApellidoPaterno).IsUnicode(false);

                entity.Property(e => e.EmCalle).IsUnicode(false);

                entity.Property(e => e.EmCodigoPostal).IsUnicode(false);

                entity.Property(e => e.EmColonia).IsUnicode(false);

                entity.Property(e => e.EmCurp).IsUnicode(false);

                entity.Property(e => e.EmEstado).IsUnicode(false);

                entity.Property(e => e.EmLocalidad).IsUnicode(false);

                entity.Property(e => e.EmMunicipio).IsUnicode(false);

                entity.Property(e => e.EmNombre).IsUnicode(false);

                entity.Property(e => e.EmNumExt).IsUnicode(false);

                entity.Property(e => e.EmNumInt).IsUnicode(false);

                entity.Property(e => e.EmPais).IsUnicode(false);

                entity.Property(e => e.EmReferencia).IsUnicode(false);

                entity.Property(e => e.EmRfc).IsUnicode(false);

                entity.Property(e => e.EmTaxId).IsUnicode(false);

                entity.Property(e => e.EmTipoIdentificador).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.TaxId).IsUnicode(false);

                entity.Property(e => e.TipoIdentificadorDest).IsUnicode(false);
            });

            modelBuilder.Entity<FcoveMercanciaMarca>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdFactura, e.Identificador, e.Consecutivo, e.SecMerMar, e.NumMercancia })
                    .HasName("pk_fcove_mercancia_marca");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.SubModelo).IsUnicode(false);
            });

            modelBuilder.Entity<FcoveMercancium>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdFactura, e.Identificador, e.Consecutivo, e.Secuencial })
                    .HasName("pk_fcove_mercancia");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.CveUnidadCom).IsUnicode(false);

                entity.Property(e => e.CveUnidadComercial).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.TipoMoneda).IsUnicode(false);
            });

            modelBuilder.Entity<FcovePatenteCorresponsal>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Consecutivo, e.Patente })
                    .HasName("pk_fcove_patente_corresponsal");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Patente).IsUnicode(false);
            });

            modelBuilder.Entity<FcovePedimento>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion })
                    .HasName("pk_fcove_pedimento");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdTipoPedimento).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.RazonSocialCliente).IsUnicode(false);

                entity.Property(e => e.Seccion).IsUnicode(false);
            });

            modelBuilder.Entity<FcoveRemesa>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Consecutivo })
                    .HasName("pk_fcove_remesa");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Adenda).IsUnicode(false);

                entity.Property(e => e.Edocument).IsUnicode(false);
            });

            modelBuilder.Entity<FcoveRemesaHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Consecutivo, e.Estado })
                    .HasName("pk_fcove_remesa_historico");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Estado).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.MetodoObtencion).IsUnicode(false);
            });

            modelBuilder.Entity<FcoveRfcConsultaCorresponsal>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Consecutivo, e.Rfc })
                    .HasName("pk_fcove_rfc_consulta_corresponsal");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);
            });

            modelBuilder.Entity<FcoveRfcConsultum>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.RfcConsulta });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.RfcConsulta).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);
            });

            modelBuilder.Entity<FcoveRuta>(entity =>
            {
                entity.HasKey(e => new { e.TipoFigura, e.Rfc });

                entity.Property(e => e.TipoFigura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Contrasena).IsUnicode(false);

                entity.Property(e => e.ContrasenaWeb).IsUnicode(false);

                entity.Property(e => e.RutaCer).IsUnicode(false);

                entity.Property(e => e.RutaKey).IsUnicode(false);

                entity.Property(e => e.RutaXml).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<FcoveRutasCliente>(entity =>
            {
                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CerVencimiento)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Contrasena).IsUnicode(false);

                entity.Property(e => e.ContrasenaWeb).IsUnicode(false);

                entity.Property(e => e.Corresponsal).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.RutaCer).IsUnicode(false);

                entity.Property(e => e.RutaKey).IsUnicode(false);

                entity.Property(e => e.RutaXml).IsUnicode(false);

                entity.Property(e => e.Sha256).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<FcoveRutasUsuario>(entity =>
            {
                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.Contrasena).IsUnicode(false);

                entity.Property(e => e.ContrasenaWeb).IsUnicode(false);

                entity.Property(e => e.RutaCer).IsUnicode(false);

                entity.Property(e => e.RutaKey).IsUnicode(false);

                entity.Property(e => e.RutaXml).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<FcoveXmlRespaldo>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Consecutivo, e.IdFactura, e.Identificador, e.Movimiento, e.Request, e.NumeroTransaccion })
                    .HasName("PK__fcove_xm__5CF923DA269F1AE5");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.Movimiento).IsUnicode(false);

                entity.Property(e => e.Request).IsUnicode(false);

                entity.Property(e => e.NumeroTransaccion).IsUnicode(false);

                entity.Property(e => e.Xml).IsUnicode(false);
            });

            modelBuilder.Entity<FcoveXmlW>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Cove })
                    .HasName("pk_fcove_xml_ws");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Cove).IsUnicode(false);

                entity.Property(e => e.DescripcionError).IsUnicode(false);

                entity.Property(e => e.RutaXml).IsUnicode(false);
            });

            modelBuilder.Entity<Fcoved>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Consecutivo, e.Secuencial, e.TipoDocumento });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.TipoDocumento).IsUnicode(false);

                entity.Property(e => e.CadenaOriginal).IsUnicode(false);

                entity.Property(e => e.DigitalizadoControl).IsUnicode(false);

                entity.Property(e => e.Edocument).IsUnicode(false);

                entity.Property(e => e.FechaTransaccion).IsUnicode(false);

                entity.Property(e => e.FirmaElecAva).IsUnicode(false);

                entity.Property(e => e.IdApoderado).IsUnicode(false);

                entity.Property(e => e.MensajeTransaccion).IsUnicode(false);

                entity.Property(e => e.NombreDocumento).IsUnicode(false);

                entity.Property(e => e.NumeroTramite).IsUnicode(false);

                entity.Property(e => e.NumeroTransaccion).IsUnicode(false);

                entity.Property(e => e.RfcConsulta).IsUnicode(false);

                entity.Property(e => e.RfcFirma).IsUnicode(false);

                entity.Property(e => e.RutaEdocuments).IsUnicode(false);

                entity.Property(e => e.RutaNombreArchivo).IsUnicode(false);
            });

            modelBuilder.Entity<FcovedCatalogo>(entity =>
            {
                entity.Property(e => e.IdDocumento).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FcovedDocumento>(entity =>
            {
                entity.Property(e => e.IdDigitalizacion).IsUnicode(false);

                entity.Property(e => e.CadenaOriginal).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Edocument).IsUnicode(false);

                entity.Property(e => e.FechaTransaccion).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.MensajeTransaccion).IsUnicode(false);

                entity.Property(e => e.NombreDocumento).IsUnicode(false);

                entity.Property(e => e.NumeroTramite).IsUnicode(false);

                entity.Property(e => e.NumeroTransaccion).IsUnicode(false);

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.RfcConsulta).IsUnicode(false);

                entity.Property(e => e.RfcFirma).IsUnicode(false);

                entity.Property(e => e.RutaDocumento).IsUnicode(false);

                entity.Property(e => e.TipoDocumento).IsUnicode(false);
            });

            modelBuilder.Entity<FcovedPdf>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Edocument })
                    .HasName("pk_fcoved_pdf");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Edocument).IsUnicode(false);

                entity.Property(e => e.DescripcionError).IsUnicode(false);

                entity.Property(e => e.RutaPdf).IsUnicode(false);
            });

            modelBuilder.Entity<FdLote>(entity =>
            {
                entity.HasKey(e => new { e.Lote, e.Tipo, e.N1 })
                    .HasName("PK_fd_lote");

                entity.HasIndex(e => new { e.Loteant, e.N1ant }, "IX_fd_lotes")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Lote)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tipo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Bl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Detalle)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdEntrada)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdUnidad)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Loteant)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FdcertificadoOrigen>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.NumSecuencial });

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.Criterion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescripcionClasificacion).IsUnicode(false);

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.NetCost)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Producer)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Fdespacho>(entity =>
            {
                entity.HasKey(e => e.NumControl)
                    .HasName("PK_fdespacho_1");

                entity.Property(e => e.NumControl).IsUnicode(false);

                entity.Property(e => e.CalificadorItn).IsUnicode(false);

                entity.Property(e => e.ClaveTransportista).IsUnicode(false);

                entity.Property(e => e.CodigoRespuesta).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion).IsUnicode(false);

                entity.Property(e => e.DatoErroneo).IsUnicode(false);

                entity.Property(e => e.DescripcionError).IsUnicode(false);

                entity.Property(e => e.EDespacho).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdTipoPedimento).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.NumeroOitn).IsUnicode(false);

                entity.Property(e => e.NumeroOperacion).IsUnicode(false);

                entity.Property(e => e.NumeroTarjetaFast).IsUnicode(false);

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.Seccion).IsUnicode(false);

                entity.Property(e => e.TipoMovimiento).IsUnicode(false);
            });

            modelBuilder.Entity<FdespachoBlDetalleV>(entity =>
            {
                entity.HasKey(e => new { e.NumControl, e.NumeroBl, e.Consecutivo, e.NumeroEquipo, e.Sello })
                    .HasName("pk_fdespacho_bl_detalle_v");

                entity.Property(e => e.NumControl).IsUnicode(false);

                entity.Property(e => e.NumeroBl).IsUnicode(false);

                entity.Property(e => e.NumeroEquipo).IsUnicode(false);

                entity.Property(e => e.Sello).IsUnicode(false);
            });

            modelBuilder.Entity<FdespachoBlV>(entity =>
            {
                entity.HasKey(e => new { e.NumControl, e.NumeroBl, e.Consecutivo })
                    .HasName("pk_fdespacho_bl_v");

                entity.Property(e => e.NumControl).IsUnicode(false);

                entity.Property(e => e.NumeroBl).IsUnicode(false);

                entity.Property(e => e.CodigoRespuesta).IsUnicode(false);

                entity.Property(e => e.EDespacho).IsUnicode(false);

                entity.Property(e => e.MensajeTransaccion).IsUnicode(false);

                entity.Property(e => e.NumeroOperacion).IsUnicode(false);
            });

            modelBuilder.Entity<FdespachoDependenciaInspeccion>(entity =>
            {
                entity.HasKey(e => new { e.NumControl, e.NumeroBl, e.IdReferencia, e.IdRectificacion, e.Consecutivo, e.Secuencial, e.DependenciaInspeccion })
                    .HasName("pk_fdespacho_dependencia_inspeccion");

                entity.Property(e => e.NumControl).IsUnicode(false);

                entity.Property(e => e.NumeroBl).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.DependenciaInspeccion).IsUnicode(false);

                entity.Property(e => e.EdocumentLicenciaCertificado).IsUnicode(false);

                entity.Property(e => e.FolioLicenciaCertificado).IsUnicode(false);
            });

            modelBuilder.Entity<FdespachoFechaConsultaBl>(entity =>
            {
                entity.HasKey(e => new { e.Fecha, e.Aduana });

                entity.Property(e => e.Aduana).IsUnicode(false);
            });

            modelBuilder.Entity<FdespachoListadoBl>(entity =>
            {
                entity.HasKey(e => new { e.ClaveTransportista, e.NumeroBl, e.EstadoBl })
                    .HasName("pk_fdespacho_listado_BL");

                entity.Property(e => e.ClaveTransportista).IsUnicode(false);

                entity.Property(e => e.NumeroBl).IsUnicode(false);

                entity.Property(e => e.EstadoBl).IsUnicode(false);

                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.FechaGuia).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.InicialesEquipo).IsUnicode(false);

                entity.Property(e => e.NumControl).IsUnicode(false);

                entity.Property(e => e.NumeroEquipo).IsUnicode(false);

                entity.Property(e => e.Seccion).IsUnicode(false);

                entity.Property(e => e.TipoOperacion).IsUnicode(false);
            });

            modelBuilder.Entity<FdespachoListadoBlSello>(entity =>
            {
                entity.HasKey(e => new { e.ClaveTransportista, e.NumeroBl, e.EstadoBl, e.Sello })
                    .HasName("pk_fdespacho_listado_BL_sellos");

                entity.Property(e => e.ClaveTransportista).IsUnicode(false);

                entity.Property(e => e.NumeroBl).IsUnicode(false);

                entity.Property(e => e.EstadoBl).IsUnicode(false);

                entity.Property(e => e.Sello).IsUnicode(false);
            });

            modelBuilder.Entity<FdespachoOperacion>(entity =>
            {
                entity.HasKey(e => new { e.NumeroBl, e.NumeroOperacion })
                    .HasName("pk_fdespacho_operacion_pk");

                entity.Property(e => e.NumeroBl).IsUnicode(false);

                entity.Property(e => e.NumeroOperacion).IsUnicode(false);

                entity.Property(e => e.Movimiento).IsUnicode(false);
            });

            modelBuilder.Entity<FdespachoPedimento>(entity =>
            {
                entity.HasKey(e => new { e.NumControl, e.IdReferencia, e.IdRectificacion, e.Consecutivo })
                    .HasName("pk_fdespacho_pedimento");

                entity.Property(e => e.NumControl).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Cove).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdTipoPedimento).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.RequiereInspeccion).IsUnicode(false);
            });

            modelBuilder.Entity<FdespachoPedimentoV>(entity =>
            {
                entity.HasKey(e => new { e.NumControl, e.NumeroBl, e.Consecutivo, e.IdReferencia, e.IdRectificacion, e.Secuencial })
                    .HasName("pk_fdespacho_pedimento_v");

                entity.Property(e => e.NumControl).IsUnicode(false);

                entity.Property(e => e.NumeroBl).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Cove).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdTipoPedimento).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.RequiereInspeccion).IsUnicode(false);
            });

            modelBuilder.Entity<FdespachoTransportistum>(entity =>
            {
                entity.HasKey(e => e.IdTransportista)
                    .HasName("PK__fdespach__6D39A93276218885");

                entity.Property(e => e.IdTransportista).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FdestinatarioEntradaFactura>(entity =>
            {
                entity.HasKey(e => new { e.IdEntrada, e.IdCliente, e.IdFactura, e.IdProveedor })
                    .HasName("pk_fdestinatario_entrada_factura");

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Entidad)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdPais).IsUnicode(false);

                entity.Property(e => e.Irs).IsUnicode(false);

                entity.Property(e => e.Municipio).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.NumeroInterior).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);
            });

            modelBuilder.Entity<FdestinatarioFerrocarrilFactura>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.IdFactura })
                    .HasName("pk_fdestinatario_ferrocarril_factura");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Entidad)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdPais).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.Irs).IsUnicode(false);

                entity.Property(e => e.Municipio).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.NumeroInterior).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);
            });

            modelBuilder.Entity<FdestinatarioRemesaFactura>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdTipoVehiculo, e.NumVehiculo, e.IdFactura, e.Consecutivo })
                    .HasName("pk_fdestinatario_remesa_factura");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumVehiculo).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Entidad)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdPais).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.Irs).IsUnicode(false);

                entity.Property(e => e.Municipio).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.NumeroInterior).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);
            });

            modelBuilder.Entity<Fdestino>(entity =>
            {
                entity.HasKey(e => new { e.IdDestino, e.IdTipoOrg, e.IdOrganizacion })
                    .HasName("pk_destinos");

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdTipoOrg).IsUnicode(false);

                entity.Property(e => e.IdOrganizacion).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodPost).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Telefono1).IsUnicode(false);
            });

            modelBuilder.Entity<FdestinoFinal>(entity =>
            {
                entity.HasKey(e => new { e.IdEmbarque, e.IdTipoVehiculo, e.NumVehiculo, e.IdCliente, e.IdDestino })
                    .HasName("pk_fdestino_final");

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumVehiculo).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.DobleOperador).IsUnicode(false);

                entity.Property(e => e.EntregadoA).IsUnicode(false);

                entity.Property(e => e.EntregadoPor).IsUnicode(false);

                entity.Property(e => e.FleteXCobrar).IsUnicode(false);

                entity.Property(e => e.GuiaFlete).IsUnicode(false);

                entity.Property(e => e.IdLineaAme).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdOrganizacion).IsUnicode(false);

                entity.Property(e => e.IdTipoOrg).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.TipoFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FdestinoFinalLight>(entity =>
            {
                entity.HasKey(e => new { e.IdEmbarque, e.IdTipoVehiculo, e.NumVehiculo, e.IdCliente, e.IdDestino })
                    .HasName("pk_fdestino_final_light");

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumVehiculo).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdLineaFleteTransfer)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdOrganizacion).IsUnicode(false);

                entity.Property(e => e.IdTipoOrg).IsUnicode(false);
            });

            modelBuilder.Entity<Fdetalle>(entity =>
            {
                entity.HasKey(e => new { e.Factura, e.Producto, e.Descripcion, e.Unidad, e.Cantidad, e.PrecioUnitario, e.Importe, e.Secuencial });

                entity.Property(e => e.Factura).IsUnicode(false);

                entity.Property(e => e.Producto).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Unidad).IsUnicode(false);

                entity.Property(e => e.Secuencial).ValueGeneratedOnAdd();

                entity.Property(e => e.FormaPago).IsUnicode(false);

                entity.Property(e => e.Fraccion).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Oficio).IsUnicode(false);

                entity.Property(e => e.PaisOrigen).IsUnicode(false);

                entity.Property(e => e.PaisProcedencia).IsUnicode(false);

                entity.Property(e => e.Preferencia).IsUnicode(false);

                entity.Property(e => e.Serie).IsUnicode(false);

                entity.Property(e => e.Valoracion).IsUnicode(false);

                entity.Property(e => e.Vinculacion).IsUnicode(false);
            });

            modelBuilder.Entity<FdetalleFraccion>(entity =>
            {
                entity.HasKey(e => new { e.IdShipper, e.IdFraccionAme })
                    .HasName("pk1_detalle_fraccion");

                entity.Property(e => e.IdShipper).IsUnicode(false);

                entity.Property(e => e.IdFraccionAme).IsUnicode(false);

                entity.Property(e => e.CveDomesticForeign)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Digito)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FdetallePartidum>(entity =>
            {
                entity.HasKey(e => new { e.IdEntrada, e.IdFactura, e.IdPackList, e.NumDetalle, e.IdProveedor, e.SecSubpartida })
                    .HasName("pk_fdetalle_partida");

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdPackList).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.AvisoImportacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CuotaCompensatoria)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EntSubpartida).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.PrecioEstimado)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FdetalleShipper>(entity =>
            {
                entity.HasKey(e => new { e.IdShipper, e.IdFraccionAme })
                    .HasName("pk1_shipper_detalle");

                entity.Property(e => e.IdShipper).IsUnicode(false);

                entity.Property(e => e.IdFraccionAme).IsUnicode(false);

                entity.Property(e => e.CveDomesticForeign)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Digito)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Fdfactura>(entity =>
            {
                entity.HasKey(e => new { e.IdEntrada, e.IdFactura, e.IdPackList, e.NumDetalle, e.IdProveedor })
                    .HasName("pk_fdfactura");

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdPackList).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.CantidadCartones)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cf).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdFraccion8va).IsUnicode(false);

                entity.Property(e => e.IdOrdenCompra).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdPaisVendedor).IsUnicode(false);

                entity.Property(e => e.IdPrevio).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProveedorOriginal).IsUnicode(false);

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.IdUnidadCliente).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.Immex)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.MercanciaDanada)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Nico).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.ObservacionesProducto).IsUnicode(false);

                entity.Property(e => e.ParteProveedor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Pl).IsUnicode(false);

                entity.Property(e => e.ProdAutorizado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Prosec).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Serie).IsUnicode(false);

                entity.Property(e => e.Sf).IsUnicode(false);

                entity.Property(e => e.SinNumero)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sku).IsUnicode(false);

                entity.Property(e => e.SubparSn)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Supp).IsUnicode(false);

                entity.Property(e => e.UnidadTarifa).IsUnicode(false);

                entity.HasOne(d => d.IdUnidadUniversalNavigation)
                    .WithMany(p => p.Fdfacturas)
                    .HasForeignKey(d => d.IdUnidadUniversal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk3_dfactura");
            });

            modelBuilder.Entity<Fdfactura2>(entity =>
            {
                entity.HasKey(e => new { e.IdEntrada, e.IdFactura, e.IdPackList, e.NumDetalle, e.IdProveedor });

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdPackList).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.CantidadCartones)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdOrdenCompra).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdPaisVendedor).IsUnicode(false);

                entity.Property(e => e.IdPrevio).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.MercanciaDanada)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.ParteProveedor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Pl).IsUnicode(false);

                entity.Property(e => e.ProdAutorizado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Serie).IsUnicode(false);

                entity.Property(e => e.Sf).IsUnicode(false);

                entity.Property(e => e.SinNumero)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sku).IsUnicode(false);

                entity.Property(e => e.SubparSn)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Supp).IsUnicode(false);

                entity.HasOne(d => d.IdUnidadUniversalNavigation)
                    .WithMany(p => p.Fdfactura2s)
                    .HasForeignKey(d => d.IdUnidadUniversal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk3_dfactura2");
            });

            modelBuilder.Entity<FdfacturaElect>(entity =>
            {
                entity.HasKey(e => new { e.IdFactura, e.IdPackList, e.NumDetalle, e.CveTipoOpn, e.IdProveedor });

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdPackList).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.CantidadCartones)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcionp).IsUnicode(false);

                entity.Property(e => e.Descripcionpc).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdFraccionAme).IsUnicode(false);

                entity.Property(e => e.IdOrdenCompra).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdPaisVendedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.MercanciaDanada)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.PaisDestino).IsUnicode(false);

                entity.Property(e => e.SubparSn)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdUnidadUniversalNavigation)
                    .WithMany(p => p.FdfacturaElects)
                    .HasForeignKey(d => d.IdUnidadUniversal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk3_dfactura_elect");
            });

            modelBuilder.Entity<FdfacturaSeries>(entity =>
            {
                entity.HasKey(e => new { e.IdEntrada, e.IdFactura, e.IdPackList, e.NumDetalle, e.IdProveedor, e.NumSecuencial })
                    .HasName("pk_fdfactura_series");

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdPackList).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.SubModelo).IsUnicode(false);
            });

            modelBuilder.Entity<FdigArea>(entity =>
            {
                entity.HasKey(e => e.Caracter)
                    .HasName("pk_fdig_area");

                entity.Property(e => e.Caracter)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FdigitalNombre>(entity =>
            {
                entity.HasKey(e => new { e.Documento, e.Extencion });

                entity.Property(e => e.Documento).IsUnicode(false);

                entity.Property(e => e.Extencion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Aduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cliente)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Dia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Hora)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Numero)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Patente)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Prefijo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Referencia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RutaAlmacen).IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Fdigitalizacion>(entity =>
            {
                entity.Property(e => e.Digitalizacion).ValueGeneratedNever();

                entity.Property(e => e.Extencion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RutaDocumento).IsUnicode(false);
            });

            modelBuilder.Entity<FdigitalizacionCarpetum>(entity =>
            {
                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Automatico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Carpeta).IsUnicode(false);

                entity.Property(e => e.CompraVtaParaImpo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Contraprestaciones)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveIdContacto).IsUnicode(false);

                entity.Property(e => e.MetodoAOB)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Restricciones)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RevisionesORegalias)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RutaFactMex).IsUnicode(false);

                entity.Property(e => e.UnicaOSemestral)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.VinculacionAfectaPrecio)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FdigitalizacionDetalle>(entity =>
            {
                entity.HasKey(e => new { e.Digitalizacion, e.Parametro });

                entity.Property(e => e.Parametro).IsUnicode(false);

                entity.Property(e => e.Valor).IsUnicode(false);
            });

            modelBuilder.Entity<FdigitalizacionDocumento>(entity =>
            {
                entity.Property(e => e.Documento).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FdigitalizacionGenerale>(entity =>
            {
                entity.Property(e => e.RutaDigitalizacion).IsUnicode(false);

                entity.Property(e => e.RutaWeb).IsUnicode(false);

                entity.Property(e => e.UrlWeb).IsUnicode(false);
            });

            modelBuilder.Entity<FdigitalizacionParametro>(entity =>
            {
                entity.Property(e => e.Parametro).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FdigitalizacionPedimento>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.ArchivoWeb).IsUnicode(false);
            });

            modelBuilder.Entity<FdigitalizacionTipo>(entity =>
            {
                entity.Property(e => e.TipoDocumento).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Separador)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FdigitalizacionTrafico>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.IdBodega, e.Documento });

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.ArchivoWeb).IsUnicode(false);
            });

            modelBuilder.Entity<FdodaQr>(entity =>
            {
                entity.HasKey(e => e.NumControl)
                    .HasName("pk_fdoda_qr");

                entity.Property(e => e.NumControl).IsUnicode(false);

                entity.Property(e => e.Caat).IsUnicode(false);

                entity.Property(e => e.CadenaOriginal).IsUnicode(false);

                entity.Property(e => e.CadenaOriginalSat).IsUnicode(false);

                entity.Property(e => e.Certificado).IsUnicode(false);

                entity.Property(e => e.DespachoAduanero).IsUnicode(false);

                entity.Property(e => e.Estatus).IsUnicode(false);

                entity.Property(e => e.FastId).IsUnicode(false);

                entity.Property(e => e.FechaRegistroDoda).IsUnicode(false);

                entity.Property(e => e.FechaResultadoDoda).IsUnicode(false);

                entity.Property(e => e.FirmaElecSist).IsUnicode(false);

                entity.Property(e => e.FirmaElectronica).IsUnicode(false);

                entity.Property(e => e.GafeteUnico).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdApoderado).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdTransporte).IsUnicode(false);

                entity.Property(e => e.Mensaje).IsUnicode(false);

                entity.Property(e => e.NumIntegracion).IsUnicode(false);

                entity.Property(e => e.NumTransaccion).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.NumeroSerieSat).IsUnicode(false);

                entity.Property(e => e.Resultado).IsUnicode(false);

                entity.Property(e => e.RfcResultado).IsUnicode(false);

                entity.Property(e => e.Seccion).IsUnicode(false);

                entity.Property(e => e.SelladoSat).IsUnicode(false);

                entity.Property(e => e.TipoFigura)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.TipoMovimiento).IsUnicode(false);

                entity.Property(e => e.TipoOperacion).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.UsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.UsuarioUltModif).IsUnicode(false);
            });

            modelBuilder.Entity<FdodaQrContenedor>(entity =>
            {
                entity.HasKey(e => new { e.NumControl, e.ValorContenedor })
                    .HasName("pk_fdoda_qr_contenedor");

                entity.Property(e => e.NumControl).IsUnicode(false);

                entity.Property(e => e.ValorContenedor).IsUnicode(false);
            });

            modelBuilder.Entity<FdodaQrContenedorDetalle>(entity =>
            {
                entity.HasKey(e => new { e.NumControl, e.ValorContenedor, e.ValorCandado })
                    .HasName("pk_fdoda_qr_contenedor_detalle");

                entity.Property(e => e.NumControl).IsUnicode(false);

                entity.Property(e => e.ValorContenedor).IsUnicode(false);

                entity.Property(e => e.ValorCandado).IsUnicode(false);
            });

            modelBuilder.Entity<FdodaQrDetalle>(entity =>
            {
                entity.HasKey(e => new { e.NumControl, e.Secuencial })
                    .HasName("pk_fdoda_qr_detalle");

                entity.Property(e => e.NumControl).IsUnicode(false);

                entity.Property(e => e.AcuseValidador).IsUnicode(false);

                entity.Property(e => e.Articulo7).IsUnicode(false);

                entity.Property(e => e.Codigo).IsUnicode(false);

                entity.Property(e => e.Cove).IsUnicode(false);

                entity.Property(e => e.Documento).IsUnicode(false);

                entity.Property(e => e.Dtaniu).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.TipoMovimiento).IsUnicode(false);
            });

            modelBuilder.Entity<FdodaQrLog>(entity =>
            {
                entity.Property(e => e.Fecha).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Mensaje).IsUnicode(false);

                entity.Property(e => e.NumControl).IsUnicode(false);

                entity.Property(e => e.NumIntegracion).IsUnicode(false);
            });

            modelBuilder.Entity<FdodaQrLogin>(entity =>
            {
                entity.HasKey(e => e.Usuario)
                    .HasName("PK__fdoda_qr__9AFF8FC797477920");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.Clave).IsUnicode(false);
            });

            modelBuilder.Entity<FdodaQrPedimentoAmericano>(entity =>
            {
                entity.HasKey(e => new { e.NumControl, e.ValorPedimentoAmericano })
                    .HasName("pk_fdoda_qr_pedimento_americano");

                entity.Property(e => e.NumControl).IsUnicode(false);

                entity.Property(e => e.ValorPedimentoAmericano).IsUnicode(false);

                entity.Property(e => e.TipoPedimentoAmericano).IsUnicode(false);
            });

            modelBuilder.Entity<FdodaQrXml>(entity =>
            {
                entity.HasKey(e => new { e.NumControl, e.Ticket, e.Movimiento, e.Request })
                    .HasName("fdoda_Qr_xml_pk");

                entity.Property(e => e.NumControl).IsUnicode(false);

                entity.Property(e => e.Ticket).IsUnicode(false);

                entity.Property(e => e.Movimiento).IsUnicode(false);

                entity.Property(e => e.Request).IsUnicode(false);

                entity.Property(e => e.Xml).IsUnicode(false);
            });

            modelBuilder.Entity<FdordenCompra>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdOrdenCompra, e.Secuencial })
                    .HasName("pk_fdorden_compra");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdOrdenCompra).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);
            });

            modelBuilder.Entity<Fdtrafico>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.NumSecuencial })
                    .HasName("pk_fdtrafico");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.AdvaloremFormaPago1).IsUnicode(false);

                entity.Property(e => e.AdvaloremFormaPago2).IsUnicode(false);

                entity.Property(e => e.Agrupar)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CartonNumber).IsUnicode(false);

                entity.Property(e => e.ClasificacionFisica)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CuotaCompFormaPago1).IsUnicode(false);

                entity.Property(e => e.CuotaCompFormaPago2).IsUnicode(false);

                entity.Property(e => e.CveUnidadComercial).IsUnicode(false);

                entity.Property(e => e.CveUnidadTarifa).IsUnicode(false);

                entity.Property(e => e.DescripcionClasificacion).IsUnicode(false);

                entity.Property(e => e.EntFederativaComprador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EntFederativaDestino)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EntFederativaOrigen)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EntFederativaVendedor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdPackList).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdPaisVendedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdReferenciaConso).IsUnicode(false);

                entity.Property(e => e.IdShipper).IsUnicode(false);

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.IdTipoFactura).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.IdVinculacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IepsFormaPago).IsUnicode(false);

                entity.Property(e => e.IsanFormaPago).IsUnicode(false);

                entity.Property(e => e.IvaFormaPago1).IsUnicode(false);

                entity.Property(e => e.IvaFormaPago2).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Nico).IsUnicode(false);

                entity.Property(e => e.PalletNumber).IsUnicode(false);

                entity.Property(e => e.PrecioEstimado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ProveedorTrafico).IsUnicode(false);

                entity.Property(e => e.Regla8)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Sensible)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SubparSn)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCuota)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoIeps)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMonedaIeps)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsoEdoMercancia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Valoracion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdProveedorNavigation)
                    .WithMany(p => p.Fdtraficos)
                    .HasForeignKey(d => d.IdProveedor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fdtrafico");

                entity.HasOne(d => d.IdTipoAdvaloremNavigation)
                    .WithMany(p => p.Fdtraficos)
                    .HasForeignKey(d => d.IdTipoAdvalorem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk3_fdtrafico");
            });

            modelBuilder.Entity<FeEmisor>(entity =>
            {
                entity.HasKey(e => e.Numempresa)
                    .HasName("PK__fe_emiso__84C887CD2F3B1ACE");

                entity.Property(e => e.Numempresa).ValueGeneratedNever();

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.Estado).IsUnicode(false);

                entity.Property(e => e.Localidad).IsUnicode(false);

                entity.Property(e => e.Municipio).IsUnicode(false);

                entity.Property(e => e.NoExterior).IsUnicode(false);

                entity.Property(e => e.NoInterior).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);
            });

            modelBuilder.Entity<FeEmisorRegimenfiscal>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.IdRegimen });

                entity.Property(e => e.CRegimenFiscal).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<Fembarque>(entity =>
            {
                entity.HasKey(e => e.IdEmbarque)
                    .HasName("pk_fembarque");

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.Crossdock)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveEntradaAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveSegundoReconocimiento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTipoEmbarque)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Exceso).IsUnicode(false);

                entity.Property(e => e.Hazmat).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdApoderado).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdIssue).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdTipoPedimento).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Imagen).IsUnicode(false);

                entity.Property(e => e.ImagenSalida).IsUnicode(false);

                entity.Property(e => e.Inbond).IsUnicode(false);

                entity.Property(e => e.Inspeccion).IsUnicode(false);

                entity.Property(e => e.IssueComments).IsUnicode(false);

                entity.Property(e => e.NoEei).IsUnicode(false);

                entity.Property(e => e.Overtime).IsUnicode(false);

                entity.Property(e => e.PedimentoListoNotificado).IsUnicode(false);

                entity.Property(e => e.Portal)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProtegerEmbarque)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.RecolectarCargaNotificado).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.SeccionAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sello1).IsUnicode(false);

                entity.Property(e => e.Sello2).IsUnicode(false);

                entity.Property(e => e.TieneIssue).IsUnicode(false);

                entity.Property(e => e.Urgente).IsUnicode(false);
            });

            modelBuilder.Entity<Fembarque1>(entity =>
            {
                entity.HasKey(e => e.IdEmbarque)
                    .HasName("pk_fembarques");

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.NumVehiculo).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Talon).IsUnicode(false);

                entity.HasOne(d => d.IdLineaFleteraNavigation)
                    .WithMany(p => p.Fembarque1s)
                    .HasForeignKey(d => d.IdLineaFletera)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fembarques");

                entity.HasOne(d => d.IdTipoVehiculoNavigation)
                    .WithMany(p => p.Fembarque1s)
                    .HasForeignKey(d => d.IdTipoVehiculo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_1_fembarques");
            });

            modelBuilder.Entity<FembarqueEei>(entity =>
            {
                entity.Property(e => e.Eei).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);
            });

            modelBuilder.Entity<FembarqueEliminado>(entity =>
            {
                entity.HasKey(e => new { e.IdEmbarque, e.FechaEliminado })
                    .HasName("PK_fembarque_eliminado_1");

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<FembarqueInbond>(entity =>
            {
                entity.HasKey(e => new { e.IdEmbarque, e.Inbond })
                    .HasName("pk_embarque_inbond");

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.Inbond).IsUnicode(false);
            });

            modelBuilder.Entity<FembarqueIssue>(entity =>
            {
                entity.HasKey(e => e.IdIssue)
                    .HasName("PK_FEMBARQUE_ISSUES");

                entity.Property(e => e.IdIssue).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FembarqueLight>(entity =>
            {
                entity.HasKey(e => e.IdEmbarque)
                    .HasName("pk_fembarque_light");

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.CruzaExpd)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveEntradaAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveSegundoReconocimiento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EstadoPlacas).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdApoderado).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdTipoPedimento).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.NumeroPrefile).IsUnicode(false);

                entity.Property(e => e.SeccionAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Fencabezado>(entity =>
            {
                entity.HasKey(e => new { e.Factura, e.Fecha, e.Proveedor, e.Cliente, e.ValorDlls, e.ValorComercial, e.ValorAduana });

                entity.Property(e => e.Factura).IsUnicode(false);

                entity.Property(e => e.Proveedor).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.Caja).IsUnicode(false);

                entity.Property(e => e.ClavePed).IsUnicode(false);

                entity.Property(e => e.FirmaElec).IsUnicode(false);

                entity.Property(e => e.Incoterm).IsUnicode(false);

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.Placas).IsUnicode(false);

                entity.Property(e => e.TaxId).IsUnicode(false);

                entity.Property(e => e.TransA)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TransE)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TransS)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FentradaBodega>(entity =>
            {
                entity.HasKey(e => e.IdEntrada)
                    .HasName("pk_fentrada_bodega");

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.Booking).IsUnicode(false);

                entity.Property(e => e.Buque).IsUnicode(false);

                entity.Property(e => e.CertificadoOrig).IsUnicode(false);

                entity.Property(e => e.CiudadProcedencia).IsUnicode(false);

                entity.Property(e => e.ConocimientoMaritimo).IsUnicode(false);

                entity.Property(e => e.Contenedor).IsUnicode(false);

                entity.Property(e => e.CumpleNorma)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.CveTipoTransporte).IsUnicode(false);

                entity.Property(e => e.Directa).IsUnicode(false);

                entity.Property(e => e.DiscrepanciasDp).IsUnicode(false);

                entity.Property(e => e.EmbMadera)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.EntryNumber).IsUnicode(false);

                entity.Property(e => e.EstadoProcedencia).IsUnicode(false);

                entity.Property(e => e.FolioEntrada).IsUnicode(false);

                entity.Property(e => e.GuiaFlete).IsUnicode(false);

                entity.Property(e => e.HazMat)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdAgAdAme).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdConsignatario).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdMonedaFlete).IsUnicode(false);

                entity.Property(e => e.IdOrden).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdRegimenEntrada).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRecibe).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.InBond)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InbondNumero).IsUnicode(false);

                entity.Property(e => e.MarcaMcia).IsUnicode(false);

                entity.Property(e => e.Naviera).IsUnicode(false);

                entity.Property(e => e.NoAviso)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')")
                    .IsFixedLength(true);

                entity.Property(e => e.Notificado)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.NumVehiculo).IsUnicode(false);

                entity.Property(e => e.ObsEntrada1).IsFixedLength(true);

                entity.Property(e => e.ObsEntrada2).IsFixedLength(true);

                entity.Property(e => e.PaisProcedencia).IsUnicode(false);

                entity.Property(e => e.Pedimento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PlacaOrigen).IsUnicode(false);

                entity.Property(e => e.PlacasSalida).IsUnicode(false);

                entity.Property(e => e.PolizaFlete).IsUnicode(false);

                entity.Property(e => e.PreFile).IsUnicode(false);

                entity.Property(e => e.PuertoDestino).IsUnicode(false);

                entity.Property(e => e.RefUps).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SeccionEntrada).IsUnicode(false);

                entity.Property(e => e.SelloSalida).IsUnicode(false);

                entity.Property(e => e.SelloSalida2).IsUnicode(false);

                entity.Property(e => e.ServicioLinea).IsUnicode(false);

                entity.Property(e => e.Situacion).IsUnicode(false);

                entity.Property(e => e.StatusClas).IsUnicode(false);

                entity.Property(e => e.TipoDocto).IsUnicode(false);

                entity.Property(e => e.TipoInbond).IsUnicode(false);

                entity.Property(e => e.Urgente)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.VehiculoSalida).IsUnicode(false);
            });

            modelBuilder.Entity<FentradaBodegaRespaldo>(entity =>
            {
                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.CveTipoTransporte)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Directa).IsUnicode(false);

                entity.Property(e => e.FolioEntrada).IsUnicode(false);

                entity.Property(e => e.GuiaFlete).IsUnicode(false);

                entity.Property(e => e.IdAgAdAme).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdConsignatario).IsUnicode(false);

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdMonedaFlete).IsUnicode(false);

                entity.Property(e => e.IdOrden).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRecibe).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.InBond).IsUnicode(false);

                entity.Property(e => e.InbondNumero).IsUnicode(false);

                entity.Property(e => e.MarcaMcia).IsUnicode(false);

                entity.Property(e => e.NumVehiculo).IsUnicode(false);

                entity.Property(e => e.ObsEntrada1).IsFixedLength(true);

                entity.Property(e => e.ObsEntrada2).IsFixedLength(true);

                entity.Property(e => e.PolizaFlete).IsUnicode(false);

                entity.Property(e => e.PreFile).IsUnicode(false);

                entity.Property(e => e.RefUps).IsUnicode(false);

                entity.Property(e => e.SeccionEntrada).IsUnicode(false);

                entity.Property(e => e.ServicioLinea).IsUnicode(false);

                entity.Property(e => e.Situacion).IsUnicode(false);

                entity.Property(e => e.Urgente)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FentradaCarton>(entity =>
            {
                entity.HasKey(e => new { e.IdEntrada, e.NumCarton })
                    .HasName("pk_entrada_carton");

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.NumCarton).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FentradaContenedore>(entity =>
            {
                entity.HasKey(e => new { e.IdEntrada, e.Contenedores })
                    .HasName("PK__fentrada__3486DDDC61261890");

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.Contenedores).IsUnicode(false);
            });

            modelBuilder.Entity<FentradaDefault>(entity =>
            {
                entity.Property(e => e.CveTipoTransporte).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.Directa).IsUnicode(false);

                entity.Property(e => e.GuiaFlete).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.MarcaMcia).IsUnicode(false);

                entity.Property(e => e.SeccionEntrada).IsUnicode(false);
            });

            modelBuilder.Entity<FentradaGuium>(entity =>
            {
                entity.HasKey(e => new { e.IdEntrada, e.Secuencial })
                    .HasName("pk_entrada_guia");

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.CveTipoGuia).IsUnicode(false);

                entity.Property(e => e.Guia).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FentradaMaster>(entity =>
            {
                entity.HasKey(e => new { e.IdEntradaMaster, e.IdEntrada })
                    .HasName("pk_fentrada_master");

                entity.Property(e => e.IdEntradaMaster).IsUnicode(false);

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.Situacion).IsUnicode(false);
            });

            modelBuilder.Entity<FentradaQuimico>(entity =>
            {
                entity.HasKey(e => new { e.IdEntrada, e.Identificador, e.Guia, e.ClasePeligro, e.Descripcion })
                    .HasName("pk_fentrada_quimico");

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.Identificador).IsUnicode(false);

                entity.Property(e => e.Guia).IsUnicode(false);

                entity.Property(e => e.ClasePeligro).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Empaquetado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FequivalenciaCoveHelp>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadUniversal, e.IdUnidadMexicana })
                    .HasName("pk_fequivalencia_cove_help");

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.IdUnidadMexicana).IsUnicode(false);
            });

            modelBuilder.Entity<FequivalenciaUnidade>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidadUniversal, e.IdUnidadMexicana })
                    .HasName("pk_fequivalencia_unidades");

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.IdUnidadMexicana).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IdUnidadMexicanaNavigation)
                    .WithMany(p => p.FequivalenciaUnidadeIdUnidadMexicanaNavigations)
                    .HasForeignKey(d => d.IdUnidadMexicana)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fequivalencia_unidades");

                entity.HasOne(d => d.IdUnidadUniversalNavigation)
                    .WithMany(p => p.FequivalenciaUnidadeIdUnidadUniversalNavigations)
                    .HasForeignKey(d => d.IdUnidadUniversal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fequivalencia_unidades");
            });

            modelBuilder.Entity<Ferror>(entity =>
            {
                entity.HasKey(e => e.CveError)
                    .HasName("PK_ferror_1__19");

                entity.Property(e => e.DesError).IsUnicode(false);

                entity.Property(e => e.DesTitulo).IsUnicode(false);
            });

            modelBuilder.Entity<FerrorAvisoTraslado>(entity =>
            {
                entity.HasKey(e => new { e.IdError, e.TipoError });

                entity.Property(e => e.IdError).IsUnicode(false);

                entity.Property(e => e.TipoError)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FerrorBanco>(entity =>
            {
                entity.HasKey(e => e.IdErrorBanco)
                    .HasName("pk_error_banco");

                entity.Property(e => e.IdErrorBanco)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descricpcion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FerrorBancoCentralizado>(entity =>
            {
                entity.Property(e => e.IdErrorBanco).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FerrorEncargo>(entity =>
            {
                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FerrorNopedimento>(entity =>
            {
                entity.HasKey(e => e.IdError)
                    .HasName("PKferror_nopedimento");

                entity.Property(e => e.IdError)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descricpcion).IsUnicode(false);
            });

            modelBuilder.Entity<FerrorSagar>(entity =>
            {
                entity.HasKey(e => e.IdErrorSagar)
                    .HasName("pk_error_sagar");

                entity.Property(e => e.IdErrorSagar).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FerrorSagar2>(entity =>
            {
                entity.HasKey(e => new { e.IdTipo, e.Codigo });

                entity.Property(e => e.IdTipo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Codigo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FerrorShcp>(entity =>
            {
                entity.HasKey(e => e.IdErrorShcp)
                    .HasName("pk_error_shcp");

                entity.Property(e => e.IdErrorShcp).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FerrorShcpM3>(entity =>
            {
                entity.HasKey(e => new { e.Registro, e.TipoError, e.Error, e.Campo })
                    .HasName("pk_ferror_shcp_m3");

                entity.Property(e => e.Registro)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoError)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Error)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Campo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Justificable)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Justificable2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Fescape>(entity =>
            {
                entity.HasKey(e => e.IdEscape)
                    .HasName("pk_fescape");

                entity.Property(e => e.IdEscape).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.Consignatario).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DomicilioRemConsignatario).IsUnicode(false);

                entity.Property(e => e.Estacion).IsUnicode(false);

                entity.Property(e => e.FinRemConsig).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.RemitenteDeConsignatario).IsUnicode(false);

                entity.Property(e => e.RfcConsignatario)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Telefono).IsUnicode(false);

                entity.Property(e => e.TelefonoRegConsig).IsUnicode(false);

                entity.HasOne(d => d.IdClienteNavigation)
                    .WithMany(p => p.Fescapes)
                    .HasForeignKey(d => d.IdCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fescape");

                entity.HasOne(d => d.IdMunicipioNavigation)
                    .WithMany(p => p.Fescapes)
                    .HasForeignKey(d => d.IdMunicipio)
                    .HasConstraintName("fk1_fescape");
            });

            modelBuilder.Entity<Festado>(entity =>
            {
                entity.HasKey(e => e.IdEstado)
                    .HasName("i_id_estado");

                entity.Property(e => e.IdEstado).IsUnicode(false);

                entity.Property(e => e.DescBreve).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionShipper).IsUnicode(false);

                entity.Property(e => e.Entidad).IsUnicode(false);

                entity.Property(e => e.IdPais).IsUnicode(false);

                entity.Property(e => e.Inactivo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IdPaisNavigation)
                    .WithMany(p => p.Festados)
                    .HasForeignKey(d => d.IdPais)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_1_fpais");
            });

            modelBuilder.Entity<Fevento>(entity =>
            {
                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);
            });

            modelBuilder.Entity<FeventoManual>(entity =>
            {
                entity.Property(e => e.IdEvento).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FeventosAduana>(entity =>
            {
                entity.HasKey(e => new { e.IdPatente, e.Pedimento, e.IdAduana, e.Seccion, e.CveTipoOperacion, e.Estado, e.SubEstado, e.ConsecutivoRemesaPed });

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.Pedimento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Estado).IsUnicode(false);

                entity.Property(e => e.SubEstado).IsUnicode(false);

                entity.Property(e => e.IdAduanaF4).IsUnicode(false);

                entity.Property(e => e.IdOri).IsUnicode(false);

                entity.Property(e => e.IdPatenteF4).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Notificado)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.PedimentoF4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RfcCliente).IsUnicode(false);

                entity.Property(e => e.SeccionF4)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FeventosAduana2>(entity =>
            {
                entity.HasKey(e => new { e.IdPatente, e.Pedimento, e.IdAduana, e.Seccion, e.CveTipoOperacion, e.Estado, e.SubEstado, e.ConsecutivoRemesaPed });

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.Pedimento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Estado).IsUnicode(false);

                entity.Property(e => e.SubEstado).IsUnicode(false);

                entity.Property(e => e.IdAduanaF4).IsUnicode(false);

                entity.Property(e => e.IdOri).IsUnicode(false);

                entity.Property(e => e.IdPatenteF4).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Notificado)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.PedimentoF4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RfcCliente).IsUnicode(false);

                entity.Property(e => e.SeccionF4)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FeventosAduanaEstado>(entity =>
            {
                entity.Property(e => e.IdEdo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FeventosAduanaSubedo>(entity =>
            {
                entity.HasKey(e => new { e.IdEdo, e.IdSubedo });

                entity.Property(e => e.IdEdo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdSubedo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.EventosAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Notificacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionInterna)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfactorMonedum>(entity =>
            {
                entity.HasKey(e => e.IdMoneda)
                    .HasName("pk_id_moneda");

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.MonedaCove).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FfacturaClasLight>(entity =>
            {
                entity.HasKey(e => new { e.IdFactura, e.IdPackList, e.IdProveedor, e.IdCliente, e.NumeroSecuencialFactura });

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdPackList).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.AdvaloremFormaPago1).IsUnicode(false);

                entity.Property(e => e.AdvaloremFormaPago2).IsUnicode(false);

                entity.Property(e => e.Agrupar)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClasificacionFisica)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CuotaCompFormaPago1).IsUnicode(false);

                entity.Property(e => e.CuotaCompFormaPago2).IsUnicode(false);

                entity.Property(e => e.CveUnidadComercial).IsUnicode(false);

                entity.Property(e => e.CveUnidadTarifa).IsUnicode(false);

                entity.Property(e => e.DescripcionClasificacion).IsUnicode(false);

                entity.Property(e => e.EntFederativaComprador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EntFederativaDestino)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EntFederativaOrigen)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EntFederativaVendedor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdPaisVendedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.IdTipoFactura).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.IdVinculacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IepsFormaPago).IsUnicode(false);

                entity.Property(e => e.IsanFormaPago).IsUnicode(false);

                entity.Property(e => e.IvaFormaPago1).IsUnicode(false);

                entity.Property(e => e.IvaFormaPago2).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.PrecioEstimado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sensible)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SubparSn)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCuota)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsoEdoMercancia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Valoracion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfacturaDet>(entity =>
            {
                entity.HasKey(e => new { e.IdFactura, e.IdPackList, e.NumDetalle, e.IdCliente, e.IdProveedor });

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdPackList)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.CantidadCartones)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CartonNumber).IsUnicode(false);

                entity.Property(e => e.CaseNumber).IsUnicode(false);

                entity.Property(e => e.DealerOrderNumber).IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescripcionEei).IsUnicode(false);

                entity.Property(e => e.DistOrderNumber).IsUnicode(false);

                entity.Property(e => e.Eccn).IsUnicode(false);

                entity.Property(e => e.FraccionEei).IsUnicode(false);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdOrdenCompra).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdPaisVendedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdUnidadComercial).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.License).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.MercanciaDanada)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NaftaInd)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.PalletNumber).IsUnicode(false);

                entity.Property(e => e.ParteProveedor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Pl).IsUnicode(false);

                entity.Property(e => e.ProductoAux).IsUnicode(false);

                entity.Property(e => e.Serie).IsUnicode(false);

                entity.Property(e => e.Sf).IsUnicode(false);

                entity.Property(e => e.SinNumero)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Skid).IsUnicode(false);

                entity.Property(e => e.SubparSn)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Supp).IsUnicode(false);

                entity.Property(e => e.UnidadEei).IsUnicode(false);
            });

            modelBuilder.Entity<FfacturaDetLight>(entity =>
            {
                entity.HasKey(e => new { e.IdFactura, e.IdPackList, e.NumDetalle, e.IdCliente, e.IdProveedor })
                    .HasName("PK_ffactura_det_light2");

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdPackList)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.CantidadCartones)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionClasificacion).IsUnicode(false);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdOrdenCompra).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdPaisVendedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdUnidadComercial).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.MercanciaDanada)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.ParteProveedor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Pl).IsUnicode(false);

                entity.Property(e => e.Po).IsUnicode(false);

                entity.Property(e => e.ProvCertPo).IsUnicode(false);

                entity.Property(e => e.Sf).IsUnicode(false);

                entity.Property(e => e.SinNumero)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Skid).IsUnicode(false);

                entity.Property(e => e.SubparSn)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Supp).IsUnicode(false);
            });

            modelBuilder.Entity<FfacturaDetalleCaso>(entity =>
            {
                entity.HasKey(e => new { e.IdFactura, e.IdCliente, e.IdProveedor, e.NumeroSecuencial, e.NumeroIdentificador, e.TipoCaso });

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdCliente)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdProveedor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);

                entity.Property(e => e.IdenCaso).IsUnicode(false);
            });

            modelBuilder.Entity<FfacturaGen>(entity =>
            {
                entity.HasKey(e => new { e.IdFactura, e.IdPackList, e.IdCliente, e.IdProveedor });

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdPackList)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((9))");

                entity.Property(e => e.DealerNumber).IsUnicode(false);

                entity.Property(e => e.Destinatario).IsUnicode(false);

                entity.Property(e => e.DestinoIcoterm).IsUnicode(false);

                entity.Property(e => e.Distfd).IsUnicode(false);

                entity.Property(e => e.Edocument).IsUnicode(false);

                entity.Property(e => e.EstadoFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Familia).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdConsecutivo).ValueGeneratedOnAdd();

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdEntrada)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdMonedaDescuento).IsUnicode(false);

                entity.Property(e => e.IdMonedaFlete).IsUnicode(false);

                entity.Property(e => e.IdMonedaOtros).IsUnicode(false);

                entity.Property(e => e.IdMonedaSeguro).IsUnicode(false);

                entity.Property(e => e.IdPaisMoneda).IsUnicode(false);

                entity.Property(e => e.IdRefCove).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdTipoFactura).IsUnicode(false);

                entity.Property(e => e.IdTipoPedimento).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdUnidad).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.MonedaIva).IsUnicode(false);

                entity.Property(e => e.MonedaValorFact).IsUnicode(false);

                entity.Property(e => e.NoPallet).IsUnicode(false);

                entity.Property(e => e.NombreEdi).IsUnicode(false);

                entity.Property(e => e.Planta).IsUnicode(false);

                entity.Property(e => e.SalesOrder).IsUnicode(false);

                entity.Property(e => e.Situacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.SubDoc)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Vinculacion).IsUnicode(false);
            });

            modelBuilder.Entity<FfacturaGenLight>(entity =>
            {
                entity.HasKey(e => new { e.IdFactura, e.IdPackList, e.IdCliente, e.IdProveedor });

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdPackList)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((9))");

                entity.Property(e => e.Destinatario).IsUnicode(false);

                entity.Property(e => e.DestinoIcoterm).IsUnicode(false);

                entity.Property(e => e.Edocument).IsUnicode(false);

                entity.Property(e => e.EstadoFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacturaAux).IsUnicode(false);

                entity.Property(e => e.Familia).IsUnicode(false);

                entity.Property(e => e.Guia).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.IdMonedaDescuento).IsUnicode(false);

                entity.Property(e => e.IdMonedaEmbalaje).IsUnicode(false);

                entity.Property(e => e.IdMonedaFlete).IsUnicode(false);

                entity.Property(e => e.IdMonedaOtros).IsUnicode(false);

                entity.Property(e => e.IdMonedaSeguro).IsUnicode(false);

                entity.Property(e => e.IdPaisMoneda).IsUnicode(false);

                entity.Property(e => e.IdRefCove).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdTipoFactura).IsUnicode(false);

                entity.Property(e => e.IdTipoPedimento).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.MonedaIva).IsUnicode(false);

                entity.Property(e => e.MonedaValorFact).IsUnicode(false);

                entity.Property(e => e.NoPallet).IsUnicode(false);

                entity.Property(e => e.PesoKgs).HasDefaultValueSql("((0))");

                entity.Property(e => e.Planta).IsUnicode(false);

                entity.Property(e => e.SalesOrder).IsUnicode(false);

                entity.Property(e => e.Situacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.Vinculacion).IsUnicode(false);
            });

            modelBuilder.Entity<FfacturasConsolidada>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdTipoVehiculo, e.NumVehiculo, e.IdFactura, e.FechaFactura, e.Consecutivo })
                    .HasName("pk_ffacturas_consolidadas");

                entity.Property(e => e.IdReferencia)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdTipoVehiculo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumVehiculo).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.CveTipoGuia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacturaAux).IsUnicode(false);

                entity.Property(e => e.Guia).IsUnicode(false);

                entity.Property(e => e.GuiaHouse).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdTipoFactura).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Identificador).IsUnicode(false);

                entity.Property(e => e.MonedaFacturacion).IsUnicode(false);

                entity.Property(e => e.NoPallet).IsUnicode(false);

                entity.Property(e => e.Planta).IsUnicode(false);

                entity.Property(e => e.UsuarioAutoriza).IsUnicode(false);

                entity.Property(e => e.Vinculacion).IsUnicode(false);
            });

            modelBuilder.Entity<FfacturasDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdFactura, e.Consecutivo, e.NumeroSecuencial });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.CveUnidadComercial).IsUnicode(false);

                entity.Property(e => e.CveUnidadTarifa).IsUnicode(false);

                entity.Property(e => e.DescripcionFraccion).IsUnicode(false);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.IdVinculacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Observacion).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.PaisOrigen).IsUnicode(false);

                entity.Property(e => e.PaisVendedor).IsUnicode(false);

                entity.Property(e => e.Serie).IsUnicode(false);

                entity.Property(e => e.Valoracion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfccCarrosFpedimentoDetalleView>(entity =>
            {
                entity.ToView("FFCC_CARROS_FPEDIMENTO_DETALLE_VIEW");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);
            });

            modelBuilder.Entity<FferrConocimiento>(entity =>
            {
                entity.HasKey(e => new { e.IdTraficoMaster, e.IdTipoVehiculo })
                    .HasName("pk_fferr_conocimiento");

                entity.Property(e => e.IdTraficoMaster).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.CveCondicionesPago)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTipoServicio)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FferrConocimientoCarro>(entity =>
            {
                entity.HasKey(e => new { e.IdTraficoMaster, e.IdTipoVehiculo, e.IdTrafico, e.Carro })
                    .HasName("pk_fferr_conocimiento_carro");

                entity.Property(e => e.IdTraficoMaster).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.Carro).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Fferrocarril>(entity =>
            {
                entity.HasKey(e => e.IdTrafico)
                    .HasName("pk_fferrocarril");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.CveOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTipoFlete)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Destino).IsUnicode(false);

                entity.Property(e => e.EnvioCorreo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdMonedaFactura).IsUnicode(false);

                entity.Property(e => e.IdMonedaFlete).IsUnicode(false);

                entity.Property(e => e.IdMonedaOtrosBod).IsUnicode(false);

                entity.Property(e => e.IdMonedaOtrosGme).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdPaisVendedor).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdTipoPedimento).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.LoadInb).IsUnicode(false);

                entity.Property(e => e.NotificacionNumero).IsUnicode(false);

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.Pedimento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FferrocarrilCarro>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.CarroNumero })
                    .HasName("pk_fferrocarril_carro");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.CarroNumero).IsUnicode(false);

                entity.Property(e => e.CveEntradaAduana).IsUnicode(false);

                entity.Property(e => e.FechaRegistro).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Guia).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Shipper).IsUnicode(false);
            });

            modelBuilder.Entity<FferrocarrilFactura>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.IdFactura })
                    .HasName("pk_fferr_factura");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdTipoFactura).IsUnicode(false);

                entity.Property(e => e.Pedido).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FferrocarrilIdentificador>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.IdFactura, e.IdProducto, e.Secuencial, e.SecFact });

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.Compl1).IsUnicode(false);

                entity.Property(e => e.Compl2).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FferrocarrilPartidum>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.IdFactura, e.NumeroSec })
                    .HasName("pk_fferr_partida");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.AdvalFpago).IsUnicode(false);

                entity.Property(e => e.CveUnidadComercial).IsUnicode(false);

                entity.Property(e => e.CveUnidadTarifa).IsUnicode(false);

                entity.Property(e => e.DescripcionClasificacion).IsUnicode(false);

                entity.Property(e => e.DescripcionFactura).IsUnicode(false);

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.IvaFpago).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FferrocarrilPermiso>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.IdFactura, e.IdProducto, e.NumeroSec, e.Secuencial })
                    .HasName("pk_fferrocarril_permiso");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.NumeroPermiso).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FfgAcceso>(entity =>
            {
                entity.Property(e => e.IdClase).IsUnicode(false);

                entity.Property(e => e.IdObjeto).IsUnicode(false);

                entity.Property(e => e.IdProceso).IsUnicode(false);
            });

            modelBuilder.Entity<FfgAduanaSeccion>(entity =>
            {
                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgClaveProdServCfdi>(entity =>
            {
                entity.Property(e => e.IdClaveProdServCfdi).ValueGeneratedNever();

                entity.Property(e => e.CClaveProdServ).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.IepsTraslasdo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IvaTrasladado)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgClaveUnidadCfdi>(entity =>
            {
                entity.Property(e => e.IdClaveUnidadCfdi).ValueGeneratedNever();

                entity.Property(e => e.CClaveUnidad).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);
            });

            modelBuilder.Entity<FfgClienteMetodoFormaPago>(entity =>
            {
                entity.HasKey(e => new { e.NumDetalle, e.IdCliente });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.ClaveSatMetodoPago).IsUnicode(false);

                entity.Property(e => e.Defaultt)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumCuentaPago).IsUnicode(false);

                entity.Property(e => e.TipoMoneda)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgClientePerfilPago>(entity =>
            {
                entity.HasKey(e => new { e.NumPerfil, e.IdCliente });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CFormaPago).IsUnicode(false);

                entity.Property(e => e.CMetodoPago).IsUnicode(false);

                entity.Property(e => e.CondicionesDePago).IsUnicode(false);

                entity.Property(e => e.CtaOrdenante).IsUnicode(false);

                entity.Property(e => e.NomBancoOrdExt).IsUnicode(false);

                entity.Property(e => e.RfcEmisorCtaOrd).IsUnicode(false);

                entity.Property(e => e.TipoCadPago).IsUnicode(false);
            });

            modelBuilder.Entity<FfgCodigopostalCfdi>(entity =>
            {
                entity.Property(e => e.IdCodigopostalCfdi).ValueGeneratedNever();

                entity.Property(e => e.CCodigoPostal).IsUnicode(false);

                entity.Property(e => e.CEstado).IsUnicode(false);

                entity.Property(e => e.CLocalidad).IsUnicode(false);

                entity.Property(e => e.CMunicipio).IsUnicode(false);
            });

            modelBuilder.Entity<FfgConsecuFactura>(entity =>
            {
                entity.HasKey(e => e.ConsecutivoFactura)
                    .HasName("pk_ffg_consecu_factura")
                    .IsClustered(false);
            });

            modelBuilder.Entity<FfgConsecutivoFactura>(entity =>
            {
                entity.HasKey(e => e.Numempresa)
                    .HasName("pk_ffg_consecutivo_factura");

                entity.HasIndex(e => e.ConsecutivoFactura, "i_consecutivo_factura")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Numempresa).ValueGeneratedNever();
            });

            modelBuilder.Entity<FfgConsecutivoFolio>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.Serie, e.FolioInicial })
                    .HasName("pk_ffg_consecutivo_folio");

                entity.Property(e => e.Serie)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Activo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.AnioAprobacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<FfgConsecutivoPrecuentum>(entity =>
            {
                entity.HasKey(e => e.Numempresa)
                    .HasName("pk_ffg_consecutivo_precuenta");

                entity.HasIndex(e => e.ConsecutivoPrecuenta, "i_consecutivo_precuenta")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Numempresa).ValueGeneratedNever();
            });

            modelBuilder.Entity<FfgConsecutivoRelacion>(entity =>
            {
                entity.HasKey(e => e.Numempresa)
                    .HasName("pk_ffg_consecutivo_relacion");

                entity.Property(e => e.Numempresa).ValueGeneratedNever();
            });

            modelBuilder.Entity<FfgControlPagoPeca>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumDetalle, e.Numempresa })
                    .HasName("pk_ffg_control_pago_peca");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdRectificacion).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdConcepto).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdPrecuenta).IsUnicode(false);

                entity.Property(e => e.IdUnidadFacturacion).IsUnicode(false);
            });

            modelBuilder.Entity<FfgDfacturaAme>(entity =>
            {
                entity.Property(e => e.AgrupaConcepto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.IdConcepto).IsUnicode(false);

                entity.Property(e => e.IdFacturaAme).IsUnicode(false);

                entity.Property(e => e.IdUnidadFacturacion).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<FfgDfacturaMex>(entity =>
            {
                entity.HasKey(e => new { e.IdFactura, e.NumDetalle, e.Numempresa })
                    .HasName("pk_ffg_dfactura_mex");

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.AgrupaConcepto)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.CClaveProdServ).IsUnicode(false);

                entity.Property(e => e.CClaveUnidad).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdConcepto).IsUnicode(false);

                entity.Property(e => e.IdUnidadFacturacion).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.UnidadDescripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FfgDprecuentaMex>(entity =>
            {
                entity.HasKey(e => new { e.IdPrecuenta, e.NumDetalle, e.Numempresa })
                    .HasName("pk_ffg_dprecuenta_mex");

                entity.Property(e => e.IdPrecuenta).IsUnicode(false);

                entity.Property(e => e.AfectaHon)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.CClaveProdServ).IsUnicode(false);

                entity.Property(e => e.CClaveUnidad).IsUnicode(false);

                entity.Property(e => e.ConsecutivoVehiculo).HasDefaultValueSql("((0))");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdConcepto).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdUnidadFacturacion).IsUnicode(false);

                entity.Property(e => e.NumFacturaTercero).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Sello).IsUnicode(false);

                entity.Property(e => e.Semaforo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UnidadDescripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FfgDrelPagoComision>(entity =>
            {
                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdRelPagoComision).IsUnicode(false);

                entity.Property(e => e.Numempresa)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMoneda)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgDrelacionEnvio>(entity =>
            {
                entity.HasKey(e => new { e.IdRelacion, e.IdNumDetalle, e.IdFactura, e.Numempresa })
                    .HasName("pk_ffg_drelacion_envio");

                entity.Property(e => e.IdRelacion).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);
            });

            modelBuilder.Entity<FfgDrelacionEnvioAme>(entity =>
            {
                entity.Property(e => e.IdFacturaAme).IsUnicode(false);

                entity.Property(e => e.IdRelacion).IsUnicode(false);
            });

            modelBuilder.Entity<FfgDtabulador>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdTabulador, e.MexAme, e.NumDetalle })
                    .HasName("pkffg_dtabulador")
                    .IsClustered(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdTabulador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MexAme)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.AduanaCheck)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AduanaRazonSocial).IsUnicode(false);

                entity.Property(e => e.AutoGtsCompl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Calculo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdConcepto).IsUnicode(false);

                entity.Property(e => e.IdTipoCalculo).IsUnicode(false);

                entity.Property(e => e.IdUnidadFacturacion).IsUnicode(false);

                entity.Property(e => e.PesoValor).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMoneda)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgEsquemaFacturaElectronica>(entity =>
            {
                entity.HasKey(e => new { e.Version, e.Numempresa });

                entity.Property(e => e.Version).IsUnicode(false);

                entity.Property(e => e.Activo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Esquema).IsUnicode(false);
            });

            modelBuilder.Entity<FfgEstadoPac>(entity =>
            {
                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdEstado).IsUnicode(false);
            });

            modelBuilder.Entity<FfgFormaPago>(entity =>
            {
                entity.Property(e => e.IdFormaPago).ValueGeneratedNever();

                entity.Property(e => e.DescripcionFormapago).IsUnicode(false);
            });

            modelBuilder.Entity<FfgFormaPagoCfdi>(entity =>
            {
                entity.Property(e => e.Bancarizado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CFormaPago).IsUnicode(false);

                entity.Property(e => e.CuentaBeneficiario)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CuentaOrdenenate)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.NomBancoEmisorExt)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumeroOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RfcemisorCtaBenef)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RfcemisorCtaOrdena)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCadenaPago)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgGeneralFacAme>(entity =>
            {
                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.AnticipoAutomatico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoFolio)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoRelacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdForwarding).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.ImpExp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LeyendaFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LeyendaRelEnvio)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PagoAutomatico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrefijoFactura).IsUnicode(false);

                entity.Property(e => e.PrefijoFolio).IsUnicode(false);

                entity.Property(e => e.PrefijoRelacion).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgGeneralFactura>(entity =>
            {
                entity.HasKey(e => e.Numempresa)
                    .HasName("pk_ffg_general_factura");

                entity.Property(e => e.Numempresa).ValueGeneratedNever();

                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.AnticipoAutomatico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AnticipoSeleccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoAme).IsUnicode(false);

                entity.Property(e => e.AutoCargo).IsUnicode(false);

                entity.Property(e => e.AutoCotizacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoCredito).IsUnicode(false);

                entity.Property(e => e.AutoFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoFolio)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoOrdenPago)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoPrecuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoRelacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoRendicion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Certificado).IsUnicode(false);

                entity.Property(e => e.ConceptoAme).IsUnicode(false);

                entity.Property(e => e.ConceptoArrendamiento).IsUnicode(false);

                entity.Property(e => e.ConceptoRetencion).IsUnicode(false);

                entity.Property(e => e.Contrasena).IsUnicode(false);

                entity.Property(e => e.CriterioBusquedaAme).IsUnicode(false);

                entity.Property(e => e.EnvioCorreo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GeneraFactElect)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdAgenciaAduanal).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.ImpExp).IsUnicode(false);

                entity.Property(e => e.LeyendaFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LeyendaRelacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LlavePrivada).IsUnicode(false);

                entity.Property(e => e.MonedaOrpa).IsUnicode(false);

                entity.Property(e => e.PacContrato).IsUnicode(false);

                entity.Property(e => e.PacCuenta).IsUnicode(false);

                entity.Property(e => e.PacPass).IsUnicode(false);

                entity.Property(e => e.PacRfc).IsUnicode(false);

                entity.Property(e => e.PacTimbradoPruebas).IsUnicode(false);

                entity.Property(e => e.PacUrlWsdl).IsUnicode(false);

                entity.Property(e => e.PacUrlWsdlExpuesto).IsUnicode(false);

                entity.Property(e => e.PagoAutomatico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PagoSeleccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PerfilCliCorreo).IsUnicode(false);

                entity.Property(e => e.PrefijoCargo).IsUnicode(false);

                entity.Property(e => e.PrefijoCredito).IsUnicode(false);

                entity.Property(e => e.PrefijoFactura).IsUnicode(false);

                entity.Property(e => e.PrefijoFolio).IsUnicode(false);

                entity.Property(e => e.PrefijoPrecuenta).IsUnicode(false);

                entity.Property(e => e.PrefijoRelacion).IsUnicode(false);

                entity.Property(e => e.PrefijoRendicion).IsUnicode(false);

                entity.Property(e => e.ReporteOrig)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.RfcMostradorExt).IsUnicode(false);

                entity.Property(e => e.RfcMostradorNac).IsUnicode(false);

                entity.Property(e => e.RfcProvCertif).IsUnicode(false);

                entity.Property(e => e.RutaArchivoPoliza).IsUnicode(false);

                entity.Property(e => e.RutaFacturaElect).IsUnicode(false);

                entity.Property(e => e.RutaRelArchivosEnvioPdf).IsUnicode(false);

                entity.Property(e => e.RutaReporteDiot).IsUnicode(false);

                entity.Property(e => e.RutaReporteSat).IsUnicode(false);

                entity.Property(e => e.RutaXml).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCambioCtaAme)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCambioDefault).IsUnicode(false);

                entity.Property(e => e.TipoRef)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Version).IsUnicode(false);
            });

            modelBuilder.Entity<FfgGfacturaAme>(entity =>
            {
                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.CalleNumeroFact).IsUnicode(false);

                entity.Property(e => e.CiudadCliFact).IsUnicode(false);

                entity.Property(e => e.ClienteDestino).IsUnicode(false);

                entity.Property(e => e.ColoniaCliFact).IsUnicode(false);

                entity.Property(e => e.ColorSemaforo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CpCliFact).IsUnicode(false);

                entity.Property(e => e.DescripcionMcia).IsUnicode(false);

                entity.Property(e => e.Distribuida)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DomiciCliFact).IsUnicode(false);

                entity.Property(e => e.EstadoCliFact).IsUnicode(false);

                entity.Property(e => e.FacturaEnviada)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacturaProv).IsUnicode(false);

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.IdClienteFact).IsUnicode(false);

                entity.Property(e => e.IdClientePedi).IsUnicode(false);

                entity.Property(e => e.IdCorresponsal).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.IdFacturaAme).IsUnicode(false);

                entity.Property(e => e.IdFacturaMex).IsUnicode(false);

                entity.Property(e => e.IdForwarding).IsUnicode(false);

                entity.Property(e => e.IdLinea).IsUnicode(false);

                entity.Property(e => e.IdOrdenCompra).IsUnicode(false);

                entity.Property(e => e.IdPedimento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdTabulador).IsUnicode(false);

                entity.Property(e => e.IdTipoVehic).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.ImpExp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoCaja).IsUnicode(false);

                entity.Property(e => e.NombreCliFact).IsUnicode(false);

                entity.Property(e => e.NumeroGuia).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.PoliAnticipo).IsUnicode(false);

                entity.Property(e => e.ProvCalle).IsUnicode(false);

                entity.Property(e => e.ProvColonia).IsUnicode(false);

                entity.Property(e => e.ProvCp).IsUnicode(false);

                entity.Property(e => e.ProvIdMunicipio).IsUnicode(false);

                entity.Property(e => e.ProvIrs).IsUnicode(false);

                entity.Property(e => e.ProvNumero).IsUnicode(false);

                entity.Property(e => e.ProvRazonSocial).IsUnicode(false);

                entity.Property(e => e.Regimen).IsUnicode(false);

                entity.Property(e => e.RfcCliFact).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sello).IsUnicode(false);

                entity.Property(e => e.SituacionFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<FfgGfacturaMex>(entity =>
            {
                entity.HasKey(e => new { e.IdFactura, e.TipoFactura, e.Numempresa })
                    .HasName("pk_ffg_gfactura_mex");

                entity.Property(e => e.IdFactura)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TipoFactura)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.Aduana)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.AduanaRazonSocial).IsUnicode(false);

                entity.Property(e => e.AnioAprobacion).IsUnicode(false);

                entity.Property(e => e.Anticipo).HasDefaultValueSql("((0))");

                entity.Property(e => e.ApMaternoAgente).IsUnicode(false);

                entity.Property(e => e.ApPaternoAgente).IsUnicode(false);

                entity.Property(e => e.BaseHonorario).HasDefaultValueSql("((0))");

                entity.Property(e => e.Bultos).HasDefaultValueSql("((0))");

                entity.Property(e => e.CClaveSatconfirmacion).IsUnicode(false);

                entity.Property(e => e.CClaveSatmontoFact).IsUnicode(false);

                entity.Property(e => e.CClaveSattipoCambio).IsUnicode(false);

                entity.Property(e => e.CFormaPago).IsUnicode(false);

                entity.Property(e => e.CMetodoPago).IsUnicode(false);

                entity.Property(e => e.CTipoRelacion).IsUnicode(false);

                entity.Property(e => e.CUsoCfdi).IsUnicode(false);

                entity.Property(e => e.Cajas).IsUnicode(false);

                entity.Property(e => e.CalleNumeroFact)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CalleNumeroPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CanceladoWs)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cfdirelacionados).IsUnicode(false);

                entity.Property(e => e.CiudadCliFact)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CiudadCliPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ClaveMotivoCancelacion).IsUnicode(false);

                entity.Property(e => e.ClaveSatMetodoPago).IsUnicode(false);

                entity.Property(e => e.ColoniaCliFact)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ColoniaCliPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ConceptoRetencion).IsUnicode(false);

                entity.Property(e => e.CondicionesDePago).IsUnicode(false);

                entity.Property(e => e.CpCliFact)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CpCliPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DescripcionMcia)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DestinoEmbarque).IsUnicode(false);

                entity.Property(e => e.DiferImpuesto).HasDefaultValueSql("((0))");

                entity.Property(e => e.Distribuida)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DomiciCliFact)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DomiciCliPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EfectoComp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EntrySummary).IsUnicode(false);

                entity.Property(e => e.EstadoCliFact)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EstadoCliPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.FactElect)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FactPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.FacturaEnviada)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.Facturas).IsUnicode(false);

                entity.Property(e => e.FechaFactura).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaFinal).HasDefaultValueSql("(' ')");

                entity.Property(e => e.FechaInicial).HasDefaultValueSql("(' ')");

                entity.Property(e => e.FechaPedi).HasDefaultValueSql("(' ')");

                entity.Property(e => e.FechaRegistro).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaUltmodif).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FinancialParty).IsUnicode(false);

                entity.Property(e => e.FolioFiscalorig).IsUnicode(false);

                entity.Property(e => e.IdAgenciaAduanal).IsUnicode(false);

                entity.Property(e => e.IdClienteFact)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdClientePedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdCorresponsal)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdEmbarque)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdFacturaRelacionada).IsUnicode(false);

                entity.Property(e => e.IdFiscal).IsUnicode(false);

                entity.Property(e => e.IdMunicipioFact).IsUnicode(false);

                entity.Property(e => e.IdProveedor)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdRectificacion).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdReferencia)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdTabulador)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdUsuarioRegistro)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdUsuarioUltmodif)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ImpExp)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.InvoiceNumber).IsUnicode(false);

                entity.Property(e => e.Iva).HasDefaultValueSql("((0))");

                entity.Property(e => e.IvaHon).HasDefaultValueSql("((0))");

                entity.Property(e => e.IvaPedimento).HasDefaultValueSql("((0))");

                entity.Property(e => e.IvaPorcentaje).HasDefaultValueSql("((0))");

                entity.Property(e => e.IvaSer).HasDefaultValueSql("((0))");

                entity.Property(e => e.LineaRazonSocial).IsUnicode(false);

                entity.Property(e => e.Marcas)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MetodoPagoDescripcion).IsUnicode(false);

                entity.Property(e => e.ModeType).IsUnicode(false);

                entity.Property(e => e.MontoHonorario).HasDefaultValueSql("((0))");

                entity.Property(e => e.MunicipioEmbarque).IsUnicode(false);

                entity.Property(e => e.NoCertificado).IsUnicode(false);

                entity.Property(e => e.NoFacturaOriginal).IsUnicode(false);

                entity.Property(e => e.NoFracciones).HasDefaultValueSql("((0))");

                entity.Property(e => e.NombreAgente).IsUnicode(false);

                entity.Property(e => e.NombreCliFact)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NombreCliPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NumCuentaPago).IsUnicode(false);

                entity.Property(e => e.NumFactura).IsUnicode(false);

                entity.Property(e => e.NumRegidTrib).IsUnicode(false);

                entity.Property(e => e.NumeroMcia)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NumintCliFact).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.ObservaFactProv).IsUnicode(false);

                entity.Property(e => e.Observaciones).HasDefaultValueSql("(' ')");

                entity.Property(e => e.OrdenTrans)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Origen)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.OriginalInvoice).IsUnicode(false);

                entity.Property(e => e.PO).IsUnicode(false);

                entity.Property(e => e.PacCadenaOriginal).IsUnicode(false);

                entity.Property(e => e.PacCancelRpt1).IsUnicode(false);

                entity.Property(e => e.PacCancelRpt2).IsUnicode(false);

                entity.Property(e => e.PacCreditosRestantes).IsUnicode(false);

                entity.Property(e => e.PacLeyendaImpresa).IsUnicode(false);

                entity.Property(e => e.PacMensajeError).IsUnicode(false);

                entity.Property(e => e.PacMsgError2).IsUnicode(false);

                entity.Property(e => e.PacMsgError3).IsUnicode(false);

                entity.Property(e => e.PacNoCertificadoSat).IsUnicode(false);

                entity.Property(e => e.PacUuid).IsUnicode(false);

                entity.Property(e => e.PacVersion).IsUnicode(false);

                entity.Property(e => e.Patente)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PaymentTermDays).IsUnicode(false);

                entity.Property(e => e.Pedimento)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.PesoMcia).HasDefaultValueSql("((0))");

                entity.Property(e => e.PoliAnticipo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PorcHonorario).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProvCalle).IsUnicode(false);

                entity.Property(e => e.ProvColonia).IsUnicode(false);

                entity.Property(e => e.ProvCp).IsUnicode(false);

                entity.Property(e => e.ProvIdMunicipio).IsUnicode(false);

                entity.Property(e => e.ProvNumero).IsUnicode(false);

                entity.Property(e => e.ProvRazonSocial).IsUnicode(false);

                entity.Property(e => e.RcRelacionada).IsUnicode(false);

                entity.Property(e => e.RefUps).IsUnicode(false);

                entity.Property(e => e.Referencia2).IsUnicode(false);

                entity.Property(e => e.Regimen)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.RegistroAgente).IsUnicode(false);

                entity.Property(e => e.ResidenciaFiscal).IsUnicode(false);

                entity.Property(e => e.RfcCliFact)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.RfcCliPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Saldo).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalesOrder).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.Serie).IsUnicode(false);

                entity.Property(e => e.SerieFoliofiscalorig).IsUnicode(false);

                entity.Property(e => e.SituacionFactura)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.StatusContable).HasDefaultValueSql("((1))");

                entity.Property(e => e.StatusPagadoTotal)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Talon)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TipoCambio).HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoMoneda)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TotalComplemen).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalGtsComp).HasDefaultValueSql("((0))");

                entity.Property(e => e.TrailerNumber).IsUnicode(false);

                entity.Property(e => e.TransPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ValorNormal).HasDefaultValueSql("((0))");

                entity.Property(e => e.Version).IsUnicode(false);
            });

            modelBuilder.Entity<FfgGprecuentaMex>(entity =>
            {
                entity.HasKey(e => new { e.IdPrecuenta, e.Numempresa })
                    .HasName("pk_ffg_gprecuenta_mex");

                entity.Property(e => e.IdPrecuenta).IsUnicode(false);

                entity.Property(e => e.Aduana)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.AduanaRazonSocial)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Anticipo).HasDefaultValueSql("((0))");

                entity.Property(e => e.ApMaternoAgente).IsUnicode(false);

                entity.Property(e => e.ApPaternoAgente).IsUnicode(false);

                entity.Property(e => e.Atencion).IsUnicode(false);

                entity.Property(e => e.BaseHonorario).HasDefaultValueSql("((0))");

                entity.Property(e => e.Bultos).HasDefaultValueSql("((0))");

                entity.Property(e => e.Cajas).IsUnicode(false);

                entity.Property(e => e.CalleNumeroPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CalleNumeroPrec)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CiudadCliPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CiudadCliPrec)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ColoniaCliPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ColoniaCliPrec)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ColorSemaforo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ConceptoRetencion).IsUnicode(false);

                entity.Property(e => e.CpCliPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CpCliPrec)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CveTrans)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescripcionMcia)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DestinoEmbarque).IsUnicode(false);

                entity.Property(e => e.DiferImpuesto).HasDefaultValueSql("((0))");

                entity.Property(e => e.DomiciCliPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DomiciCliPrec)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EntradaFacturaUuid).IsUnicode(false);

                entity.Property(e => e.EntrySummary).IsUnicode(false);

                entity.Property(e => e.EstadoCliPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EstadoCliPrec)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.FactPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Facturas).IsUnicode(false);

                entity.Property(e => e.FechaPrecuenta).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaRegistro).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaUltmodif).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FinancialParty).IsUnicode(false);

                entity.Property(e => e.IdAgenciaAduanal)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdClientePedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdClientePrec)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdCorresponsal)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdEmbarque)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdFactura)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdFacturaAme).IsUnicode(false);

                entity.Property(e => e.IdFiscal).IsUnicode(false);

                entity.Property(e => e.IdMunicipioPrec).IsUnicode(false);

                entity.Property(e => e.IdProveedor)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdRectificacion).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdReferencia)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdTabulador)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.ImpExp)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.InvoiceNumber).IsUnicode(false);

                entity.Property(e => e.Iva).HasDefaultValueSql("((0))");

                entity.Property(e => e.IvaHon).HasDefaultValueSql("((0))");

                entity.Property(e => e.IvaPedimento).HasDefaultValueSql("((0))");

                entity.Property(e => e.IvaPorcentaje).HasDefaultValueSql("((0))");

                entity.Property(e => e.IvaSer).HasDefaultValueSql("((0))");

                entity.Property(e => e.LineaRazonSocial).IsUnicode(false);

                entity.Property(e => e.Marcas)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ModeType).IsUnicode(false);

                entity.Property(e => e.MontoHonorario).HasDefaultValueSql("((0))");

                entity.Property(e => e.MunicipioEmbarque).IsUnicode(false);

                entity.Property(e => e.NoFacturaOriginal).IsUnicode(false);

                entity.Property(e => e.NoFracciones).HasDefaultValueSql("((0))");

                entity.Property(e => e.NombreAgente).IsUnicode(false);

                entity.Property(e => e.NombreCliPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NombreCliPrec)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NumFactura).IsUnicode(false);

                entity.Property(e => e.NumeroMcia)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NumintCliFact).IsUnicode(false);

                entity.Property(e => e.ObservaFactProv).IsUnicode(false);

                entity.Property(e => e.Observaciones).HasDefaultValueSql("(' ')");

                entity.Property(e => e.OrdenTrans)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Origen)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.OriginalInvoice).IsUnicode(false);

                entity.Property(e => e.PO).IsUnicode(false);

                entity.Property(e => e.Patente)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PaymentTermDays).IsUnicode(false);

                entity.Property(e => e.Pedimento)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.PesoMcia).HasDefaultValueSql("((0))");

                entity.Property(e => e.PoliAnticipo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PorcHonorario).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProvCalle).IsUnicode(false);

                entity.Property(e => e.ProvColonia).IsUnicode(false);

                entity.Property(e => e.ProvCp).IsUnicode(false);

                entity.Property(e => e.ProvIdMunicipio).IsUnicode(false);

                entity.Property(e => e.ProvNumero).IsUnicode(false);

                entity.Property(e => e.ProvRazonSocial).IsUnicode(false);

                entity.Property(e => e.RefUps).IsUnicode(false);

                entity.Property(e => e.Referencia2).IsUnicode(false);

                entity.Property(e => e.Regimen)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.RegistroAgente).IsUnicode(false);

                entity.Property(e => e.RfcCliPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.RfcCliPrec)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Saldo).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalesOrder).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength(true);

                entity.Property(e => e.SituacionPrecuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Talon)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TipoCambio).HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoCambioDefault).IsUnicode(false);

                entity.Property(e => e.TipoMoneda)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPrecuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TotalComplemen).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalGtsComp).HasDefaultValueSql("((0))");

                entity.Property(e => e.TrailerNumber).IsUnicode(false);

                entity.Property(e => e.TransPedi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ValorNormal).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<FfgGtabulador>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdTabulador, e.MexAme })
                    .HasName("pk_tabulador");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdTabulador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MexAme)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdTabuladorHon)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.TipoMoneda)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgHonorario>(entity =>
            {
                entity.HasKey(e => new { e.IdTabuladorHon, e.LimiteSuperior, e.Numempresa })
                    .HasName("PK_ffg_honorario_1");

                entity.Property(e => e.IdTabuladorHon).IsUnicode(false);

                entity.Property(e => e.Calculo).IsUnicode(false);

                entity.Property(e => e.CuentaConta).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdTipoCalculo).IsUnicode(false);

                entity.Property(e => e.IdUnidadFacturacion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.TipoMoneda)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgImpuestoCfdi>(entity =>
            {
                entity.HasKey(e => e.IdImpuestoCfdi)
                    .HasName("PK_ffg_impuestoCFD");

                entity.Property(e => e.CImpuesto).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Localfederal).IsUnicode(false);

                entity.Property(e => e.Retencion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Traslado)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgLeyenda>(entity =>
            {
                entity.HasKey(e => e.IdLeyenda)
                    .HasName("pkffg_leyendas")
                    .IsClustered(false);

                entity.Property(e => e.IdLeyenda).IsUnicode(false);

                entity.Property(e => e.DescripcionReporte).IsUnicode(false);
            });

            modelBuilder.Entity<FfgListaEnvio>(entity =>
            {
                entity.Property(e => e.CveTipoOrganizacion).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FfgMetodoPago>(entity =>
            {
                entity.Property(e => e.IdMetodoPago).ValueGeneratedNever();

                entity.Property(e => e.ClaveSatMetodoPago).IsUnicode(false);

                entity.Property(e => e.DescripcionMetpago).IsUnicode(false);
            });

            modelBuilder.Entity<FfgMetodoPagoCfdi>(entity =>
            {
                entity.Property(e => e.CMetodoPago).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);
            });

            modelBuilder.Entity<FfgMonedaCfdi>(entity =>
            {
                entity.Property(e => e.CcMoneda).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);
            });

            modelBuilder.Entity<FfgMotivosCancelacion>(entity =>
            {
                entity.Property(e => e.Clave).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FfgOficinasAme>(entity =>
            {
                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdOficina).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);
            });

            modelBuilder.Entity<FfgOficinasMex>(entity =>
            {
                entity.HasKey(e => e.IdOficina)
                    .HasName("pkffg_oficinas_mex")
                    .IsClustered(false);

                entity.Property(e => e.IdOficina).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);
            });

            modelBuilder.Entity<FfgPaisCfdi>(entity =>
            {
                entity.Property(e => e.CPais).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);
            });

            modelBuilder.Entity<FfgPedimentosExterno>(entity =>
            {
                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.AduanaRazonSocial).IsUnicode(false);

                entity.Property(e => e.CalleNumeroPedi).IsUnicode(false);

                entity.Property(e => e.CiudadCliPedi).IsUnicode(false);

                entity.Property(e => e.ColoniaCliPedi).IsUnicode(false);

                entity.Property(e => e.CpCliPedi).IsUnicode(false);

                entity.Property(e => e.CveTrans)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescripcionMcia).IsUnicode(false);

                entity.Property(e => e.DestinoEmbarque).IsUnicode(false);

                entity.Property(e => e.DomiciCliPedi).IsUnicode(false);

                entity.Property(e => e.EstadoCliPedi).IsUnicode(false);

                entity.Property(e => e.FactPedi).IsUnicode(false);

                entity.Property(e => e.Facturas).IsUnicode(false);

                entity.Property(e => e.IdAgenciaAduanal).IsUnicode(false);

                entity.Property(e => e.IdClientePedi).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.ImpExp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LineaRazonSocial).IsUnicode(false);

                entity.Property(e => e.Marcas).IsUnicode(false);

                entity.Property(e => e.MunicipioEmbarque).IsUnicode(false);

                entity.Property(e => e.NombreCliPedi).IsUnicode(false);

                entity.Property(e => e.NumeroMcia).IsUnicode(false);

                entity.Property(e => e.ObservaFactProv).IsUnicode(false);

                entity.Property(e => e.Origen).IsUnicode(false);

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.Pedimento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ProvCalle).IsUnicode(false);

                entity.Property(e => e.ProvColonia).IsUnicode(false);

                entity.Property(e => e.ProvCp).IsUnicode(false);

                entity.Property(e => e.ProvIdMunicipio).IsUnicode(false);

                entity.Property(e => e.ProvNumero).IsUnicode(false);

                entity.Property(e => e.ProvRazonSocial).IsUnicode(false);

                entity.Property(e => e.Regimen).IsUnicode(false);

                entity.Property(e => e.RfcCliPedi).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Talon).IsUnicode(false);

                entity.Property(e => e.TransPedi).IsUnicode(false);
            });

            modelBuilder.Entity<FfgRegimenFiscalCfdi>(entity =>
            {
                entity.Property(e => e.AplicaTipoPerFisica)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AplicaTipoPerMoral)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CRegimenFiscal).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);
            });

            modelBuilder.Entity<FfgRelArchivosEnvioPdf>(entity =>
            {
                entity.HasKey(e => new { e.IdPdf, e.IdReferencia });

                entity.Property(e => e.IdPdf).ValueGeneratedOnAdd();

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.RutaPdf).IsUnicode(false);
            });

            modelBuilder.Entity<FfgRelCliTab>(entity =>
            {
                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdTabulador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MexAme)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgRelClifacCliped>(entity =>
            {
                entity.Property(e => e.IdClienteFactura).IsUnicode(false);

                entity.Property(e => e.IdClientePedimento).IsUnicode(false);

                entity.Property(e => e.IdTabulador)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgRelFacameEntTraf>(entity =>
            {
                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.IdFacturaAme).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);
            });

            modelBuilder.Entity<FfgRelOficinaCliente>(entity =>
            {
                entity.HasKey(e => new { e.IdOficina, e.IdCliente })
                    .HasName("pkffg_oficina_cliente")
                    .IsClustered(false);

                entity.Property(e => e.IdOficina).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);
            });

            modelBuilder.Entity<FfgRelOficinaClienteMex>(entity =>
            {
                entity.HasKey(e => new { e.IdOficina, e.IdCliente })
                    .HasName("pkffg_oficina_mex")
                    .IsClustered(false);

                entity.Property(e => e.IdOficina).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);
            });

            modelBuilder.Entity<FfgRelPagoComision>(entity =>
            {
                entity.HasKey(e => e.IdRelPagoComision)
                    .HasName("pkffg_rel_pago_comision")
                    .IsClustered(false);

                entity.Property(e => e.Atencion).IsUnicode(false);

                entity.Property(e => e.ComentInterno).IsUnicode(false);

                entity.Property(e => e.IdCorresponsal).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Numempresa)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Recepcion).IsUnicode(false);

                entity.Property(e => e.StatusPago)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCorresponsalContable).IsUnicode(false);
            });

            modelBuilder.Entity<FfgRelPedFact>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdPrecuenta, e.Numempresa });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdPrecuenta).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdPedimento).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Situacion).IsUnicode(false);
            });

            modelBuilder.Entity<FfgRelacionEnvio>(entity =>
            {
                entity.HasKey(e => new { e.IdRelacion, e.Numempresa })
                    .HasName("pk_ffg_relacion_envio");

                entity.Property(e => e.IdRelacion).IsUnicode(false);

                entity.Property(e => e.Atencion).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdOrganizacion).IsUnicode(false);

                entity.Property(e => e.IdTipoOrgnizacion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Mensajeria).IsUnicode(false);

                entity.Property(e => e.NoGuia).IsUnicode(false);

                entity.Property(e => e.Recepcion).IsUnicode(false);

                entity.Property(e => e.TipoRelacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgRelacionEnvioAme>(entity =>
            {
                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdOrganizacion).IsUnicode(false);

                entity.Property(e => e.IdRelacion).IsUnicode(false);

                entity.Property(e => e.IdTipoOrgnizacion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Mensajeria).IsUnicode(false);

                entity.Property(e => e.NoGuia).IsUnicode(false);

                entity.Property(e => e.TipoRelacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgReporteClienteConcepto>(entity =>
            {
                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdClienteFact).IsUnicode(false);

                entity.Property(e => e.IdConcepto).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.ImpExp)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgTabAduana>(entity =>
            {
                entity.HasKey(e => new { e.IdTabulador, e.IdCliente, e.MexAme, e.IdAduana, e.Numempresa })
                    .HasName("pk_ffg_tab_aduana");

                entity.Property(e => e.IdTabulador).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.MexAme)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdAduana).IsUnicode(false);
            });

            modelBuilder.Entity<FfgTabRegiman>(entity =>
            {
                entity.HasKey(e => new { e.IdTabulador, e.IdCliente, e.MexAme, e.IdRegimen, e.CveOperacion, e.Numempresa })
                    .HasName("pk_ffg_tab_regimen");

                entity.Property(e => e.IdTabulador).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.MexAme)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdRegimen)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgTabuladorDet>(entity =>
            {
                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.AduanaCheck)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AduanaRazonSocial).IsUnicode(false);

                entity.Property(e => e.AplicaSemaforo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoGtsCompl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Calculo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Desc2).IsUnicode(false);

                entity.Property(e => e.IdConcepto).IsUnicode(false);

                entity.Property(e => e.IdTabulador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdTipoCalculo).IsUnicode(false);

                entity.Property(e => e.IdUnidadFacturacion).IsUnicode(false);

                entity.Property(e => e.MexAme)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMoneda)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgTabuladorGen>(entity =>
            {
                entity.HasKey(e => new { e.IdTabulador, e.MexAme, e.Numempresa })
                    .HasName("PK_ffg_tabulador_gen_1");

                entity.Property(e => e.IdTabulador)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true);

                entity.Property(e => e.MexAme)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ConversionMoneda)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdTabuladorHon)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Planta).IsUnicode(false);

                entity.Property(e => e.TipoMoneda)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfgTasaoCuotaCfdi>(entity =>
            {
                entity.Property(e => e.CTasaoCuotaValorMaximo).HasDefaultValueSql("((0))");

                entity.Property(e => e.CTipoFactor).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Impuesto).IsUnicode(false);

                entity.Property(e => e.RangoFijo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Retencion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Traslado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValorMinimo).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<FfgTipoComprobanteCfdi>(entity =>
            {
                entity.Property(e => e.CTipoDeComprobante).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.ValorMaximo).HasDefaultValueSql("((0))");

                entity.Property(e => e.ValorMaximoNdS).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<FfgTipoFactor>(entity =>
            {
                entity.HasKey(e => e.IdFactor)
                    .HasName("PK_ffg_tipofactor");

                entity.Property(e => e.CTipoFactor).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);
            });

            modelBuilder.Entity<FfgTipoRelacionCfdi>(entity =>
            {
                entity.Property(e => e.CTipoRelacion).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);
            });

            modelBuilder.Entity<FfgUsoCfdi>(entity =>
            {
                entity.Property(e => e.AplicaTipoPerFisica)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AplicaTipoPerMoral)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CUsoCfdi).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);
            });

            modelBuilder.Entity<FfirmaDigital>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Curp).IsUnicode(false);

                entity.Property(e => e.FirmaArchivo).IsUnicode(false);

                entity.Property(e => e.FirmaPedimento).IsUnicode(false);

                entity.Property(e => e.IdUsuarioAutoriza).IsUnicode(false);

                entity.Property(e => e.IdUsuarioGen).IsUnicode(false);

                entity.Property(e => e.IdUsuarioGenBanco).IsUnicode(false);

                entity.Property(e => e.IdUsuarioGenUltBanco).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltGen).IsUnicode(false);

                entity.Property(e => e.Notificado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.RutaArchivo).IsUnicode(false);

                entity.Property(e => e.RutaArchivoBanco).IsUnicode(false);

                entity.Property(e => e.TipoFiguraPed)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdRe)
                    .WithOne(p => p.FfirmaDigital)
                    .HasForeignKey<FfirmaDigital>(d => new { d.IdReferencia, d.IdRectificacion })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ffirma_digital_fpedimento");
            });

            modelBuilder.Entity<Ffolio>(entity =>
            {
                entity.HasKey(e => new { e.IdAnio, e.IdPatente, e.IdAduana, e.Seccion })
                    .HasName("pk_ffolio");

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfolioNoUtilizado>(entity =>
            {
                entity.HasKey(e => new { e.IdFecha, e.IdPatente, e.IdAduana, e.Seccion })
                    .HasName("pk_ffolio_no_utilizado");

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfolioRango>(entity =>
            {
                entity.HasKey(e => new { e.IdAnio, e.IdPatente, e.IdAduana, e.Seccion, e.PedimentoInicial })
                    .HasName("pk_ffolio_rango");

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PedimentoInicial).IsUnicode(false);

                entity.Property(e => e.PedimentoFinal).IsUnicode(false);
            });

            modelBuilder.Entity<FformaPago>(entity =>
            {
                entity.HasKey(e => e.IdFormaPago)
                    .HasName("pk_forma_pago");

                entity.Property(e => e.IdFormaPago).IsUnicode(false);

                entity.Property(e => e.DescripcionAbreviada).IsUnicode(false);

                entity.Property(e => e.DescripcionPago).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Fforwarding>(entity =>
            {
                entity.HasKey(e => e.IdForwarding)
                    .HasName("pk_fforwarding");

                entity.Property(e => e.IdForwarding).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.ForwarderCode).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioResponsable).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Irs).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);

                entity.Property(e => e.Telefono3).IsUnicode(false);

                entity.Property(e => e.Telefono4).IsUnicode(false);

                entity.HasOne(d => d.IdMunicipioNavigation)
                    .WithMany(p => p.Fforwardings)
                    .HasForeignKey(d => d.IdMunicipio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_forwarding");
            });

            modelBuilder.Entity<FfracMexAdvaTemp>(entity =>
            {
                entity.Property(e => e.Cc)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.DescripcionFm).IsUnicode(false);

                entity.Property(e => e.IdFraccionAme).IsUnicode(false);

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.Ieps)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Isan)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Iva)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Norma)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnAgricola)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnAutomo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnBienes)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnCafe)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnCalzado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnCaucho)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnChoco)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnCuero)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnDiversos)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnElectrica)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnElectronica)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnFarmacos)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnFotogra)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnJuguete)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnMadera)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnMineria)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnMuebles)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnPapel)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnQuimica)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnSider)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnTextil)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SnTransporte)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfraccionAme>(entity =>
            {
                entity.HasKey(e => e.IdFraccionAme)
                    .HasName("pk_ffraccion_ame");

                entity.Property(e => e.IdFraccionAme).IsUnicode(false);

                entity.Property(e => e.DescripcionFa).IsUnicode(false);

                entity.Property(e => e.DigitoChecador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UnidaMedida2).IsUnicode(false);

                entity.Property(e => e.UnidadMedida2).IsUnicode(false);
            });

            modelBuilder.Entity<FfraccionCliente>(entity =>
            {
                entity.HasKey(e => new { e.IdFraccionMex, e.CveTipoOpn, e.IdCliente });

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FfraccionIep>(entity =>
            {
                entity.HasKey(e => new { e.IdFraccionMex, e.CveTipoOpn })
                    .HasName("pk_ffraccion_ieps");

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);
            });

            modelBuilder.Entity<FfraccionIepsTipo>(entity =>
            {
                entity.HasKey(e => new { e.IdFraccionMex, e.CveTipoOpn, e.Secuencial })
                    .HasName("pk_ffraccion_ieps_tipos");

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMoneda)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FfraccionIepsTiposTipoAyudum>(entity =>
            {
                entity.HasKey(e => new { e.Tipo, e.TipoAyuda })
                    .HasName("pk_ffraccion_ieps_tipos_tipo_ayuda");

                entity.Property(e => e.Tipo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoAyuda).IsUnicode(false);
            });

            modelBuilder.Entity<FfraccionIepsTiposTipoMonedaAyudum>(entity =>
            {
                entity.HasKey(e => new { e.TipoMoneda, e.TipoMonedaAyuda })
                    .HasName("pk_ffraccion_ieps_tipos_moneda_ayuda");

                entity.Property(e => e.TipoMoneda)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMonedaAyuda).IsUnicode(false);
            });

            modelBuilder.Entity<FfraccionMex>(entity =>
            {
                entity.HasKey(e => new { e.CveTipoOpn, e.IdFraccionMex })
                    .HasName("pk_ffraccion_mex");

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.AvisoAutomatico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveDerogada)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescripcionFm).IsUnicode(false);

                entity.Property(e => e.HazMat)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdFraccionAme).IsUnicode(false);

                entity.Property(e => e.IdFraccionAnt).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.IdUsuarioModif).IsUnicode(false);

                entity.Property(e => e.PrecioEstimado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ProdQuimico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UnidadPe).IsUnicode(false);

                entity.HasOne(d => d.IdUnidadUniversalNavigation)
                    .WithMany(p => p.FfraccionMices)
                    .HasForeignKey(d => d.IdUnidadUniversal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_ffraccion_mex");
            });

            modelBuilder.Entity<FfraccionMexn>(entity =>
            {
                entity.HasKey(e => new { e.CveTipoOpn, e.IdFraccionMex })
                    .HasName("pk_ffraccion_mexn");

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.AvisoAutomatico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveDerogada)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescripcionFm).IsUnicode(false);

                entity.Property(e => e.HazMat)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdFraccionAme).IsUnicode(false);

                entity.Property(e => e.IdFraccionAnt).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.IdUsuarioModif).IsUnicode(false);

                entity.Property(e => e.PrecioEstimado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ProdQuimico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdUnidadUniversalNavigation)
                    .WithMany(p => p.FfraccionMexns)
                    .HasForeignKey(d => d.IdUnidadUniversal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_ffraccion_mexn");
            });

            modelBuilder.Entity<FfraccionNico>(entity =>
            {
                entity.HasKey(e => new { e.IdFraccionMex, e.CveTipoOpn, e.IdNico })
                    .HasName("PK__FFRACCIO__87137820E0241457");

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.IdNico).IsUnicode(false);

                entity.Property(e => e.Complemento).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Eliminar).IsUnicode(false);
            });

            modelBuilder.Entity<FfraccionRestriccion>(entity =>
            {
                entity.HasKey(e => new { e.IdFraccionMex, e.CveTipoOpn });

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.Anexo10).IsUnicode(false);

                entity.Property(e => e.IdSector).IsUnicode(false);

                entity.Property(e => e.IvaAnexo27).IsUnicode(false);

                entity.Property(e => e.MarcaReg).IsUnicode(false);

                entity.Property(e => e.PermisoEconomia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RestriccionHorario).IsUnicode(false);

                entity.Property(e => e.SensibleImmex).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.Vulnerable).IsUnicode(false);
            });

            modelBuilder.Entity<FfraccionRestriccionDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdFraccionMex, e.CveTipoOpn })
                    .HasName("PK__ffraccio__503870E32AAAB2A2");

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<Ffraccione>(entity =>
            {
                entity.Property(e => e.Fraccion).IsUnicode(false);
            });

            modelBuilder.Entity<FfraccionesDaltile>(entity =>
            {
                entity.Property(e => e.FraccionDaltile).IsUnicode(false);

                entity.Property(e => e.DescripcionClas).IsUnicode(false);

                entity.Property(e => e.FraccionMex).IsUnicode(false);
            });

            modelBuilder.Entity<FfraccionesSensible>(entity =>
            {
                entity.HasKey(e => new { e.CveTipoOpn, e.IdFraccionMex })
                    .HasName("PK_fracciones_sensibles");

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);
            });

            modelBuilder.Entity<FgLote>(entity =>
            {
                entity.HasKey(e => new { e.Lote, e.Tipo });

                entity.Property(e => e.Lote)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tipo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Clte)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Confirmado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Consignatario)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdCliente)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Referencia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReferenciaNg)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FgcertificadoOrigen>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.IdProveedor });

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdContacto).IsUnicode(false);

                entity.Property(e => e.NoTaxCliente).IsUnicode(false);

                entity.Property(e => e.NoTaxProducer).IsUnicode(false);

                entity.Property(e => e.NoTaxProveedor).IsUnicode(false);

                entity.Property(e => e.NombreContacto).IsUnicode(false);

                entity.Property(e => e.Producer).IsUnicode(false);

                entity.Property(e => e.RazonSocialProveedor).IsUnicode(false);

                entity.Property(e => e.Telefono).IsUnicode(false);

                entity.Property(e => e.Titulo).IsUnicode(false);
            });

            modelBuilder.Entity<Fgenerale>(entity =>
            {
                entity.HasIndex(e => e.DtaCuotaFija, "i_fgenerales")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AaaError).IsUnicode(false);

                entity.Property(e => e.AaaValidacion).IsUnicode(false);

                entity.Property(e => e.AaaaAnexo18)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ActivarRfcServiciosCliente).IsUnicode(false);

                entity.Property(e => e.Actividades)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ActualizaAdvalorem)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ActualizaEntrada)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ActualizaFechaCruce)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ActualizaIdentificadores).IsUnicode(false);

                entity.Property(e => e.AduConsec).IsUnicode(false);

                entity.Property(e => e.AduanaAux)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AduanaAux2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AduanaAux3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AduanaAux4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AduanaAux5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Anexo10).IsUnicode(false);

                entity.Property(e => e.Anexo10Password).IsUnicode(false);

                entity.Property(e => e.AnexoCliente)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ArchivoProducto).IsUnicode(false);

                entity.Property(e => e.ArchivoZ)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ArchivosPedimentos).IsUnicode(false);

                entity.Property(e => e.AsignaIdent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoCalculo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoControl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoEmbarque)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoEmbarqueLight)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoEntrada)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoEntradaFolio)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoFerrocarril)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoPedimento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoRecibo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoReferencia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoShipper)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutoTrafico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutorizacionContabilidad)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutorizacionR1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BancoCandado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BancoError).IsUnicode(false);

                entity.Property(e => e.BancoError2).IsUnicode(false);

                entity.Property(e => e.BancoError3).IsUnicode(false);

                entity.Property(e => e.BancoError4).IsUnicode(false);

                entity.Property(e => e.BancoErrorAux).IsUnicode(false);

                entity.Property(e => e.BancoFraccVulnerables).IsUnicode(false);

                entity.Property(e => e.BancoValidAux).IsUnicode(false);

                entity.Property(e => e.BancoValidacion).IsUnicode(false);

                entity.Property(e => e.BancoValidacion2).IsUnicode(false);

                entity.Property(e => e.BancoValidacion3).IsUnicode(false);

                entity.Property(e => e.BancoValidacion4).IsUnicode(false);

                entity.Property(e => e.BloquearCamposFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BloqueoCamposAduasisCove).IsUnicode(false);

                entity.Property(e => e.BotonBultos)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BotonCompensacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BotonContenedor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BotonCtaAduanera)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BotonDescargas)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BotonDiferencias)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BotonFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BotonGuias)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BotonIdentificador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BotonImpuestos)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BotonObsevaciones)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BotonPartidas)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BotonTransportista)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BotonVehiculos)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BultoKgs)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CaatRelacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CalculoAuto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CambioFormatoPedimento).IsUnicode(false);

                entity.Property(e => e.Campo12).IsUnicode(false);

                entity.Property(e => e.Campo13Codigo).IsUnicode(false);

                entity.Property(e => e.CampoNotaRevision).IsUnicode(false);

                entity.Property(e => e.CamposEeiReq)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CandadoReg516)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CartaEnc)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CartaError).IsUnicode(false);

                entity.Property(e => e.CartaValidacion).IsUnicode(false);

                entity.Property(e => e.CertificadoSagar)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CierreAuto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClasificacionTrafico).IsUnicode(false);

                entity.Property(e => e.ClienteNumerico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodConVirtual)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CodigoXFacturaRemesa)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ConocEmbError).IsUnicode(false);

                entity.Property(e => e.ConocEmbValid).IsUnicode(false);

                entity.Property(e => e.ConsecutivoPartidas)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ConsecutivoProveedor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ContenedorAuto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ControlBultos)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CorreoBlat)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CorreoSmtp).IsUnicode(false);

                entity.Property(e => e.CorreosElectronicos).IsUnicode(false);

                entity.Property(e => e.Cove).IsUnicode(false);

                entity.Property(e => e.CovePassword).IsUnicode(false);

                entity.Property(e => e.CuadroLiquidacionOculto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DDerogadas)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DDescripcion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DFormato)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DMensajes)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DTasas)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DepositoArch).IsUnicode(false);

                entity.Property(e => e.DescPais)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.Dia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DigPedFirmaBanco)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DriveAux).IsUnicode(false);

                entity.Property(e => e.DriveFeaAutomatica)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EncargoError).IsUnicode(false);

                entity.Property(e => e.EncargoPath).IsUnicode(false);

                entity.Property(e => e.EntradaTrafico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EnvioPedimento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EstadoLargo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacturarA).IsUnicode(false);

                entity.Property(e => e.FeaAutomatica)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FeaConsolidado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FirmaAuto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Firmaelectronica).IsUnicode(false);

                entity.Property(e => e.Firmaelectronica2).IsUnicode(false);

                entity.Property(e => e.FormatoFechas)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FotosEmbarque).IsUnicode(false);

                entity.Property(e => e.FotosEntrada).IsUnicode(false);

                entity.Property(e => e.FpagoPerfil)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.FraccionesVulnerables)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.GuiaReq)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdAgenciaAduanal).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdForwarding).IsUnicode(false);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdTipoFactura).IsUnicode(false);

                entity.Property(e => e.IdentificadorPd)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ImpEtiAuto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ImprimirDestino)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ImprimirRemesa).IsUnicode(false);

                entity.Property(e => e.IvaAnexo27).IsUnicode(false);

                entity.Property(e => e.JwtDoda).IsUnicode(false);

                entity.Property(e => e.LeyendaCopias)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LeyendaCopiasParte2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LeyendaCotizacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LicShip).IsUnicode(false);

                entity.Property(e => e.M3505).HasDefaultValueSql("((0))");

                entity.Property(e => e.MarcasEntrada)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ModFerrocarril).IsUnicode(false);

                entity.Property(e => e.ModificarTrafico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MonedasFacturas)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MtTipoTasa).IsUnicode(false);

                entity.Property(e => e.MvAuto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotifPedRec1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionEmbarque).IsUnicode(false);

                entity.Property(e => e.NotificacionHc)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionMv)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumPedTrafico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ObserPartidaOrden)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ObserPartidaTrafi)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OcultarCuadroLiquidacion).IsUnicode(false);

                entity.Property(e => e.Partes2Consecutivo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PasarVc)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PasarVcConsol)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PasswordAutPeso).IsUnicode(false);

                entity.Property(e => e.PasswordAutorizacionPagoCuentaCliente).IsUnicode(false);

                entity.Property(e => e.PasswordBancos).IsUnicode(false);

                entity.Property(e => e.PasswordPedimento).IsUnicode(false);

                entity.Property(e => e.PasswordValidacionEconomia).IsUnicode(false);

                entity.Property(e => e.PasswordValidacionMarca).IsUnicode(false);

                entity.Property(e => e.PathArchivosGenerados).IsUnicode(false);

                entity.Property(e => e.PathDigitaliza).IsUnicode(false);

                entity.Property(e => e.PathFiles).IsUnicode(false);

                entity.Property(e => e.PathProducto).IsUnicode(false);

                entity.Property(e => e.Pdf417).IsUnicode(false);

                entity.Property(e => e.PdfEntrada).IsUnicode(false);

                entity.Property(e => e.PedAuto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PedimentoMarcaDeAgua)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.PedimentoTrafico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PedmtoAutomatico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PermPagarCuentaGeneral).IsUnicode(false);

                entity.Property(e => e.PesoEntradaABulto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PesoPartida)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PolizaElectronica)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrefijoControl).IsUnicode(false);

                entity.Property(e => e.PrefijoEmbarque).IsUnicode(false);

                entity.Property(e => e.PrefijoEmbarqueLight).IsUnicode(false);

                entity.Property(e => e.PrefijoEntrada).IsUnicode(false);

                entity.Property(e => e.PrefijoEntradaFolio).IsUnicode(false);

                entity.Property(e => e.PrefijoFerrocarril).IsUnicode(false);

                entity.Property(e => e.PrefijoLecAuto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrefijoRecibo).IsUnicode(false);

                entity.Property(e => e.PrefijoReferencia).IsUnicode(false);

                entity.Property(e => e.PrefijoTrafico).IsUnicode(false);

                entity.Property(e => e.PrevalidacionError).IsUnicode(false);

                entity.Property(e => e.PrevalidacionError2).IsUnicode(false);

                entity.Property(e => e.PrevalidacionError3).IsUnicode(false);

                entity.Property(e => e.PrevalidacionError4).IsUnicode(false);

                entity.Property(e => e.ProdQuimico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ProfepaError).IsUnicode(false);

                entity.Property(e => e.ProfepaValidacion).IsUnicode(false);

                entity.Property(e => e.Propagar)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ProtegeFechaCruce)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RefAuxRequerido)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Reg500s)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Reg557Mixto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RestHorario).IsUnicode(false);

                entity.Property(e => e.RestHorarioPassword).IsUnicode(false);

                entity.Property(e => e.RfcServicios).IsUnicode(false);

                entity.Property(e => e.RutaArchivoAux).IsUnicode(false);

                entity.Property(e => e.RutaArchivoAux2).IsUnicode(false);

                entity.Property(e => e.RutaArchivoAux3).IsUnicode(false);

                entity.Property(e => e.RutaArchivoAux4).IsUnicode(false);

                entity.Property(e => e.RutaArchivoAux5).IsUnicode(false);

                entity.Property(e => e.RutaArchivosDat).IsUnicode(false);

                entity.Property(e => e.RutaDigPedFirmaBanco).IsUnicode(false);

                entity.Property(e => e.RutaDigitalizarFactura).IsUnicode(false);

                entity.Property(e => e.RutaFirmaElectronica).IsUnicode(false);

                entity.Property(e => e.RutaGuardarAnexo24).IsUnicode(false);

                entity.Property(e => e.RutaModuloPedimentos).IsUnicode(false);

                entity.Property(e => e.RutaModuloTraficos).IsUnicode(false);

                entity.Property(e => e.RutaNotaRevision).IsUnicode(false);

                entity.Property(e => e.RutaPedAuto).IsUnicode(false);

                entity.Property(e => e.RutaValidador).IsUnicode(false);

                entity.Property(e => e.RutaXml).IsUnicode(false);

                entity.Property(e => e.SagarError).IsUnicode(false);

                entity.Property(e => e.SagarError2).IsUnicode(false);

                entity.Property(e => e.SagarError3).IsUnicode(false);

                entity.Property(e => e.SagarError4).IsUnicode(false);

                entity.Property(e => e.SagarErrorAux).IsUnicode(false);

                entity.Property(e => e.SagarValidAux).IsUnicode(false);

                entity.Property(e => e.SagarValidacion).IsUnicode(false);

                entity.Property(e => e.SagarValidacion2).IsUnicode(false);

                entity.Property(e => e.SagarValidacion3).IsUnicode(false);

                entity.Property(e => e.SagarValidacion4).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SeccionBod)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SeccionRequerida).IsUnicode(false);

                entity.Property(e => e.ShcpError).IsUnicode(false);

                entity.Property(e => e.ShcpError2).IsUnicode(false);

                entity.Property(e => e.ShcpError3).IsUnicode(false);

                entity.Property(e => e.ShcpError4).IsUnicode(false);

                entity.Property(e => e.ShcpErrorAux).IsUnicode(false);

                entity.Property(e => e.ShcpValidAux).IsUnicode(false);

                entity.Property(e => e.ShcpValidacion).IsUnicode(false);

                entity.Property(e => e.ShcpValidacion2).IsUnicode(false);

                entity.Property(e => e.ShcpValidacion3).IsUnicode(false);

                entity.Property(e => e.ShcpValidacion4).IsUnicode(false);

                entity.Property(e => e.SisFea).IsUnicode(false);

                entity.Property(e => e.Situacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SmtpEncryptType).IsUnicode(false);

                entity.Property(e => e.SmtpFrom).IsUnicode(false);

                entity.Property(e => e.SmtpMail).IsUnicode(false);

                entity.Property(e => e.SmtpPassword).IsUnicode(false);

                entity.Property(e => e.SmtpServer).IsUnicode(false);

                entity.Property(e => e.SumPesoBulto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoArribo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPrev)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.TipoTasaCertificado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTasaRec)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTasaRecA3).IsUnicode(false);

                entity.Property(e => e.TrafEmbarque)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsaWms)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValBotonBulTra)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValidaCopiaDescripcion).IsUnicode(false);

                entity.Property(e => e.ValidaSelloEmbarque)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValidaTraficoCalculo).IsUnicode(false);

                entity.Property(e => e.ValidacionPedimentos)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValidarCantTarifa).IsUnicode(false);

                entity.Property(e => e.ValidarClienteProveedor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValidarFirmas)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValidarFormatoFecha)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ValidarVigencia).IsUnicode(false);

                entity.Property(e => e.ValorAgregado).IsUnicode(false);

                entity.Property(e => e.ValorSeguroMayor).IsUnicode(false);
            });

            modelBuilder.Entity<Fgenerales2>(entity =>
            {
                entity.HasKey(e => e.LeyendaInstruccionesEmbarque)
                    .HasName("PK__fgeneral__0B84ED73358F8408");

                entity.Property(e => e.LeyendaInstruccionesEmbarque)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.ActivaCamposPedPagado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ActivarRespaldoArchivos).IsUnicode(false);

                entity.Property(e => e.ActualizaFacturasPartidas).IsUnicode(false);

                entity.Property(e => e.AutoDoda)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AutorizaPagoBanco).IsUnicode(false);

                entity.Property(e => e.AutorizaValidacion).IsUnicode(false);

                entity.Property(e => e.AutorizarModifImpuestos).IsUnicode(false);

                entity.Property(e => e.AvisoAnexo10).IsUnicode(false);

                entity.Property(e => e.AvisoConsoPedCerrado).IsUnicode(false);

                entity.Property(e => e.BloquearPedimento).IsUnicode(false);

                entity.Property(e => e.BloqueoBotonesRelacionDocs).IsUnicode(false);

                entity.Property(e => e.BloqueoCamposClasificacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BultosCompletos).IsUnicode(false);

                entity.Property(e => e.BusquedaProductoPref).IsUnicode(false);

                entity.Property(e => e.Campo5).IsUnicode(false);

                entity.Property(e => e.CantidadesParte2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cfdi33).IsUnicode(false);

                entity.Property(e => e.ClienteConsec).IsUnicode(false);

                entity.Property(e => e.ClienteProveedor).IsUnicode(false);

                entity.Property(e => e.ConsistenciaCove).IsUnicode(false);

                entity.Property(e => e.ContrasenaIepsPagobanco).IsUnicode(false);

                entity.Property(e => e.ContrasenaIgiPagobanco).IsUnicode(false);

                entity.Property(e => e.ContrasenaSdf).IsUnicode(false);

                entity.Property(e => e.CopiaSimple)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CopiaTransportistaPIi).IsUnicode(false);

                entity.Property(e => e.CopiaVehiculosConsolidado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CopiarCantTarif).IsUnicode(false);

                entity.Property(e => e.CorreoNotificacionEmbarque).IsUnicode(false);

                entity.Property(e => e.CorreoPedSimp).IsUnicode(false);

                entity.Property(e => e.Cove).IsUnicode(false);

                entity.Property(e => e.CvesRegPedSimp).IsUnicode(false);

                entity.Property(e => e.DatosVehicParteii).IsUnicode(false);

                entity.Property(e => e.DiferenciaCoveRemesa).IsUnicode(false);

                entity.Property(e => e.DigDodaImprimir).IsUnicode(false);

                entity.Property(e => e.DodaCombinarRemesas).IsUnicode(false);

                entity.Property(e => e.DodaDespachoAduanero).IsUnicode(false);

                entity.Property(e => e.DodaSellosPart2).IsUnicode(false);

                entity.Property(e => e.DodaSellosPedn).IsUnicode(false);

                entity.Property(e => e.DodaqrD1).IsUnicode(false);

                entity.Property(e => e.DodaqrD2).IsUnicode(false);

                entity.Property(e => e.DodaqrUrl).IsUnicode(false);

                entity.Property(e => e.EnvioCentralizado).IsUnicode(false);

                entity.Property(e => e.EtiquetaUsuario)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FacturaProductosMultiples).IsUnicode(false);

                entity.Property(e => e.FichaFraccionRestriccion).IsUnicode(false);

                entity.Property(e => e.GuiasRepetidasBodega).IsUnicode(false);

                entity.Property(e => e.HorarioVerano)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdentObliClasTraf).IsUnicode(false);

                entity.Property(e => e.IdentTlPoClasProd).IsUnicode(false);

                entity.Property(e => e.IepsClasificacion).IsUnicode(false);

                entity.Property(e => e.Immex).IsUnicode(false);

                entity.Property(e => e.IvaAnexo27).IsUnicode(false);

                entity.Property(e => e.IvaEfectivo).IsUnicode(false);

                entity.Property(e => e.LeerM3PedRepetido).IsUnicode(false);

                entity.Property(e => e.LeyendaAduanaEmbarque).IsUnicode(false);

                entity.Property(e => e.LeyendaImpPartesii).IsUnicode(false);

                entity.Property(e => e.MedioTransporteDefaultBodega).IsUnicode(false);

                entity.Property(e => e.MismoArchivoResp).IsUnicode(false);

                entity.Property(e => e.NoPedimentos)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Oficina).IsUnicode(false);

                entity.Property(e => e.PassAutorizaIrs).IsUnicode(false);

                entity.Property(e => e.PasswordAnexo10).IsUnicode(false);

                entity.Property(e => e.PasswordImmex).IsUnicode(false);

                entity.Property(e => e.PasswordIvaEfectivo).IsUnicode(false);

                entity.Property(e => e.PasswordRfcCliente).IsUnicode(false);

                entity.Property(e => e.PasswordTaxidRepetido).IsUnicode(false);

                entity.Property(e => e.PatenteAduanaUsuario).IsUnicode(false);

                entity.Property(e => e.PrefijoDoda).IsUnicode(false);

                entity.Property(e => e.ProveedorConsec).IsUnicode(false);

                entity.Property(e => e.RemesaTerrestreDoda).IsUnicode(false);

                entity.Property(e => e.RevisaCovePedimento).IsUnicode(false);

                entity.Property(e => e.RutaDigPedCompImp).IsUnicode(false);

                entity.Property(e => e.RutaReporteMensualLight).IsUnicode(false);

                entity.Property(e => e.RutaRespaldoArchivos).IsUnicode(false);

                entity.Property(e => e.Sextaenmienda)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SubirFracXml).IsUnicode(false);

                entity.Property(e => e.ValPago).IsUnicode(false);

                entity.Property(e => e.ValidaBuquesMar).IsUnicode(false);

                entity.Property(e => e.ValidaContenedor).IsUnicode(false);

                entity.Property(e => e.ValidaContenedores).IsUnicode(false);

                entity.Property(e => e.ValidaCoveDoda).IsUnicode(false);

                entity.Property(e => e.ValidaPrecioEstimado).IsUnicode(false);

                entity.Property(e => e.ValidaVehiculoPassword).IsUnicode(false);

                entity.Property(e => e.ValidaVehiculoPd).IsUnicode(false);

                entity.Property(e => e.ValidarFracVulnerables).IsUnicode(false);

                entity.Property(e => e.ValidarIepsPagobanco).IsUnicode(false);

                entity.Property(e => e.ValidarIgiPagobanco).IsUnicode(false);

                entity.Property(e => e.ValidarSintaxisContenedor).IsUnicode(false);

                entity.Property(e => e.Vlight).IsUnicode(false);
            });

            modelBuilder.Entity<FgeneralesAviso>(entity =>
            {
                entity.Property(e => e.RutaIn)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RutaOut)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<FgeneralesCove>(entity =>
            {
                entity.Property(e => e.ActivarExpedienteDigital).IsUnicode(false);

                entity.Property(e => e.Cove).IsUnicode(false);

                entity.Property(e => e.CovePrefijo).IsUnicode(false);

                entity.Property(e => e.CovesNoPedimento).IsUnicode(false);

                entity.Property(e => e.DeclaracionObservaciones)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.DeclaracionObservacionesLeyenda).IsUnicode(false);

                entity.Property(e => e.DescripcionMercancia).IsUnicode(false);

                entity.Property(e => e.DigPrefijo).IsUnicode(false);

                entity.Property(e => e.FirmarAaVirtual).IsUnicode(false);

                entity.Property(e => e.FtpFolder).IsUnicode(false);

                entity.Property(e => e.FtpPassword).IsUnicode(false);

                entity.Property(e => e.FtpServer).IsUnicode(false);

                entity.Property(e => e.FtpUser).IsUnicode(false);

                entity.Property(e => e.MonitoreoClaa).IsUnicode(false);

                entity.Property(e => e.MonitoreoVucem).IsUnicode(false);

                entity.Property(e => e.MoverArchivos).IsUnicode(false);

                entity.Property(e => e.Msxml6).IsUnicode(false);

                entity.Property(e => e.ObservacionesCove).IsUnicode(false);

                entity.Property(e => e.ObservacionesDestinatario).IsUnicode(false);

                entity.Property(e => e.PasswordEliminar).IsUnicode(false);

                entity.Property(e => e.ProdMercanciaCove).IsUnicode(false);

                entity.Property(e => e.ProtegerCampos).IsUnicode(false);

                entity.Property(e => e.Proxy)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.ProxyPassword)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProxyPort).IsUnicode(false);

                entity.Property(e => e.ProxyUrl).IsUnicode(false);

                entity.Property(e => e.ProxyUser)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RectificacionRemesaFactura)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.RemesaFactura).IsUnicode(false);

                entity.Property(e => e.RenombrarPdf).IsUnicode(false);

                entity.Property(e => e.RutaArchivosPdfCoved).IsUnicode(false);

                entity.Property(e => e.RutaArchivosXmlCove).IsUnicode(false);

                entity.Property(e => e.RutaDigitalizacion).IsUnicode(false);

                entity.Property(e => e.RutaEdocuments).IsUnicode(false);

                entity.Property(e => e.RutaInCove).IsUnicode(false);

                entity.Property(e => e.RutaOutCove).IsUnicode(false);

                entity.Property(e => e.RutaRegeneracionXmlCove).IsUnicode(false);

                entity.Property(e => e.RutaReporteCove).IsUnicode(false);

                entity.Property(e => e.RutaRespaldoXmlCove).IsUnicode(false);

                entity.Property(e => e.RutaXml).IsUnicode(false);

                entity.Property(e => e.RutaXmlGenerales).IsUnicode(false);

                entity.Property(e => e.ValidarCaracteresAutomatico).IsUnicode(false);
            });

            modelBuilder.Entity<FgeneralesRuta>(entity =>
            {
                entity.HasKey(e => new { e.IdAduana, e.Seccion, e.IdPatente })
                    .HasName("pk_fgenerales_rutas");

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.Seccion).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.BancoError).IsUnicode(false);

                entity.Property(e => e.BancoValidacion).IsUnicode(false);

                entity.Property(e => e.PrevalidacionError).IsUnicode(false);

                entity.Property(e => e.SagarError).IsUnicode(false);

                entity.Property(e => e.SagarValidacion).IsUnicode(false);

                entity.Property(e => e.ShcpError).IsUnicode(false);

                entity.Property(e => e.ShcpValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<Fgfactura>(entity =>
            {
                entity.HasKey(e => new { e.IdEntradaBodega, e.IdFactura, e.IdPackList, e.IdProveedor })
                    .HasName("pk_fgfactura");

                entity.Property(e => e.IdEntradaBodega).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdPackList).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.AmazonShipId).IsUnicode(false);

                entity.Property(e => e.DestinoIcoterm).IsUnicode(false);

                entity.Property(e => e.Edocument).IsUnicode(false);

                entity.Property(e => e.EntradaOriginal).IsUnicode(false);

                entity.Property(e => e.EstadoFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FactorEmbalaje).HasDefaultValueSql("((1))");

                entity.Property(e => e.FacturaAux).IsUnicode(false);

                entity.Property(e => e.FacturaOriginal).IsUnicode(false);

                entity.Property(e => e.Familia).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdMonedaDescuento).IsUnicode(false);

                entity.Property(e => e.IdMonedaEmbalaje)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('USD')");

                entity.Property(e => e.IdMonedaEmbalajeMv).IsUnicode(false);

                entity.Property(e => e.IdMonedaFlete).IsUnicode(false);

                entity.Property(e => e.IdMonedaFleteMv).IsUnicode(false);

                entity.Property(e => e.IdMonedaOtros).IsUnicode(false);

                entity.Property(e => e.IdMonedaOtrosMv).IsUnicode(false);

                entity.Property(e => e.IdMonedaSeguro).IsUnicode(false);

                entity.Property(e => e.IdMonedaSeguroMv).IsUnicode(false);

                entity.Property(e => e.IdPaisMoneda).IsUnicode(false);

                entity.Property(e => e.IdProforma).IsUnicode(false);

                entity.Property(e => e.IdRefCove).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdTipo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdTipoFactura).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRev).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.IdUsuarioValCfdi).IsUnicode(false);

                entity.Property(e => e.ImporteEmbalaje).HasDefaultValueSql("((0))");

                entity.Property(e => e.ImporteFleteMv).HasDefaultValueSql("((0))");

                entity.Property(e => e.ImporteOtrosMv).HasDefaultValueSql("((0))");

                entity.Property(e => e.ImporteSeguroMv).HasDefaultValueSql("((0))");

                entity.Property(e => e.Inbond)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Mayuscula)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NotificacionCorreo).IsUnicode(false);

                entity.Property(e => e.PedimentoOriginal).IsUnicode(false);

                entity.Property(e => e.Planta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ProveedorCertifica).IsUnicode(false);

                entity.Property(e => e.RfcReceptor).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.SalesOrder).IsUnicode(false);

                entity.Property(e => e.Situacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Transportista).IsUnicode(false);

                entity.Property(e => e.UsuarioAutoriza).IsUnicode(false);

                entity.Property(e => e.Vinculacion).IsUnicode(false);

                entity.HasOne(d => d.IdProveedorNavigation)
                    .WithMany(p => p.Fgfacturas)
                    .HasForeignKey(d => d.IdProveedor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fgfactura");

                entity.HasOne(d => d.IdTipoFacturaNavigation)
                    .WithMany(p => p.Fgfacturas)
                    .HasForeignKey(d => d.IdTipoFactura)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk3_fgfactura");
            });

            modelBuilder.Entity<FgfacturaElect>(entity =>
            {
                entity.HasKey(e => new { e.IdFactura, e.IdPackList, e.IdCliente, e.CveTipoOpn, e.IdProveedor });

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdPackList).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdEntradaBodega).IsUnicode(false);

                entity.Property(e => e.IdPaisMoneda).IsUnicode(false);

                entity.Property(e => e.IdTipoFactura).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.NumeroCaja).IsUnicode(false);

                entity.Property(e => e.Situacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Transportista).IsUnicode(false);
            });

            modelBuilder.Entity<FgfacturaSalesOrder>(entity =>
            {
                entity.HasKey(e => new { e.IdEntradaBodega, e.IdFactura, e.IdPackList, e.IdProveedor, e.IdOrden })
                    .HasName("pk_fgfactura_sales_order");

                entity.Property(e => e.IdEntradaBodega).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdPackList).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdOrden).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<FgordenCompra>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdOrdenCompra })
                    .HasName("pk_fgorden_compra");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdOrdenCompra).IsUnicode(false);

                entity.Property(e => e.ElaboradaPor).IsUnicode(false);

                entity.Property(e => e.IdPaisMoneda).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModificacion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Fgrupo>(entity =>
            {
                entity.Property(e => e.IdGrupo).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FgrupoCliente>(entity =>
            {
                entity.HasKey(e => new { e.IdGrupo, e.IdCliente });

                entity.Property(e => e.IdGrupo).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);
            });

            modelBuilder.Entity<FgrupoUsuario>(entity =>
            {
                entity.HasKey(e => new { e.IdGrupo, e.IdUsuario });

                entity.Property(e => e.IdGrupo).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<Fgtrafico>(entity =>
            {
                entity.HasKey(e => e.IdTrafico)
                    .HasName("pk_fgtrafico");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.ClasficacionModif).IsUnicode(false);

                entity.Property(e => e.Clasificador).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EntryNumber).IsUnicode(false);

                entity.Property(e => e.FactorOtrosBod).HasDefaultValueSql("(1)");

                entity.Property(e => e.FacturaPackList)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdConsignatario).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdMonedaComercial).IsUnicode(false);

                entity.Property(e => e.IdMonedaFlete).IsUnicode(false);

                entity.Property(e => e.IdMonedaFleteNi).IsUnicode(false);

                entity.Property(e => e.IdMonedaFrontera).IsUnicode(false);

                entity.Property(e => e.IdMonedaOtros).IsUnicode(false);

                entity.Property(e => e.IdMonedaOtrosBod)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('USD')");

                entity.Property(e => e.IdMonedaSeguro).IsUnicode(false);

                entity.Property(e => e.IdMonedaSeguroNi).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdPaisVendedor).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdPedimento).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdTipoPedimento).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Inbond)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.NoPoliza).IsUnicode(false);

                entity.Property(e => e.ObservacionPedim).IsUnicode(false);

                entity.Property(e => e.OpEspecial).IsUnicode(false);

                entity.Property(e => e.OtrosGastosBod).HasDefaultValueSql("(0)");

                entity.Property(e => e.PlantCode).IsUnicode(false);

                entity.Property(e => e.Prorrateo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReferenciaAux).IsUnicode(false);

                entity.Property(e => e.Remesa).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.SeccionAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Situacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOpn)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TraficoVulnerable).IsUnicode(false);

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Fgtraficos)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk7_fgtrafico");
            });

            modelBuilder.Entity<FgtraficoObservacion>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.Secuencial });

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.Observacion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FhojaCalculo>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.ApellidoM).IsUnicode(false);

                entity.Property(e => e.ApellidoP).IsUnicode(false);

                entity.Property(e => e.CompraVenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Contraprestaciones)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdContacto).IsUnicode(false);

                entity.Property(e => e.IdUsuarioReg).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUtlMod).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.Restricciones)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReversionesRegalias)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.UnicaVincu)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FidentificadorNoFactorActualizacion>(entity =>
            {
                entity.HasKey(e => new { e.TipoCaso, e.IdenCaso })
                    .HasName("identificador_no_factor_actualizacion");

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdenCaso).IsUnicode(false);
            });

            modelBuilder.Entity<Fimpuesto>(entity =>
            {
                entity.HasKey(e => e.IdImpuesto)
                    .HasName("pk_fimpuesto");

                entity.Property(e => e.IdImpuesto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescAbreviado).IsUnicode(false);

                entity.Property(e => e.DescripcionImp).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Findie>(entity =>
            {
                entity.HasKey(e => new { e.IdAnio, e.IdMes })
                    .HasName("pk_findice");

                entity.Property(e => e.IdAnio).IsUnicode(false);

                entity.Property(e => e.IdMes).IsUnicode(false);
            });

            modelBuilder.Entity<Flaboratorio>(entity =>
            {
                entity.Property(e => e.ClaveLab)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FlectorCimex>(entity =>
            {
                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.Serie).IsUnicode(false);
            });

            modelBuilder.Entity<FleyendaCalculo>(entity =>
            {
                entity.HasKey(e => e.IdLeyenda)
                    .HasName("PK__fleyenda__817F20955359B2A7");

                entity.Property(e => e.IdLeyenda).IsUnicode(false);

                entity.Property(e => e.RfcServicios).IsUnicode(false);
            });

            modelBuilder.Entity<FleyendaPedimento>(entity =>
            {
                entity.HasKey(e => e.IdLeyendaPedimento)
                    .HasName("pk_fleyenda_pedimento");

                entity.Property(e => e.IdLeyendaPedimento).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FleyendaSistema>(entity =>
            {
                entity.HasKey(e => e.FerrocarrilAviso)
                    .HasName("pk_fleyenda_sistema");

                entity.Property(e => e.FerrocarrilAviso).IsUnicode(false);

                entity.Property(e => e.CartaSubdivision).IsUnicode(false);

                entity.Property(e => e.MensajeArticulos).IsUnicode(false);

                entity.Property(e => e.MensajeArticulos2).IsUnicode(false);

                entity.Property(e => e.NotificacionPagoBanco).IsUnicode(false);

                entity.Property(e => e.OrdenRemision).IsUnicode(false);

                entity.Property(e => e.OrdenRemisionTransportista).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FlimiteCliente>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdRegimen, e.CveTipoOperacion });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LimitePagoElec).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<FlineaFletera>(entity =>
            {
                entity.HasKey(e => e.IdLineaFletera)
                    .HasName("pk_flinea_fletera");

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.Caat).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CarrierCode).IsUnicode(false);

                entity.Property(e => e.CodPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.CtPat).IsUnicode(false);

                entity.Property(e => e.Curp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.CveTipoLinea)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTipoTransporte)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.IdEstado).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdPais).IsUnicode(false);

                entity.Property(e => e.IdTipoFlete).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.IdentTransporte).IsUnicode(false);

                entity.Property(e => e.LineaFast).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.RazonSocialAbreviada).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);

                entity.Property(e => e.Telefono3).IsUnicode(false);

                entity.Property(e => e.Telefono4).IsUnicode(false);

                entity.Property(e => e.TransferScac).IsUnicode(false);

                entity.Property(e => e.VerificadoPor)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.HasOne(d => d.IdMunicipioNavigation)
                    .WithMany(p => p.FlineaFleteras)
                    .HasForeignKey(d => d.IdMunicipio)
                    .HasConstraintName("fk1_flinea_fletera");

                entity.HasOne(d => d.IdUsuarioRegistroNavigation)
                    .WithMany(p => p.FlineaFleteras)
                    .HasForeignKey(d => d.IdUsuarioRegistro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_flinea_fletera");
            });

            modelBuilder.Entity<FmanifestacionAnexos65>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial })
                    .HasName("PK__fmanifes__864929D09A7C3E3D");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Documento).IsUnicode(false);
            });

            modelBuilder.Entity<Fmanifestacione>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.AnexaDocumentacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AnexoManifestacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ApellidoM).IsUnicode(false);

                entity.Property(e => e.ApellidoP).IsUnicode(false);

                entity.Property(e => e.DescripcionDocumentacion).IsUnicode(false);

                entity.Property(e => e.Fanexo1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fanexo2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fanexo3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fanexo4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fanexo5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fanexo6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FirmaAutografa).IsUnicode(false);

                entity.Property(e => e.Fvalortransacciondemercancia).IsUnicode(false);

                entity.Property(e => e.IdContacto).IsUnicode(false);

                entity.Property(e => e.IdUsuarioReg).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUtlMod).IsUnicode(false);

                entity.Property(e => e.ImpTemp1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ImpTemp2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ImpTemp3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Metodo).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.NumeroHojas).IsUnicode(false);

                entity.Property(e => e.OtrosMetodosA)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OtrosMetodosB)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Puesto).IsUnicode(false);

                entity.Property(e => e.Razon).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.TipoMoneda).IsUnicode(false);

                entity.Property(e => e.Unica).IsUnicode(false);

                entity.Property(e => e.UsuarioRecep).IsUnicode(false);

                entity.Property(e => e.Valornoanexadoc).IsUnicode(false);
            });

            modelBuilder.Entity<FmedioTransporte>(entity =>
            {
                entity.Property(e => e.CveTransporte)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<Fmenu>(entity =>
            {
                entity.HasKey(e => new { e.IdProceso, e.Boton })
                    .HasName("PK__fmenu__0BDE34DC");

                entity.Property(e => e.IdProceso).IsUnicode(false);

                entity.Property(e => e.Boton)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Etiqueta).IsUnicode(false);

                entity.Property(e => e.Imagen).IsUnicode(false);

                entity.Property(e => e.Par1).IsUnicode(false);

                entity.Property(e => e.Par2).IsUnicode(false);

                entity.Property(e => e.Par3).IsUnicode(false);

                entity.Property(e => e.Ruta).IsUnicode(false);

                entity.Property(e => e.Ventana).IsUnicode(false);

                entity.Property(e => e.Visible)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FmercanciaLight>(entity =>
            {
                entity.HasKey(e => new { e.IdEmbarque, e.IdTipoVehiculo, e.NumVehiculo, e.IdCliente, e.IdDestino, e.IdReferencia, e.IdRectificacion, e.Consecutivo })
                    .HasName("pk_fmercancia_light");

                entity.Property(e => e.IdEmbarque)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdTipoVehiculo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumVehiculo).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);
            });

            modelBuilder.Entity<FmercanciaLog>(entity =>
            {
                entity.Property(e => e.Accion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdDoctoOrigen)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumVehiculo).IsUnicode(false);
            });

            modelBuilder.Entity<Fmercancium>(entity =>
            {
                entity.HasKey(e => new { e.IdEmbarque, e.IdTipoVehiculo, e.NumVehiculo, e.IdCliente, e.IdDestino, e.IdDoctoOrigen })
                    .HasName("pk_fmercancia");

                entity.Property(e => e.IdEmbarque)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdTipoVehiculo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumVehiculo).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdDoctoOrigen)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FmonedaFactor>(entity =>
            {
                entity.HasKey(e => new { e.IdAnio, e.IdMes, e.IdMoneda })
                    .HasName("pk_fmoneda_factor")
                    .IsClustered(false);

                entity.Property(e => e.IdAnio).IsUnicode(false);

                entity.Property(e => e.IdMes).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FmotivoR1>(entity =>
            {
                entity.Property(e => e.IdMotivo).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.UsuarioReq)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FmovimentoComandum>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdConcepto })
                    .HasName("pk_fmovimento_comanda");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdConcepto).IsUnicode(false);

                entity.Property(e => e.CveFacturada)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdComanda).IsUnicode(false);

                entity.Property(e => e.IdTipoConcepto).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Referencias).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FmovimientoBodega>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoMovto, e.IdDoctoOrigen, e.NumeroMovto })
                    .HasName("pk_fmovimiento_bodega");

                entity.Property(e => e.IdTipoMovto).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDoctoReferencia).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);
            });

            modelBuilder.Entity<Fmunicipio>(entity =>
            {
                entity.HasKey(e => e.IdMunicipio)
                    .HasName("pk_fmunicipio");

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.CveMunicipio).IsUnicode(false);

                entity.Property(e => e.DescBreve).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdEstado).IsUnicode(false);

                entity.Property(e => e.Inactivo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IdEstadoNavigation)
                    .WithMany(p => p.Fmunicipios)
                    .HasForeignKey(d => d.IdEstado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fmunicipio");
            });

            modelBuilder.Entity<FnoPedimento>(entity =>
            {
                entity.HasKey(e => new { e.IdDocumento, e.IdFolio });

                entity.Property(e => e.IdDocumento).IsUnicode(false);

                entity.Property(e => e.IdFolio).IsUnicode(false);

                entity.Property(e => e.ClaseDocto).IsUnicode(false);

                entity.Property(e => e.ClaveSeg).IsUnicode(false);

                entity.Property(e => e.FirmaBanco).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdBanco).IsUnicode(false);

                entity.Property(e => e.IdOficina)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.Identificador).IsUnicode(false);

                entity.Property(e => e.NumeroCaja).IsUnicode(false);

                entity.Property(e => e.NumeroNoPed).IsUnicode(false);

                entity.Property(e => e.NumeroOpn).IsUnicode(false);

                entity.Property(e => e.RfcImp).IsUnicode(false);

                entity.Property(e => e.Seccion).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Turno)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FnoPedimentoDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdDocumento, e.Secuencial });

                entity.Property(e => e.IdDocumento).IsUnicode(false);

                entity.Property(e => e.ClaveImpuesto).IsUnicode(false);

                entity.Property(e => e.FormaPago).IsUnicode(false);
            });

            modelBuilder.Entity<FnoelecCliente>(entity =>
            {
                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FnoelecClienteAduana>(entity =>
            {
                entity.HasKey(e => e.IdCliente)
                    .IsClustered(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Fnomenclatura>(entity =>
            {
                entity.Property(e => e.TipoReporte).IsUnicode(false);

                entity.Property(e => e.Nomenclatura).IsUnicode(false);
            });

            modelBuilder.Entity<FnumerosDeOrden>(entity =>
            {
                entity.HasKey(e => new { e.Archivo, e.NumeroOrden })
                    .HasName("pk_numeros_orden");

                entity.Property(e => e.Archivo).IsUnicode(false);

                entity.Property(e => e.NumeroOrden).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<Fobjeto>(entity =>
            {
                entity.HasKey(e => e.IdObjeto)
                    .HasName("pk_fobjeto");

                entity.Property(e => e.IdObjeto).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);
            });

            modelBuilder.Entity<Fobjeto1>(entity =>
            {
                entity.HasKey(e => new { e.IdProceso, e.IdObjeto });

                entity.Property(e => e.IdProceso).IsUnicode(false);

                entity.Property(e => e.IdObjeto).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Menu).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);
            });

            modelBuilder.Entity<Fobservacione>(entity =>
            {
                entity.HasKey(e => new { e.Leyenda, e.NumSecuencial, e.TipoLeyenda });

                entity.Property(e => e.Leyenda).IsUnicode(false);

                entity.Property(e => e.TipoLeyenda)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Observacion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FoliadorBc>(entity =>
            {
                entity.HasKey(e => new { e.Parametro, e.Sucursal, e.TipoFolio })
                    .HasName("PKfoliador_bc");

                entity.Property(e => e.Parametro).IsUnicode(false);

                entity.Property(e => e.Sucursal).IsUnicode(false);

                entity.Property(e => e.TipoFolio).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<FoliadorCliente>(entity =>
            {
                entity.HasKey(e => new { e.Sucursal, e.Cliente, e.TipoFolio })
                    .HasName("pk_foliador_cliente");

                entity.Property(e => e.Sucursal).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.TipoFolio).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);

                entity.HasOne(d => d.PrefijoNavigation)
                    .WithMany(p => p.FoliadorClientes)
                    .HasForeignKey(d => d.Prefijo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_foliador_cliente_fprefijos");
            });

            modelBuilder.Entity<FotosEmbarque>(entity =>
            {
                entity.HasKey(e => new { e.IdFoto, e.Embarque });

                entity.Property(e => e.IdFoto).ValueGeneratedOnAdd();

                entity.Property(e => e.Embarque).IsUnicode(false);

                entity.Property(e => e.RutaFoto).IsUnicode(false);
            });

            modelBuilder.Entity<FotosEntradum>(entity =>
            {
                entity.HasKey(e => new { e.IdFoto, e.Entrada });

                entity.Property(e => e.IdFoto).ValueGeneratedOnAdd();

                entity.Property(e => e.Entrada).IsUnicode(false);

                entity.Property(e => e.RutaFoto).IsUnicode(false);
            });

            modelBuilder.Entity<FotosReciboDamageLight>(entity =>
            {
                entity.HasKey(e => new { e.IdFoto, e.IdRecibo })
                    .HasName("PK__fotos_re__D3FC6FBE50BC0A2A");

                entity.Property(e => e.IdFoto).ValueGeneratedOnAdd();

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.RutaFoto).IsUnicode(false);
            });

            modelBuilder.Entity<FotosReciboLight>(entity =>
            {
                entity.HasKey(e => new { e.IdFoto, e.IdRecibo })
                    .HasName("PK__fotos_re__D3FC6FBE76E1B312");

                entity.Property(e => e.IdFoto).ValueGeneratedOnAdd();

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.RutaFoto).IsUnicode(false);
            });

            modelBuilder.Entity<FpagoGeneral>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdReferencia, e.IdRectificacion })
                    .HasName("pk_pago_general");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<FpagoGeneralManual>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion })
                    .HasName("pk_pago_general_manual");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdBanco).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.Identificador).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);
            });

            modelBuilder.Entity<Fpai>(entity =>
            {
                entity.HasKey(e => e.IdPais)
                    .HasName("pk_fpais");

                entity.Property(e => e.IdPais).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.CvePais).IsUnicode(false);

                entity.Property(e => e.DescBreve).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpaisConversion>(entity =>
            {
                entity.Property(e => e.IdPais).IsUnicode(false);

                entity.Property(e => e.IdPaisCom).IsUnicode(false);
            });

            modelBuilder.Entity<FparametrosChequeElectronico>(entity =>
            {
                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.NumBancoPed)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumCuenta).IsUnicode(false);

                entity.Property(e => e.PolizaElectronica).IsUnicode(false);

                entity.Property(e => e.SeccionAduana).IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FpedCartaCupo>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.AcuseElec).IsUnicode(false);

                entity.Property(e => e.FolioCarta).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FpedCartaCupoIdent>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdentCaso).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FpedCasoComple>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial })
                    .HasName("pk_pedcaso_comple");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);

                entity.Property(e => e.IdenCaso).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FpedComple>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion })
                    .HasName("pk_fped_comple");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Apoderado).IsUnicode(false);

                entity.Property(e => e.BancoNombre).IsUnicode(false);

                entity.Property(e => e.CajaBanco).IsUnicode(false);

                entity.Property(e => e.CurpAgAd).IsUnicode(false);

                entity.Property(e => e.CurpApoderado).IsUnicode(false);

                entity.Property(e => e.CurpImp).IsUnicode(false);

                entity.Property(e => e.CveRegimen).IsUnicode(false);

                entity.Property(e => e.DtaFormaPago).IsUnicode(false);

                entity.Property(e => e.DtaTipoTasa)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FirmaBanco)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FirmaPedimento).IsUnicode(false);

                entity.Property(e => e.FirmaShcp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdAduanaExp).IsUnicode(false);

                entity.Property(e => e.IdApoderado).IsUnicode(false);

                entity.Property(e => e.IdBanco).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdPatenteExp).IsUnicode(false);

                entity.Property(e => e.IdRegimenExp).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioGen).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltGen).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.NombreAgenteAd).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.OpnBanco)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Pedimento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PedimentoExp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrevalidacionFormaPago).IsUnicode(false);

                entity.Property(e => e.PrevalidacionTipoTasa).IsUnicode(false);

                entity.Property(e => e.Prevalidador).IsUnicode(false);

                entity.Property(e => e.RazonSocialCliente).IsUnicode(false);

                entity.Property(e => e.RazonSocialServicios).IsUnicode(false);

                entity.Property(e => e.RecargoFormaPago).IsUnicode(false);

                entity.Property(e => e.RecargoTipoTasa)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RfcAgAd).IsUnicode(false);

                entity.Property(e => e.RfcApoderado).IsUnicode(false);

                entity.Property(e => e.RfcCliente).IsUnicode(false);

                entity.Property(e => e.RfcServicios).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.RutaArchivo).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SeccionExp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoFiguraPed)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FpedCompleCompensacion>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.AduanaOri)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClaveOri)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PatenteOri).IsUnicode(false);

                entity.Property(e => e.PedimentoOri).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.SeccionOri)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FpedCompleCompensacionFpv>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumSecuencial });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdDocto).IsUnicode(false);

                entity.Property(e => e.NombreBanco).IsUnicode(false);
            });

            modelBuilder.Entity<FpedComplePermiso>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial, e.IdPermiso, e.NumeroPermiso, e.FirmaPermiso })
                    .HasName("pk_fped_comple_permiso");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.NumeroPermiso).IsUnicode(false);

                entity.Property(e => e.FirmaPermiso).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedComplementarioDiferencia>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion })
                    .HasName("pk_fped_complementario_diferencias");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.AdvaloremFormaPago1).IsUnicode(false);

                entity.Property(e => e.DtaFp1).IsUnicode(false);

                entity.Property(e => e.I303FormaPago1).IsUnicode(false);

                entity.Property(e => e.IvaFormaPago1).IsUnicode(false);

                entity.Property(e => e.PrevalidacionFormaPago).IsUnicode(false);

                entity.Property(e => e.RecargoFormaPago).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedDescargosComple>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.AduanaOriginal).IsUnicode(false);

                entity.Property(e => e.ClaveOriginal).IsUnicode(false);

                entity.Property(e => e.FraccionOriginal).IsUnicode(false);

                entity.Property(e => e.PatenteOriginal).IsUnicode(false);

                entity.Property(e => e.PedimentoOriginal).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.SeccionOriginal)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UnidadMOriginal).IsUnicode(false);
            });

            modelBuilder.Entity<FpedDetObserComple>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial, e.Secuencial })
                    .HasName("pk_det_obser_comple");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedDetalleComple>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial })
                    .HasName("pk_ped_detalle_comple");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedDetalleGravComple>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial, e.IdImpuesto, e.FormaPago });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdImpuesto).IsUnicode(false);

                entity.Property(e => e.FormaPago).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedDetalleImpComple>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial, e.Secuencial });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.CveUnidadTarifaEc).IsUnicode(false);

                entity.Property(e => e.IdFraccionEc).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedObserComple>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial })
                    .HasName("pk_observacion_comple");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedPruebaComple>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.PaisDestino, e.PedimentoEc });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.PaisDestino).IsUnicode(false);

                entity.Property(e => e.PedimentoEc).IsUnicode(false);

                entity.Property(e => e.Prueba)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedTasasComple>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdImpuesto, e.FormaPago });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdImpuesto).IsUnicode(false);

                entity.Property(e => e.FormaPago).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Fpedimento>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion })
                    .HasName("pk_fpedimento");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.AdvCtagtiaFp).IsUnicode(false);

                entity.Property(e => e.AdvaloremFormaPago1).IsUnicode(false);

                entity.Property(e => e.AdvaloremFormaPago2).IsUnicode(false);

                entity.Property(e => e.Apoderado).IsUnicode(false);

                entity.Property(e => e.Art303FormaPago).IsUnicode(false);

                entity.Property(e => e.AutorizacionContabilidad).IsUnicode(false);

                entity.Property(e => e.CajaBanco).IsUnicode(false);

                entity.Property(e => e.CalleCliente).IsUnicode(false);

                entity.Property(e => e.Campo12)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CertificadoFp).IsUnicode(false);

                entity.Property(e => e.ColoniaCliente).IsUnicode(false);

                entity.Property(e => e.CpCliente).IsUnicode(false);

                entity.Property(e => e.CuoCtagtiaFp).IsUnicode(false);

                entity.Property(e => e.CuotaCompFormaPago1).IsUnicode(false);

                entity.Property(e => e.CuotaCompFormaPago2).IsUnicode(false);

                entity.Property(e => e.CurpAgAd).IsUnicode(false);

                entity.Property(e => e.CurpApoderado).IsUnicode(false);

                entity.Property(e => e.CurpImp).IsUnicode(false);

                entity.Property(e => e.CveCalculoDta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveDestino)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CvePrevalidador).IsUnicode(false);

                entity.Property(e => e.CveRegimen).IsUnicode(false);

                entity.Property(e => e.CveTerceros)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTransporte)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Departamento).IsUnicode(false);

                entity.Property(e => e.DesbloquearFactura).IsUnicode(false);

                entity.Property(e => e.DescripcionAlmFiscal).IsUnicode(false);

                entity.Property(e => e.DtaCtagtiaFp).IsUnicode(false);

                entity.Property(e => e.DtaFp1).IsUnicode(false);

                entity.Property(e => e.DtaFp2).IsUnicode(false);

                entity.Property(e => e.EntidadFederativa).IsUnicode(false);

                entity.Property(e => e.Estado).IsUnicode(false);

                entity.Property(e => e.FirmaBanco)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FirmaDesistido)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FirmaPrecon)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FirmaShcp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FormaPagoEur).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdAduanaTransito).IsUnicode(false);

                entity.Property(e => e.IdAlmacenFiscal).IsUnicode(false);

                entity.Property(e => e.IdApoderado).IsUnicode(false);

                entity.Property(e => e.IdBanco).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdMonedaComercial).IsUnicode(false);

                entity.Property(e => e.IdMonedaFlete).IsUnicode(false);

                entity.Property(e => e.IdMonedaFleteNi).IsUnicode(false);

                entity.Property(e => e.IdMonedaFrontera).IsUnicode(false);

                entity.Property(e => e.IdMonedaOtros).IsUnicode(false);

                entity.Property(e => e.IdMonedaOtrosNi).IsUnicode(false);

                entity.Property(e => e.IdMonedaSeguro).IsUnicode(false);

                entity.Property(e => e.IdMonedaSeguroNi).IsUnicode(false);

                entity.Property(e => e.IdMonedaValora).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdPaisVendedor).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdPatenteTransito).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdTipoPedimento).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioFprecon).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Identificador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IepCtagtiaFp).IsUnicode(false);

                entity.Property(e => e.IepsFormaPago).IsUnicode(false);

                entity.Property(e => e.Inbond)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsaCtagtiaFp).IsUnicode(false);

                entity.Property(e => e.IsanFormaPago).IsUnicode(false);

                entity.Property(e => e.ItvFp).IsUnicode(false);

                entity.Property(e => e.IvaCtagtiaFp).IsUnicode(false);

                entity.Property(e => e.IvaFormaPago1).IsUnicode(false);

                entity.Property(e => e.IvaFormaPago2).IsUnicode(false);

                entity.Property(e => e.Liberado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MedioTransArribo).IsUnicode(false);

                entity.Property(e => e.MedioTransSalida).IsUnicode(false);

                entity.Property(e => e.MonedaIva).IsUnicode(false);

                entity.Property(e => e.MtFormaPago).IsUnicode(false);

                entity.Property(e => e.MultaFp).IsUnicode(false);

                entity.Property(e => e.MunicipioCliente).IsUnicode(false);

                entity.Property(e => e.NombreAutorizacion).IsUnicode(false);

                entity.Property(e => e.NotificacionPedimento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumeroCliente).IsUnicode(false);

                entity.Property(e => e.NumeroInterior).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.OpnBanco)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OpnBancoPece).IsUnicode(false);

                entity.Property(e => e.PaisImpExp).IsUnicode(false);

                entity.Property(e => e.Pedimento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PedimentoTransito)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PerEnvio).IsUnicode(false);

                entity.Property(e => e.PerFirma).IsUnicode(false);

                entity.Property(e => e.PlantCode).IsUnicode(false);

                entity.Property(e => e.PrevalidacionFirma).IsUnicode(false);

                entity.Property(e => e.PrevalidacionFormaPago).IsUnicode(false);

                entity.Property(e => e.RazonSocialCliente).IsUnicode(false);

                entity.Property(e => e.RazonSocialServicios).IsUnicode(false);

                entity.Property(e => e.RecargoEquivalenteFp).IsUnicode(false);

                entity.Property(e => e.RecargoFormaPago).IsUnicode(false);

                entity.Property(e => e.RecargoFormaPago2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.RecargoImporte2).HasDefaultValueSql("((0))");

                entity.Property(e => e.RectificacionExtemporanea)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ReferenciaAux).IsUnicode(false);

                entity.Property(e => e.RfcApoderado).IsUnicode(false);

                entity.Property(e => e.RfcCliente).IsUnicode(false);

                entity.Property(e => e.RfcServicios).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SeccionTransito)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Transpedimentos)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FpedimentoAutorizacion>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.FechaReg })
                    .HasName("PK__fpedimen__0E0CFB32397E1C8D");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdUsuarioAutoriza).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistra).IsUnicode(false);

                entity.Property(e => e.PedimentoNuevo).IsUnicode(false);

                entity.Property(e => e.PedimentoOriginal).IsUnicode(false);
            });

            modelBuilder.Entity<FpedimentoBulto>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion })
                    .HasName("pk_fpedimento_bulto");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoBultoDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial })
                    .HasName("pk_fpedimento_bulto_detalle");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.DescripcionMercancia).IsUnicode(false);

                entity.Property(e => e.Detalle).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdUnidad).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Numeros).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IdRe)
                    .WithMany(p => p.FpedimentoBultoDetalles)
                    .HasForeignKey(d => new { d.IdReferencia, d.IdRectificacion })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fpedimento_bulto_detalle");
            });

            modelBuilder.Entity<FpedimentoCaso>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial })
                    .HasName("pk_pedcaso");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);

                entity.Property(e => e.IdenCaso).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FpedimentoCompensacion>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.AduanaOri)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ClaveOri)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Numero)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.PatenteOri).IsUnicode(false);

                entity.Property(e => e.PedimentoOri).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.SeccionOri)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FpedimentoCompensacionFpv>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumSecuencial });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdDocto).IsUnicode(false);

                entity.Property(e => e.NombreBanco).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoContCopiaSimple>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Consecutivo, e.IdTipoVehiculo, e.IdNumeroVehiculo })
                    .HasName("pk_pedimento_cont_copia_simple");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.IdNumeroVehiculo).IsUnicode(false);
            });

            modelBuilder.Entity<FpedimentoContenedor>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial })
                    .HasName("pk_contenedor");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.NumContenedor).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoCopiaSimple>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Consecutivo })
                    .HasName("pk_pedimento_copia_simple");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Candados).IsUnicode(false);

                entity.Property(e => e.Contenedor).IsUnicode(false);

                entity.Property(e => e.Gafete).IsUnicode(false);

                entity.Property(e => e.Granel)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdNumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Oficio).IsUnicode(false);

                entity.Property(e => e.Sellos).IsUnicode(false);
            });

            modelBuilder.Entity<FpedimentoCopiaSimpleDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Consecutivo, e.Partida });

                entity.Property(e => e.IdReferencia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.UnidadComercial).IsUnicode(false);

                entity.Property(e => e.UnidadTarifa).IsUnicode(false);
            });

            modelBuilder.Entity<FpedimentoCuentaAduanera>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial })
                    .HasName("pk_cuentaadua");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.CveCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveGarantia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FolioCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InstEmisora)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoDescarga>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.SecuencialDescarga })
                    .HasName("pk_fpedimento_descarga");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.CvePedimentoOrig).IsUnicode(false);

                entity.Property(e => e.CveUnidadComercial).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FpedimentoDestinatario>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdProveedor })
                    .HasName("pk_pedimento_destinatario");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Entidad)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdPais).IsUnicode(false);

                entity.Property(e => e.Irs).IsUnicode(false);

                entity.Property(e => e.Municipio).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.NumeroInterior).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoDetCuentaAduanera>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial })
                    .HasName("pk_det_cuenta");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.CveGarantia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FolioCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InstEmisora)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumeroCuenta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial })
                    .HasName("pk_pedimento_detalle");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.AdvaloremFormaPago1).IsUnicode(false);

                entity.Property(e => e.AdvaloremFormaPago2).IsUnicode(false);

                entity.Property(e => e.CuotaCompFormaPago1).IsUnicode(false);

                entity.Property(e => e.CuotaCompFormaPago2).IsUnicode(false);

                entity.Property(e => e.CveTipoAdval)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveUnidadComercial).IsUnicode(false);

                entity.Property(e => e.CveUnidadTarifa).IsUnicode(false);

                entity.Property(e => e.DescripcionFraccion).IsUnicode(false);

                entity.Property(e => e.EntFederativaComprador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EntFederativaDestino)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EntFederativaOrigen)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EntFederativaVendedor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FolioAviso).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdMonedaValor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProductoFactura).IsUnicode(false);

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.IdVinculacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdentificacionVehiculo).IsUnicode(false);

                entity.Property(e => e.IepsFormaPago).IsUnicode(false);

                entity.Property(e => e.IsanFormaPago).IsUnicode(false);

                entity.Property(e => e.ItvFp).IsUnicode(false);

                entity.Property(e => e.IvaFormaPago1).IsUnicode(false);

                entity.Property(e => e.IvaFormaPago2).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.ModeloMercancia).IsUnicode(false);

                entity.Property(e => e.MtFormaPago).IsUnicode(false);

                entity.Property(e => e.NumeroDeOrden).IsUnicode(false);

                entity.Property(e => e.PagoDta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PaisOrigen).IsUnicode(false);

                entity.Property(e => e.PaisVendedor).IsUnicode(false);

                entity.Property(e => e.PrecioEstimado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sensible)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SubFraccion).IsUnicode(false);

                entity.Property(e => e.TasaIeps).IsUnicode(false);

                entity.Property(e => e.TipoArancel)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCuota)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoIeps)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMonedaIeps)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTasaCc).IsUnicode(false);

                entity.Property(e => e.UsoEdoMercancia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Valoracion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FpedimentoDetalle303>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial })
                    .HasName("pk_fpedimento_detalle_303");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.FormaPago).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoDetalleCaso>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial, e.NumeroIdentificador, e.TipoCaso });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);

                entity.Property(e => e.IdenCaso).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoDetalleCuentasGtium>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.AdvaloremFormaPago1).IsUnicode(false);

                entity.Property(e => e.CuotaFormaPago1).IsUnicode(false);

                entity.Property(e => e.DtaFormaPago1).IsUnicode(false);

                entity.Property(e => e.IepsFormaPago1).IsUnicode(false);

                entity.Property(e => e.IsanFormaPago1).IsUnicode(false);

                entity.Property(e => e.IvaFormaPago1).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoDetalleIep>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial, e.Secuencial })
                    .HasName("pk_det_ieps")
                    .IsClustered(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdImpuesto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IepsFormaPago).IsUnicode(false);

                entity.Property(e => e.TasaIeps).IsUnicode(false);

                entity.Property(e => e.TipoIeps)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMonedaIeps).IsUnicode(false);
            });

            modelBuilder.Entity<FpedimentoDetalleObservacion>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial, e.Secuencial })
                    .HasName("pk_det_observa");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<FpedimentoDiferencia>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion })
                    .HasName("pk_fpedimento_diferencias");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.AdvCtagtiaFp).IsUnicode(false);

                entity.Property(e => e.AdvaloremFormaPago1).IsUnicode(false);

                entity.Property(e => e.AdvaloremFormaPago2).IsUnicode(false);

                entity.Property(e => e.Art303FormaPago).IsUnicode(false);

                entity.Property(e => e.CertificadoFp).IsUnicode(false);

                entity.Property(e => e.CuoCtagtiaFp).IsUnicode(false);

                entity.Property(e => e.CuotaCompFormaPago1).IsUnicode(false);

                entity.Property(e => e.CuotaCompFormaPago2).IsUnicode(false);

                entity.Property(e => e.DtaCtagtiaFp).IsUnicode(false);

                entity.Property(e => e.DtaFp1).IsUnicode(false);

                entity.Property(e => e.DtaFp2).IsUnicode(false);

                entity.Property(e => e.IepCtagtiaFp).IsUnicode(false);

                entity.Property(e => e.IepsFormaPago).IsUnicode(false);

                entity.Property(e => e.IsaCtagtiaFp).IsUnicode(false);

                entity.Property(e => e.IsanFormaPago).IsUnicode(false);

                entity.Property(e => e.ItvFp).IsUnicode(false);

                entity.Property(e => e.IvaCtagtiaFp).IsUnicode(false);

                entity.Property(e => e.IvaFormaPago1).IsUnicode(false);

                entity.Property(e => e.IvaFormaPago2).IsUnicode(false);

                entity.Property(e => e.MtFormaPago).IsUnicode(false);

                entity.Property(e => e.MultaFp).IsUnicode(false);

                entity.Property(e => e.PrevalidacionFormaPago).IsUnicode(false);

                entity.Property(e => e.RecargoEquivalenteFp).IsUnicode(false);

                entity.Property(e => e.RecargoFormaPago).IsUnicode(false);

                entity.Property(e => e.RecargoFormaPago2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.RecargoImporte2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoError>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdTipoVal, e.Secuencial })
                    .HasName("pk_pedimento_error");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdTipoVal).IsUnicode(false);

                entity.Property(e => e.Campo).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Error).IsUnicode(false);

                entity.Property(e => e.Registro).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<FpedimentoFerrocarril>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.ReferenciaSecuencial, e.IdTrafico, e.FerrocarrilSecuencial })
                    .HasName("pk_pedimento_ferrocarril");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.CveUnidadComercial).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdTipoFactura).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);
            });

            modelBuilder.Entity<FpedimentoFumiga>(entity =>
            {
                entity.HasKey(e => new { e.Pedimento, e.IdAduana });

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.AgenteAduanal).IsUnicode(false);

                entity.Property(e => e.Apoderado).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Destino).IsUnicode(false);

                entity.Property(e => e.Empresa).IsUnicode(false);

                entity.Property(e => e.Folio).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.Lugar).IsUnicode(false);

                entity.Property(e => e.PaisOrigen).IsUnicode(false);

                entity.Property(e => e.PaisProc).IsUnicode(false);

                entity.Property(e => e.Producto).IsUnicode(false);

                entity.Property(e => e.RfcAa).IsUnicode(false);

                entity.Property(e => e.RfcApo).IsUnicode(false);

                entity.Property(e => e.TratamientoRec).IsUnicode(false);

                entity.Property(e => e.Vehiculos).IsUnicode(false);
            });

            modelBuilder.Entity<FpedimentoGuium>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial })
                    .HasName("pk_fpedimento_guia");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.CveTipoGuia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Guia).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoInbond>(entity =>
            {
                entity.HasKey(e => new { e.IdAduana, e.Seccion, e.Patente, e.Pedimento });

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.Firma).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdUsuarioReg).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoMercancium>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial, e.Serie });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Serie).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.Kilometraje).HasDefaultValueSql("(0)");

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoObservacion>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial })
                    .HasName("pk_observacion");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoParte2>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdTipoVehiculo, e.IdNumeroVehiculo })
                    .HasName("pk_pedimento_parte2");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.IdNumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.Campo5).IsUnicode(false);

                entity.Property(e => e.Contenedor).IsUnicode(false);

                entity.Property(e => e.Gondola)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Granel)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Sellos).IsUnicode(false);

                entity.Property(e => e.TipoSellos).IsUnicode(false);
            });

            modelBuilder.Entity<FpedimentoParte2Detalle>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdTipoVehiculo, e.IdNumeroVehiculo, e.Partida })
                    .HasName("pk_fpedimento_parte2_detalle");

                entity.Property(e => e.IdReferencia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.IdNumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.DescripcionFraccion1).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UnidadComercial).IsUnicode(false);

                entity.Property(e => e.UnidadTarifa).IsUnicode(false);
            });

            modelBuilder.Entity<FpedimentoParte2Niu>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdTipoVehiculo, e.NumeroVehiculo, e.Consecutivo, e.NumIdentUni });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.NumIdentUni).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoParte2Sellosm>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdTipoVehiculo, e.NumeroVehiculo, e.Sello, e.Consecutivo })
                    .HasName("PK__fpedimen__58FAA39156B431C1");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.Sello).IsUnicode(false);
            });

            modelBuilder.Entity<FpedimentoPermiso>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial, e.IdPermiso, e.NumeroPermiso, e.FirmaPermiso })
                    .HasName("pk_fpedimento_permiso");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.NumeroPermiso).IsUnicode(false);

                entity.Property(e => e.FirmaPermiso)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<FpedimentoRegla261>(entity =>
            {
                entity.HasKey(e => new { e.Aduana, e.Pedimento });

                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.AgenteAduanal).IsUnicode(false);

                entity.Property(e => e.Apoderado).IsUnicode(false);

                entity.Property(e => e.Asunto).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.Facturas).IsUnicode(false);

                entity.Property(e => e.Lugar).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Observaciones2).IsUnicode(false);

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.Proveedor).IsUnicode(false);

                entity.Property(e => e.RfcAa).IsUnicode(false);

                entity.Property(e => e.RfcApo).IsUnicode(false);

                entity.Property(e => e.RsAduana).IsUnicode(false);
            });

            modelBuilder.Entity<FpedimentoSello>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdTipoVehiculo, e.NumeroVehiculo, e.Sello, e.Consecutivo })
                    .HasName("pk_fpedimento_sello");

                entity.Property(e => e.IdReferencia)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.Sello).IsUnicode(false);

                entity.Property(e => e.BodegaDest).IsUnicode(false);

                entity.Property(e => e.Campo12)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Contacto).IsUnicode(false);

                entity.Property(e => e.Contingencia)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.CveEntradaAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DestinoFinal).IsUnicode(false);

                entity.Property(e => e.Edocument).IsUnicode(false);

                entity.Property(e => e.FechaRegistro).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Granel)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Guia).IsUnicode(false);

                entity.Property(e => e.GuiaAme).IsUnicode(false);

                entity.Property(e => e.GuiaMex).IsUnicode(false);

                entity.Property(e => e.IdApoderado).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdMonedaEmbalajeRem).IsUnicode(false);

                entity.Property(e => e.IdMonedaFleteRem).IsUnicode(false);

                entity.Property(e => e.IdMonedaOtrosRem).IsUnicode(false);

                entity.Property(e => e.IdMonedaSeguroRem).IsUnicode(false);

                entity.Property(e => e.IdTransportistaDestino).IsUnicode(false);

                entity.Property(e => e.IdTransportistaOrigen).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NumIdentUni).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Placas).IsUnicode(false);

                entity.Property(e => e.Prefile).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Transfer).IsUnicode(false);

                entity.Property(e => e.Transportista).IsUnicode(false);
            });

            modelBuilder.Entity<FpedimentoTipoCaso>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoCaso, e.PedPart })
                    .HasName("pk_pdmto_tipo_caso");

                entity.Property(e => e.IdTipoCaso).IsUnicode(false);

                entity.Property(e => e.PedPart)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoTipoContenedor>(entity =>
            {
                entity.HasKey(e => e.IdTipoContenedor)
                    .HasName("pk_tipo_contenedor");

                entity.Property(e => e.IdTipoContenedor).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoTrafico>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.ReferenciaSecuencial, e.IdTrafico, e.TraficoSecuencial })
                    .HasName("pk_fpedimento_trafico");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.CveUnidadComercial).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProductoFactura).IsUnicode(false);

                entity.Property(e => e.IdTipoFactura).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpedimentoTransportistum>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdLineaFletera, e.IdenTransporte })
                    .HasName("pk_fpedim_transp");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdenTransporte).IsUnicode(false);

                entity.Property(e => e.ApoderadoTrans).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.Curp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DomicilioFiscal).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdPais).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.Registro).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpermIdentEliminado>(entity =>
            {
                entity.Property(e => e.CveTipoOperacion).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.Norma).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<Fpermiso>(entity =>
            {
                entity.HasKey(e => e.IdPermiso)
                    .IsClustered(false);

                entity.HasIndex(e => e.Rowguid, "index_97435421")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.DescripcionPerm).IsUnicode(false);

                entity.Property(e => e.IdTipoPermiso).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IdTipoPermisoNavigation)
                    .WithMany(p => p.Fpermisos)
                    .HasForeignKey(d => d.IdTipoPermiso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fpermiso");
            });

            modelBuilder.Entity<FpermisoVigente>(entity =>
            {
                entity.HasKey(e => new { e.IdPermiso, e.Identificador })
                    .HasName("Pk_permiso_vigente");

                entity.Property(e => e.IdPermiso)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Identificador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdComp)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FpicudoDetalleFfrr>(entity =>
            {
                entity.HasKey(e => new { e.IdCruce, e.IdReferencia, e.IdRectificacion })
                    .HasName("pk_detalle_cruce");

                entity.Property(e => e.IdCruce).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FpicudoFfrr>(entity =>
            {
                entity.HasKey(e => e.IdCruce)
                    .HasName("pk_id_cruce");

                entity.Property(e => e.IdCruce).IsUnicode(false);

                entity.Property(e => e.IdAgenciaAduanal).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FplantaAutorizadum>(entity =>
            {
                entity.HasKey(e => new { e.CveUnica, e.CvePlanta });

                entity.Property(e => e.CveUnica).IsUnicode(false);

                entity.Property(e => e.CvePlanta).IsUnicode(false);

                entity.Property(e => e.CvePais).IsUnicode(false);

                entity.Property(e => e.Direccion).IsUnicode(false);

                entity.Property(e => e.Especie).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<FplantaTiff>(entity =>
            {
                entity.Property(e => e.CvePlanta).IsUnicode(false);

                entity.Property(e => e.Direccion).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Fplantum>(entity =>
            {
                entity.Property(e => e.Planta).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.PrefijoPlanta).IsUnicode(false);
            });

            modelBuilder.Entity<Fprefijo>(entity =>
            {
                entity.HasKey(e => e.IdPrefijo)
                    .HasName("pk_fprefijos");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Prefijo).IsUnicode(false);
            });

            modelBuilder.Entity<FprevioDet>(entity =>
            {
                entity.HasKey(e => new { e.IdPrevio, e.NumDetalle })
                    .HasName("pk_fprevio_det");

                entity.Property(e => e.IdPrevio).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdOrdenCompra).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdPaisVendedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Serie).IsUnicode(false);
            });

            modelBuilder.Entity<FprevioEnc>(entity =>
            {
                entity.HasKey(e => e.IdPrevio)
                    .HasName("pk_fprevio_enc");

                entity.Property(e => e.IdPrevio).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdEntradaBodega).IsUnicode(false);

                entity.Property(e => e.IdPaisMoneda).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdTipoFactura).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.NumeroCaja).IsUnicode(false);

                entity.Property(e => e.Situacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Fprocedimiento>(entity =>
            {
                entity.HasKey(e => new { e.IdObjeto, e.IdProcedimiento, e.TipoProcedimiento })
                    .HasName("pk_fprocedimiento");

                entity.Property(e => e.IdObjeto).IsUnicode(false);

                entity.Property(e => e.IdProcedimiento).IsUnicode(false);

                entity.Property(e => e.TipoProcedimiento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<Fproceso>(entity =>
            {
                entity.HasKey(e => e.IdProceso)
                    .HasName("pk_proceso");

                entity.Property(e => e.IdProceso).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Fproducto>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdProducto });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.Activo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Anexo10).IsUnicode(false);

                entity.Property(e => e.Anexo27).IsUnicode(false);

                entity.Property(e => e.Autorizado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Clasificado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Class).IsUnicode(false);

                entity.Property(e => e.Co)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Complemento).IsUnicode(false);

                entity.Property(e => e.ConIva)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CostoNeto).IsUnicode(false);

                entity.Property(e => e.Criterio)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveCartaJuram)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveCertOrigen)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveSeries)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTipoOpn)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.CveTlc)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescAbreviado).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionClas).IsUnicode(false);

                entity.Property(e => e.DescripcionClasificacionOpEsp).IsUnicode(false);

                entity.Property(e => e.Economia).IsUnicode(false);

                entity.Property(e => e.Fabricante)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Folio).IsUnicode(false);

                entity.Property(e => e.Hazmat).IsUnicode(false);

                entity.Property(e => e.HtsEdi).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdTipoMaterial).IsUnicode(false);

                entity.Property(e => e.IdUnidad).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModProdActivo).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModificacion).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.MarcaRegistrada).IsUnicode(false);

                entity.Property(e => e.NetCost)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumSolicitud).IsUnicode(false);

                entity.Property(e => e.OrigenMercancia).IsUnicode(false);

                entity.Property(e => e.PackingGroup).IsUnicode(false);

                entity.Property(e => e.PesoNetoKgs).HasDefaultValueSql("((0))");

                entity.Property(e => e.PrefCriterio)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Prio1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Prio2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Prio3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Producer)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Regla8va)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.ReqNumSerie).IsUnicode(false);

                entity.Property(e => e.RestriccionHorario).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Sku).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.TipoIeps)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoMonedaIeps)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoStatus)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UnNumber).IsUnicode(false);

                entity.Property(e => e.Vulnerable).IsUnicode(false);
            });

            modelBuilder.Entity<Fproducto1>(entity =>
            {
                entity.Property(e => e.Descespanol).IsUnicode(false);

                entity.Property(e => e.Descingles).IsUnicode(false);

                entity.Property(e => e.Fraccionexpo).IsUnicode(false);

                entity.Property(e => e.Fraccionimpo).IsUnicode(false);

                entity.Property(e => e.Numparte).IsUnicode(false);

                entity.Property(e => e.PaisOrigen).IsUnicode(false);

                entity.Property(e => e.Unimeddescarga).IsUnicode(false);

                entity.Property(e => e.Unimedparte).IsUnicode(false);
            });

            modelBuilder.Entity<Fproducto11>(entity =>
            {
                entity.Property(e => e.DescTarifa).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionIngles).IsUnicode(false);

                entity.Property(e => e.NumParte).IsUnicode(false);

                entity.Property(e => e.NumParte1).IsUnicode(false);

                entity.Property(e => e.PaisOrigen).IsUnicode(false);
            });

            modelBuilder.Entity<FproductoCove>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdProducto, e.Secuencial });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.Edocument).IsUnicode(false);

                entity.Property(e => e.IdDocumento).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<FproductoCoveHistorico>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdProducto, e.Secuencial, e.FechaReg });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.Edocument).IsUnicode(false);

                entity.Property(e => e.IdDocumento).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<FproductoNaftaGeneral>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdProducto });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);
            });

            modelBuilder.Entity<FproductoQuimico>(entity =>
            {
                entity.HasKey(e => new { e.Identificador, e.Guia, e.ClasePeligro, e.Descripcion })
                    .HasName("pk_fproducto_quimico");

                entity.Property(e => e.Identificador).IsUnicode(false);

                entity.Property(e => e.Guia).IsUnicode(false);

                entity.Property(e => e.ClasePeligro).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FproductoValidacion>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProducto });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);
            });

            modelBuilder.Entity<FproductosTlc>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.NoParte })
                    .HasName("PK_fctrl_doc");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.NoParte).IsUnicode(false);

                entity.Property(e => e.Fraccion).IsUnicode(false);

                entity.Property(e => e.TipoDoc)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Fprofepa>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CertificadoOrigen).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.ComprobanteTratamiento).IsUnicode(false);

                entity.Property(e => e.CvePagoDer).IsUnicode(false);

                entity.Property(e => e.CvePais).IsUnicode(false);

                entity.Property(e => e.CvePuntoInsp).IsUnicode(false);

                entity.Property(e => e.Delegacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescripcionTransporte).IsUnicode(false);

                entity.Property(e => e.DictamenTecnico).IsUnicode(false);

                entity.Property(e => e.Entidad).IsUnicode(false);

                entity.Property(e => e.Firma).IsUnicode(false);

                entity.Property(e => e.Folio).IsUnicode(false);

                entity.Property(e => e.FraPagoDer).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDestinatario).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.Inspectoria)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NoEconomico).IsUnicode(false);

                entity.Property(e => e.NoIdentificacion).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.NumeroExt).IsUnicode(false);

                entity.Property(e => e.NumeroInt).IsUnicode(false);

                entity.Property(e => e.ObjetivoMerc)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Placa).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoRtv)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Transporte)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FprofepaDocumento>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumSecuencial, e.Secuencial });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Certificado).IsUnicode(false);

                entity.Property(e => e.EntidadCertificado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.TipoDocumento)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FprofepaEstado>(entity =>
            {
                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FprofepaFactura>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdFactura, e.IdProveedor, e.FechaFactura })
                    .HasName("pk_fprofepa_facturas");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.RazonSocialProveedor).IsUnicode(false);
            });

            modelBuilder.Entity<FprofepaFraccion>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumSecuencial });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.CondadoOrigen).IsUnicode(false);

                entity.Property(e => e.EntidadOrigen)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EntidadProcedencia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdNombre).IsUnicode(false);

                entity.Property(e => e.NombreCientifico).IsUnicode(false);

                entity.Property(e => e.NombreComercial).IsUnicode(false);

                entity.Property(e => e.PaisOrigen)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PaisProcedencia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PlantacionOrigen).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.TipoProducto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UnidadComercial)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FprofepaPagoFracc>(entity =>
            {
                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FprofepaProdCientifico>(entity =>
            {
                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FprofepaProdComercial>(entity =>
            {
                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FprofepaTipoDocumento>(entity =>
            {
                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FprofepaTipoProducto>(entity =>
            {
                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FprofepaTransportistum>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Aseguradora).IsUnicode(false);

                entity.Property(e => e.AutorizacionTracto).IsUnicode(false);

                entity.Property(e => e.AutorizacionUnidad).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Entidad)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.ManifiestoEntrega).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.NumeroExt).IsUnicode(false);

                entity.Property(e => e.NumeroInt).IsUnicode(false);

                entity.Property(e => e.NumeroSeguro).IsUnicode(false);

                entity.Property(e => e.NumeroSerieTracto).IsUnicode(false);

                entity.Property(e => e.NumeroSerieUnidad).IsUnicode(false);

                entity.Property(e => e.Operador).IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PlacasTracto).IsUnicode(false);

                entity.Property(e => e.PlacasUnidad).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Ruta).IsUnicode(false);
            });

            modelBuilder.Entity<Fproveedor>(entity =>
            {
                entity.HasKey(e => e.IdProveedor)
                    .HasName("pk_fproveedor");

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.ContactFirstName).IsUnicode(false);

                entity.Property(e => e.ContactLastName).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.DomicilioLogo).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.IdCuentaContable).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Irs).IsUnicode(false);

                entity.Property(e => e.Localidad).IsUnicode(false);

                entity.Property(e => e.NumExportConfiable).IsUnicode(false);

                entity.Property(e => e.NumOracle).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.NumeroInterior)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.RazonSocialAbreviada).IsUnicode(false);

                entity.Property(e => e.RazonsLogo).IsUnicode(false);

                entity.Property(e => e.RoutedExpTransactInd)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Situacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tel1).IsUnicode(false);

                entity.Property(e => e.Tel2).IsUnicode(false);

                entity.Property(e => e.Tel3).IsUnicode(false);

                entity.Property(e => e.Tel4).IsUnicode(false);

                entity.Property(e => e.Usppi).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.IdMunicipioNavigation)
                    .WithMany(p => p.Fproveedors)
                    .HasForeignKey(d => d.IdMunicipio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fproveedor");

                entity.HasOne(d => d.IdUsuarioRegistroNavigation)
                    .WithMany(p => p.Fproveedors)
                    .HasForeignKey(d => d.IdUsuarioRegistro)
                    .HasConstraintName("fk2_fproveedor");
            });

            modelBuilder.Entity<FproveedorCerMercCli>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.Secuencial })
                    .HasName("PK__fproveed__397F1892A1398783");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Secuencial).ValueGeneratedOnAdd();

                entity.Property(e => e.RazonSocialProv).IsUnicode(false);
            });

            modelBuilder.Entity<FproveedorIncrementable>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdFactura });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.DocumentoFletes).IsUnicode(false);

                entity.Property(e => e.DocumentoSeguros).IsUnicode(false);

                entity.Property(e => e.DocumentosEmbalaje).IsUnicode(false);

                entity.Property(e => e.DocumentosOtros).IsUnicode(false);

                entity.Property(e => e.ProveedorEmbalaje).IsUnicode(false);

                entity.Property(e => e.ProveedorFletes).IsUnicode(false);

                entity.Property(e => e.ProveedorOtros).IsUnicode(false);

                entity.Property(e => e.ProveedorSeguros).IsUnicode(false);
            });

            modelBuilder.Entity<FproveedorInterno>(entity =>
            {
                entity.HasKey(e => e.IdProveedor)
                    .HasName("pk_fproveedor_interno");

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.CtaContable).IsUnicode(false);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.CveTipoFactura).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.IdAgenciaAduanal).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Irs).IsUnicode(false);

                entity.Property(e => e.Municipio).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.RazonSocialAbreviada).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Tel1).IsUnicode(false);

                entity.Property(e => e.Tel2).IsUnicode(false);

                entity.Property(e => e.Tel3).IsUnicode(false);

                entity.Property(e => e.Tel4).IsUnicode(false);

                entity.HasOne(d => d.IdUsuarioRegistroNavigation)
                    .WithMany(p => p.FproveedorInternoIdUsuarioRegistroNavigations)
                    .HasForeignKey(d => d.IdUsuarioRegistro)
                    .HasConstraintName("fk2_FPROVEEDOR_INTERNO");

                entity.HasOne(d => d.IdUsuarioUltmodifNavigation)
                    .WithMany(p => p.FproveedorInternoIdUsuarioUltmodifNavigations)
                    .HasForeignKey(d => d.IdUsuarioUltmodif)
                    .HasConstraintName("fk3_FPROVEEDOR_INTERNO");

                entity.HasOne(d => d.MunicipioNavigation)
                    .WithMany(p => p.FproveedorInternos)
                    .HasForeignKey(d => d.Municipio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_FPROVEEDOR_INTERNO");
            });

            modelBuilder.Entity<Fproveedore>(entity =>
            {
                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.IdCuentaContable).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Irs).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.NumeroInterior)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.RazonSocialAbreviada).IsUnicode(false);

                entity.Property(e => e.Tel1).IsUnicode(false);

                entity.Property(e => e.Tel2).IsUnicode(false);

                entity.Property(e => e.Tel3).IsUnicode(false);

                entity.Property(e => e.Tel4).IsUnicode(false);
            });

            modelBuilder.Entity<FpxmqAviso>(entity =>
            {
                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Acuse).IsUnicode(false);

                entity.Property(e => e.Curp).IsUnicode(false);

                entity.Property(e => e.Firma).IsUnicode(false);

                entity.Property(e => e.FolioAviso).IsUnicode(false);

                entity.Property(e => e.IdClienteRec).IsUnicode(false);

                entity.Property(e => e.IdClienteTrans).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Movimiento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumSerie)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumeroPrograma)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumeroProgramaDestino)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PlantaDestino)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PlantaOrigen)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RazonSocialRec).IsUnicode(false);

                entity.Property(e => e.RazonSocialTrans).IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RfcDestino)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPrograma)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoProgramaDestino)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTraslado)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FpxmqAvisosMercancium>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.Secuencial });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FpxmqPlantaBodega>(entity =>
            {
                entity.Property(e => e.ClavePlanta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Acuse)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ArchivoGenerado).IsUnicode(false);

                entity.Property(e => e.Calle)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Curp).IsUnicode(false);

                entity.Property(e => e.EntidadFederativa)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Firma).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Movimiento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumExt)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumInt)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumSerie)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rfc)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FraccionesNueva>(entity =>
            {
                entity.HasKey(e => new { e.IdFraccion, e.IdFraccionNueva });

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdFraccionNueva).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Umt)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FrangoPedimento>(entity =>
            {
                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Frecargo>(entity =>
            {
                entity.HasKey(e => new { e.IdAnio, e.IdMes })
                    .HasName("pk_frecargo");

                entity.Property(e => e.IdAnio).IsUnicode(false);

                entity.Property(e => e.IdMes).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Frecibo>(entity =>
            {
                entity.HasKey(e => e.IdEntrada)
                    .HasName("pk_frecibo");

                entity.Property(e => e.IdEntrada).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.Directa).IsUnicode(false);

                entity.Property(e => e.GuiaFlete).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRecibe).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.MarcaMcia).IsUnicode(false);

                entity.Property(e => e.NumVehiculo).IsUnicode(false);

                entity.Property(e => e.Osd)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Seccion).IsUnicode(false);

                entity.Property(e => e.Situacion).IsUnicode(false);

                entity.Property(e => e.TipoOsd).IsUnicode(false);
            });

            modelBuilder.Entity<FrecoFnm>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion })
                    .HasName("primar");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Auto).IsUnicode(false);

                entity.Property(e => e.CalleConsigna).IsUnicode(false);

                entity.Property(e => e.CondPago).IsUnicode(false);

                entity.Property(e => e.Consigna).IsUnicode(false);

                entity.Property(e => e.DescripcionArt).IsUnicode(false);

                entity.Property(e => e.DomicilioReconsigna).IsUnicode(false);

                entity.Property(e => e.Escapes).IsUnicode(false);

                entity.Property(e => e.Estacion).IsUnicode(false);

                entity.Property(e => e.Estado).IsUnicode(false);

                entity.Property(e => e.FinalReconsigna).IsUnicode(false);

                entity.Property(e => e.IdEstacion).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.ImpExp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Iniciales).IsUnicode(false);

                entity.Property(e => e.InstManejo).IsUnicode(false);

                entity.Property(e => e.Linea)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MunicipioConsigna).IsUnicode(false);

                entity.Property(e => e.NumeroConsigna).IsUnicode(false);

                entity.Property(e => e.NumeroEcono).IsUnicode(false);

                entity.Property(e => e.Observacion1).IsUnicode(false);

                entity.Property(e => e.Observacion2).IsUnicode(false);

                entity.Property(e => e.Pagos).IsUnicode(false);

                entity.Property(e => e.Pedimento)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Porcentaje).IsUnicode(false);

                entity.Property(e => e.Reconsigna).IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Telefono).IsUnicode(false);

                entity.Property(e => e.TelefonoReconsigna).IsUnicode(false);

                entity.Property(e => e.TipoCarro).IsUnicode(false);

                entity.Property(e => e.TipoSer)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FreferenciaEnUso>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdUsuario)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdUsuarioLibero)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FreferenciasEnvioDocto>(entity =>
            {
                entity.HasKey(e => new { e.IdEnvioDoctos, e.IdReferencia, e.IdRectificacion })
                    .HasName("PK__freferen__84C3976F9D8CAAE0");

                entity.Property(e => e.IdEnvioDoctos).ValueGeneratedOnAdd();

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Mensaje).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<Freg001Pedimento>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion })
                    .HasName("pk_freg001_pedimento");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.SubEstado).IsUnicode(false);

                entity.Property(e => e.SubEstadoFecha).IsUnicode(false);
            });

            modelBuilder.Entity<Fregiman>(entity =>
            {
                entity.HasKey(e => new { e.CveTipoOperacion, e.IdRegimen })
                    .HasName("pk_fregimen");

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.ActualizarDta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.AvisoEconomia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveCalculo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveRegimen).IsUnicode(false);

                entity.Property(e => e.DescripcionReg).IsUnicode(false);

                entity.Property(e => e.IdTipoIva).IsUnicode(false);

                entity.Property(e => e.IdTipoRegimen).IsUnicode(false);

                entity.Property(e => e.Immex).IsUnicode(false);

                entity.Property(e => e.MarcaRegistrada)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PrecioEstimado).IsUnicode(false);

                entity.Property(e => e.ReglaOctava)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Tlc)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdTipoIvaNavigation)
                    .WithMany(p => p.Fregimen)
                    .HasForeignKey(d => d.IdTipoIva)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_2_fregimen");

                entity.HasOne(d => d.IdTipoRegimenNavigation)
                    .WithMany(p => p.Fregimen)
                    .HasForeignKey(d => d.IdTipoRegimen)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_1_regimen");
            });

            modelBuilder.Entity<FregimenCuotaFija>(entity =>
            {
                entity.HasKey(e => new { e.IdRegimen, e.CveTipoOpn })
                    .HasName("pk_fregimen_cuota_fija");

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FregistrosSaaim3>(entity =>
            {
                entity.HasKey(e => e.Registro)
                    .HasName("PK__fregistr__58C1F74678B0067F");

                entity.Property(e => e.Registro).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FreglaOctava>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.FraccionR8, e.IdPaisOrigen, e.IdRegimen, e.IdPermiso, e.NumeroPermiso })
                    .HasName("PK_regla_octava");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.FraccionR8).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.NumeroPermiso).IsUnicode(false);

                entity.Property(e => e.CveUnidadComercial).IsUnicode(false);

                entity.Property(e => e.DescripcionGenerica).IsUnicode(false);

                entity.Property(e => e.IdenCaso).IsUnicode(false);
            });

            modelBuilder.Entity<FreglaOctavaDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.FraccionR8, e.IdPaisOrigen, e.IdRegimen, e.FraccionNormal, e.IdPermiso, e.NumeroPermiso })
                    .HasName("PK_regla_octava_detalle");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.FraccionR8).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.FraccionNormal).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.NumeroPermiso).IsUnicode(false);
            });

            modelBuilder.Entity<FrelBancoIdent>(entity =>
            {
                entity.HasKey(e => new { e.IdBanco, e.Identificador, e.Cuenta, e.IdAduana, e.IdPatente });

                entity.Property(e => e.IdBanco).IsUnicode(false);

                entity.Property(e => e.Identificador)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cuenta).IsUnicode(false);

                entity.Property(e => e.IdAduana)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdPatente)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CuentaActiva)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.QuitarIdent)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.RfcServicios).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.TipoCuenta).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FrelBodProducto>(entity =>
            {
                entity.HasKey(e => new { e.IdBodega, e.IdCliente, e.IdProveedor, e.IdProducto })
                    .HasName("pk_frel_id_bod");

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Seccion).IsUnicode(false);
            });

            modelBuilder.Entity<FrelClaveCliente>(entity =>
            {
                entity.HasKey(e => new { e.ClaveUsuario, e.IdCliente });

                entity.Property(e => e.ClaveUsuario).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);
            });

            modelBuilder.Entity<FrelClientePlantum>(entity =>
            {
                entity.HasKey(e => new { e.Planta, e.IdCliente });

                entity.Property(e => e.Planta).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);
            });

            modelBuilder.Entity<FrelClienteProveedor>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor })
                    .HasName("IX_frel_cliente_proveedor");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.HasOne(d => d.IdClienteNavigation)
                    .WithMany(p => p.FrelClienteProveedors)
                    .HasForeignKey(d => d.IdCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_frel_cliente_proveedor_FCLIENTE");

                entity.HasOne(d => d.IdProveedorNavigation)
                    .WithMany(p => p.FrelClienteProveedors)
                    .HasForeignKey(d => d.IdProveedor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_frel_cliente_proveedor_fproveedor");
            });

            modelBuilder.Entity<FrelClienteSector>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.CveTipoOpe, e.IdSector })
                    .HasName("pk_rel_cliente_sector");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CveTipoOpe).IsUnicode(false);

                entity.Property(e => e.IdSector).IsUnicode(false);
            });

            modelBuilder.Entity<FrelCorresponsalCliente>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdCorresponsal });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdCorresponsal).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FrelFactPerm>(entity =>
            {
                entity.HasKey(e => new { e.IdFactura, e.NumSecuencial, e.IdCliente, e.IdProveedor, e.IdProducto, e.IdPermiso, e.NumPermiso });

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.NumPermiso).IsUnicode(false);

                entity.Property(e => e.Firma).IsUnicode(false);
            });

            modelBuilder.Entity<FrelFacturaFecha>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdFactura, e.IdProveedor, e.FechaFactura });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FrelFacturasConsolidada>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdFactura });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.ConsecutivoShcp).IsUnicode(false);

                entity.Property(e => e.Granel)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UsuarioAutoriza).IsUnicode(false);

                entity.Property(e => e.Vehiculo).IsUnicode(false);
            });

            modelBuilder.Entity<FrelFracAdva>(entity =>
            {
                entity.HasKey(e => new { e.CveTipoOpn, e.IdFraccionMex, e.IdTipoAdvalorem })
                    .HasName("pk_frel_frac_adva");

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IdTipoAdvaloremNavigation)
                    .WithMany(p => p.FrelFracAdvas)
                    .HasForeignKey(d => d.IdTipoAdvalorem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_frel_frac_adva");

                entity.HasOne(d => d.FfraccionMex)
                    .WithMany(p => p.FrelFracAdvas)
                    .HasForeignKey(d => new { d.CveTipoOpn, d.IdFraccionMex })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_frel_frac_adva");
            });

            modelBuilder.Entity<FrelFracFact>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdFactura, e.NumSecuencial });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.CveUnidadComercial).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FrelFracImpu>(entity =>
            {
                entity.HasKey(e => new { e.CveTipoOpn, e.IdFraccionMex, e.IdImpuesto })
                    .HasName("pk_frel_frac_impu");

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.IdImpuesto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FrelFracPerm>(entity =>
            {
                entity.HasKey(e => new { e.CveTipoOpn, e.IdFraccionMex, e.IdPermiso })
                    .HasName("pk_frel_frac_perm");

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.FfraccionMex)
                    .WithMany(p => p.FrelFracPerms)
                    .HasForeignKey(d => new { d.CveTipoOpn, d.IdFraccionMex })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_frel_frac_perm");
            });

            modelBuilder.Entity<FrelImpRegPago>(entity =>
            {
                entity.HasKey(e => new { e.IdRegimen, e.CveTipoOperacion, e.IdImpuesto, e.IdFormaPago })
                    .HasName("pk_frel_imp_reg_pago");

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdImpuesto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdFormaPago).IsUnicode(false);

                entity.Property(e => e.CvePagoDefault).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.CvePagoDefaultNavigation)
                    .WithMany(p => p.FrelImpRegPagoCvePagoDefaultNavigations)
                    .HasForeignKey(d => d.CvePagoDefault)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_4_frel_imp_reg_pago");

                entity.HasOne(d => d.IdFormaPagoNavigation)
                    .WithMany(p => p.FrelImpRegPagoIdFormaPagoNavigations)
                    .HasForeignKey(d => d.IdFormaPago)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_3_FREL_IMP_PAGO");

                entity.HasOne(d => d.IdImpuestoNavigation)
                    .WithMany(p => p.FrelImpRegPagos)
                    .HasForeignKey(d => d.IdImpuesto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_2_frel_imp_reg_pago");

                entity.HasOne(d => d.Fregiman)
                    .WithMany(p => p.FrelImpRegPagos)
                    .HasForeignKey(d => new { d.CveTipoOperacion, d.IdRegimen })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_1_frel_imp_reg_pago");
            });

            modelBuilder.Entity<FrelImpRegPagoPerfil>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdRegimen, e.CveTipoOperacion, e.IdImpuesto })
                    .HasName("pk_frel_imp_reg_pago_perfil");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdImpuesto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdFormaPagoDefaul).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);
            });

            modelBuilder.Entity<FrelPartidasFacturaPedimento>(entity =>
            {
                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdPackList)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newsequentialid())");
            });

            modelBuilder.Entity<FrelPatenteApoderado>(entity =>
            {
                entity.HasKey(e => new { e.IdApoderado, e.IdPatente });

                entity.Property(e => e.IdApoderado).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FrelPedimentoFactura>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdFactura, e.IdProveedor, e.FechaFactura, e.Consecutivo })
                    .HasName("pk_frel_pedimento_factura");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.Consecutivo).ValueGeneratedOnAdd();

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.Cfdi)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Complemento)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.ConsecutivoFactura).HasDefaultValueSql("((0))");

                entity.Property(e => e.Contingencia)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Edocument).IsUnicode(false);

                entity.Property(e => e.EntFederativa)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Estado).IsUnicode(false);

                entity.Property(e => e.FacturaAux).IsUnicode(false);

                entity.Property(e => e.FobDestino).IsUnicode(false);

                entity.Property(e => e.IdMonedaEmbalaje).IsUnicode(false);

                entity.Property(e => e.IdMonedaFlete).IsUnicode(false);

                entity.Property(e => e.IdMonedaFrontera).IsUnicode(false);

                entity.Property(e => e.IdMonedaSeguro).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdPackList)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdTipoFactura).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.IrsProveedor).IsUnicode(false);

                entity.Property(e => e.MasPedimentos).IsUnicode(false);

                entity.Property(e => e.MonedaFacturacion).IsUnicode(false);

                entity.Property(e => e.Municipio).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.NumeroInterior).IsUnicode(false);

                entity.Property(e => e.ProveedorCertifica).IsUnicode(false);

                entity.Property(e => e.RazonSocialProveedor).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Subdividida).IsUnicode(false);

                entity.Property(e => e.UsuarioAutoriza).IsUnicode(false);

                entity.Property(e => e.Vessel).IsUnicode(false);

                entity.Property(e => e.Vinculacion).IsUnicode(false);
            });

            modelBuilder.Entity<FrelPermReg>(entity =>
            {
                entity.HasKey(e => new { e.CveTipoOperacion, e.IdRegimen, e.IdPermiso })
                    .HasName("pk_frel_perm_reg");

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.Fregiman)
                    .WithMany(p => p.FrelPermRegs)
                    .HasForeignKey(d => new { d.CveTipoOperacion, d.IdRegimen })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_1_frel_perm_reg");
            });

            modelBuilder.Entity<FrelProdFrac>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdProducto, e.CveTipoOpn })
                    .HasName("pk_frel_prod_frac");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.Clasificado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FraccionRegla8va).IsUnicode(false);

                entity.Property(e => e.IdFraccionAme).IsUnicode(false);

                entity.Property(e => e.IdFraccionHistorico).IsUnicode(false);

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioClasifica).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IdUsuarioClasificaNavigation)
                    .WithMany(p => p.FrelProdFracIdUsuarioClasificaNavigations)
                    .HasForeignKey(d => d.IdUsuarioClasifica)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk6_frel_prod_frac");

                entity.HasOne(d => d.IdUsuarioUltmodifNavigation)
                    .WithMany(p => p.FrelProdFracIdUsuarioUltmodifNavigations)
                    .HasForeignKey(d => d.IdUsuarioUltmodif)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk7_frel_prod_frac");
            });

            modelBuilder.Entity<FrelProdFrac1>(entity =>
            {
                entity.Property(e => e.Clasificado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTipoOpn).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdFraccionHistorico).IsUnicode(false);

                entity.Property(e => e.IdFraccionMex).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioClaFisica).IsUnicode(false);

                entity.Property(e => e.IdUsuarioClasifica).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);
            });

            modelBuilder.Entity<FrelProdIdentObli>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdProducto, e.IdRegimen, e.TipoCaso, e.IdenCaso, e.Complemento2, e.CveTipoOperacion })
                    .IsClustered(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdenCaso).IsUnicode(false);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FrelProdPermObli>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdProducto, e.IdRegimen, e.IdPermiso, e.Numero, e.CveTipoOperacion })
                    .IsClustered(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion).IsUnicode(false);

                entity.Property(e => e.FirmaPermiso)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FrelProdPermiso>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdProducto, e.IdPermiso, e.CveOpcional })
                    .HasName("pk_frel_prod_permiso");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.NumPermiso).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FrelProdTipoAdval>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdProducto, e.IdRegimen, e.IdTipoAdvalorem, e.CveTipoOperacion })
                    .IsClustered(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FrelRegimenCompliance>(entity =>
            {
                entity.HasKey(e => new { e.TipoRegimen, e.IdRegimen, e.IdCompliance });

                entity.Property(e => e.TipoRegimen).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdCompliance).IsUnicode(false);
            });

            modelBuilder.Entity<FrelShipperTrafico>(entity =>
            {
                entity.HasKey(e => new { e.IdShipper, e.IdTrafico })
                    .HasName("pk1_rel_shipper_traf");

                entity.Property(e => e.IdShipper).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FrelTipoClienteConcepto>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoCliente, e.IdConcepto })
                    .HasName("pk_frel_tipo_cliente_conceptos");

                entity.Property(e => e.IdTipoCliente).IsUnicode(false);

                entity.Property(e => e.IdConcepto).IsUnicode(false);
            });

            modelBuilder.Entity<FrelTipoPedimentoRegiman>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoPedimento, e.CveTipoOperacion, e.IdRegimen })
                    .HasName("pk_frel_tipo_pedimento_regimen");

                entity.Property(e => e.IdTipoPedimento).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IdTipoPedimentoNavigation)
                    .WithMany(p => p.FrelTipoPedimentoRegimen)
                    .HasForeignKey(d => d.IdTipoPedimento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1frel_tipo_pedimento_regimen");

                entity.HasOne(d => d.Fregiman)
                    .WithMany(p => p.FrelTipoPedimentoRegimen)
                    .HasForeignKey(d => new { d.CveTipoOperacion, d.IdRegimen })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2frel_tipo_pedimento_regimen");
            });

            modelBuilder.Entity<FrelTrafPerm>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.NumSecuencial, e.IdCliente, e.IdProveedor, e.IdProducto, e.IdPermiso, e.NumPermiso })
                    .HasName("pk_frel_traf_perm");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.NumSecuencial).HasDefaultValueSql("(1)");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.NumPermiso).IsUnicode(false);

                entity.Property(e => e.Firma).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.HasOne(d => d.IdTraficoNavigation)
                    .WithMany(p => p.FrelTrafPerms)
                    .HasForeignKey(d => d.IdTrafico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_1_frel_traf_perm");
            });

            modelBuilder.Entity<FrelTraficoPedimento>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.IdReferencia, e.IdRectificacion })
                    .HasName("pk_frel_trafico_pedimento");

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FrelUnidade>(entity =>
            {
                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.CveUnidadOficial).IsUnicode(false);
            });

            modelBuilder.Entity<FrelUsuactDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdDoctoOrigenUsuact, e.IdProceso, e.NoSecUsuact })
                    .HasName("pk_frel_usuact_detalle");

                entity.Property(e => e.IdDoctoOrigenUsuact).IsUnicode(false);

                entity.Property(e => e.IdProceso).IsUnicode(false);

                entity.Property(e => e.IdActividad).IsUnicode(false);

                entity.Property(e => e.IdFacturaAme).IsUnicode(false);

                entity.Property(e => e.IdPreCuentaAme).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.NoPoliza).IsUnicode(false);

                entity.Property(e => e.NumTracking).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Proveedor).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.TipoMoneda)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdActividadNavigation)
                    .WithMany(p => p.FrelUsuactDetalles)
                    .HasForeignKey(d => d.IdActividad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk3_frel_usuact_detalle");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.FrelUsuactDetalles)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_frel_usuact_detalle");
            });

            modelBuilder.Entity<FrelUsuarioBodega>(entity =>
            {
                entity.HasKey(e => new { e.IdUsuario, e.IdBodega })
                    .HasName("PK_rel_usuario_bodega");

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);
            });

            modelBuilder.Entity<FrelVehiculoContenedor>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdTipoVehiculo, e.IdNumeroVehiculo, e.Consecutivo, e.NumContenedor, e.TipoContenedor, e.Secuencial })
                    .HasName("PK__frel_veh__D5B9AD7681C79118");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.IdNumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.NumContenedor).IsUnicode(false);
            });

            modelBuilder.Entity<FrelacionDocumentosDetFull>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial })
                    .HasName("PK_relacion_det_full");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.Pedimento)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FrelacionDocumentosFull>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion })
                    .HasName("PK_relacion_full");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Caat).IsUnicode(false);

                entity.Property(e => e.Contenedor1).IsUnicode(false);

                entity.Property(e => e.Contenedor1Tipo).HasDefaultValueSql("((0))");

                entity.Property(e => e.Contenedor2).IsUnicode(false);

                entity.Property(e => e.Contenedor2Tipo).HasDefaultValueSql("((0))");

                entity.Property(e => e.Contenedor3).IsUnicode(false);

                entity.Property(e => e.Contenedor3Tipo).HasDefaultValueSql("((0))");

                entity.Property(e => e.Contenedor4).IsUnicode(false);

                entity.Property(e => e.Contenedor4Tipo).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FrelacionFfrr>(entity =>
            {
                entity.HasKey(e => e.IdRelacion)
                    .HasName("pk_frelacion_ffrr");

                entity.Property(e => e.IdRelacion).IsUnicode(false);

                entity.Property(e => e.Cheque).IsUnicode(false);

                entity.Property(e => e.IdAgenciaAduanal).IsUnicode(false);

                entity.Property(e => e.IdForwarding).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FrelacionFfrrDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdRelacion, e.IdTrafico })
                    .HasName("pk_frelacion_ffrr_detalle");

                entity.Property(e => e.IdRelacion).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FremesaAviso>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Consecutivo })
                    .HasName("pk_remesa_aviso");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.AcuseValidacion).IsUnicode(false);

                entity.Property(e => e.FirmaElectronica)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdentificadorGuia).IsUnicode(false);

                entity.Property(e => e.Movimiento).IsUnicode(false);

                entity.Property(e => e.Niu).IsUnicode(false);

                entity.Property(e => e.NombreArchivo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumeroEconomico).IsUnicode(false);

                entity.Property(e => e.Placas).IsUnicode(false);

                entity.Property(e => e.RfcTransportista).IsUnicode(false);

                entity.Property(e => e.Seciit)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.TipoAviso).IsUnicode(false);

                entity.Property(e => e.UnidadMedida).IsUnicode(false);
            });

            modelBuilder.Entity<FremesaConsecutivo>(entity =>
            {
                entity.HasKey(e => new { e.IdEmbarque, e.IdReferencia, e.IdRectificacion, e.Pedimento });

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);
            });

            modelBuilder.Entity<FremesaGuium>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Consecutivo, e.Secuencial })
                    .HasName("pk_fremesa_guia");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.CveTipoGuia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Guia).IsUnicode(false);
            });

            modelBuilder.Entity<FremesaIdentificadore>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Consecutivo, e.Secuencial })
                    .HasName("pk_fremesa_identificadores");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Complemento1).IsUnicode(false);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);

                entity.Property(e => e.IdenCaso).IsUnicode(false);

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FremesaMercancia>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Consecutivo, e.Secuencial })
                    .HasName("pk_remesa_mercancias");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.DescripcionComercial).IsUnicode(false);
            });

            modelBuilder.Entity<FremesaMercanciasIdentificadore>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Consecutivo, e.Secuencial, e.NumIdentificador })
                    .HasName("pk_fremesa_mercancias_identificadores");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Complemento1).IsUnicode(false);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);

                entity.Property(e => e.IdenCaso).IsUnicode(false);

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FremesaObservacion>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Consecutivo, e.Secuencial })
                    .HasName("pk_remesa_observacion");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<FreporteAutomatico>(entity =>
            {
                entity.Property(e => e.IdReporte).IsUnicode(false);

                entity.Property(e => e.Contacto).IsUnicode(false);

                entity.Property(e => e.Reporte).IsUnicode(false);
            });

            modelBuilder.Entity<Frestriccion>(entity =>
            {
                entity.HasKey(e => new { e.IdClase, e.IdProcedimiento })
                    .HasName("pk_frestriccion");

                entity.Property(e => e.IdClase).IsUnicode(false);

                entity.Property(e => e.IdProcedimiento).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FrutasFacturasElec>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.FacPed });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.FacPed)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.Ruta).IsUnicode(false);

                entity.Property(e => e.TipoLayout).IsUnicode(false);
            });

            modelBuilder.Entity<FsagarDetLote>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial, e.ConsecLote });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdCalidad).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.Lote2).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FsagarDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial })
                    .HasName("pk_fsagar_detalle");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Certificado).IsUnicode(false);

                entity.Property(e => e.CertificadoSanitario).IsUnicode(false);

                entity.Property(e => e.CveUnidadComercial).IsUnicode(false);

                entity.Property(e => e.CveUnidadTarifa).IsUnicode(false);

                entity.Property(e => e.DescripcionFraccion).IsUnicode(false);

                entity.Property(e => e.IdCalidad)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdPaisVendedor).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.MayContain)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Planta).IsUnicode(false);

                entity.Property(e => e.RequisitoSanitario).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.TipoRequisito).IsUnicode(false);

                entity.Property(e => e.UsoProd).IsUnicode(false);
            });

            modelBuilder.Entity<FsagarDetalleProv>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdProveedor });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.Domicilio).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FsagarGeneral>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion })
                    .HasName("pk_fsagar_general");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.CalleCliente).IsUnicode(false);

                entity.Property(e => e.Certificado).IsUnicode(false);

                entity.Property(e => e.ClaveOisa).IsUnicode(false);

                entity.Property(e => e.ClaveOisaBase).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.ColoniaImp).IsUnicode(false);

                entity.Property(e => e.CordonCentro).IsUnicode(false);

                entity.Property(e => e.CordonIstmo).IsUnicode(false);

                entity.Property(e => e.CordonNorte).IsUnicode(false);

                entity.Property(e => e.CordonPeninsular).IsUnicode(false);

                entity.Property(e => e.CordonSur).IsUnicode(false);

                entity.Property(e => e.CpCliente).IsUnicode(false);

                entity.Property(e => e.CveMunicipio).IsUnicode(false);

                entity.Property(e => e.CveTransporte).IsUnicode(false);

                entity.Property(e => e.Empresa).IsUnicode(false);

                entity.Property(e => e.EntidadFederativa).IsUnicode(false);

                entity.Property(e => e.Estado).IsUnicode(false);

                entity.Property(e => e.Firma).IsUnicode(false);

                entity.Property(e => e.FirmaSagar).IsUnicode(false);

                entity.Property(e => e.Flejes).IsUnicode(false);

                entity.Property(e => e.FolioCertificado).IsUnicode(false);

                entity.Property(e => e.FolioOriginal).IsUnicode(false);

                entity.Property(e => e.GuiaOrden).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioGen).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltGen).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Matricula).IsUnicode(false);

                entity.Property(e => e.MunicipioCliente).IsUnicode(false);

                entity.Property(e => e.MunicipioImp).IsUnicode(false);

                entity.Property(e => e.NumeroCliente).IsUnicode(false);

                entity.Property(e => e.NumerointCliente).IsUnicode(false);

                entity.Property(e => e.Permiso).IsUnicode(false);

                entity.Property(e => e.Planta).IsUnicode(false);

                entity.Property(e => e.Presentacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RazonSocialCliente).IsUnicode(false);

                entity.Property(e => e.ReferenciaConsolidado).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.RutaArchivoSagar).IsUnicode(false);

                entity.Property(e => e.SiglasAaa).IsUnicode(false);

                entity.Property(e => e.Telefono).IsUnicode(false);

                entity.Property(e => e.TipoCertificado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoInsp)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoModalidad).IsUnicode(false);

                entity.Property(e => e.TipoOpMov)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoPresen)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Transportista).IsUnicode(false);

                entity.Property(e => e.Ucon).IsUnicode(false);

                entity.Property(e => e.Validacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Vehiculo).IsUnicode(false);
            });

            modelBuilder.Entity<FsagarMuestra>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial, e.Consecutivo });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Analisis).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.Cie).IsUnicode(false);

                entity.Property(e => e.ClaveLab)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.Cp).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Estado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.Municipio).IsUnicode(false);

                entity.Property(e => e.NombreLab).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.NumeroCuenta).IsUnicode(false);

                entity.Property(e => e.NumeroInterior).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.ReqFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Telefono).IsUnicode(false);

                entity.Property(e => e.TipoLab)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Uso).IsUnicode(false);

                entity.Property(e => e.Variedad).IsUnicode(false);
            });

            modelBuilder.Entity<Fseccion>(entity =>
            {
                entity.HasKey(e => e.Seccion)
                    .HasName("pk_fseccion");

                entity.Property(e => e.Seccion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Fsectore>(entity =>
            {
                entity.HasKey(e => new { e.IdSector, e.CveTipoOpe })
                    .HasName("pk_sectores");

                entity.Property(e => e.IdSector).IsUnicode(false);

                entity.Property(e => e.CveTipoOpe).IsUnicode(false);

                entity.Property(e => e.Sector).IsUnicode(false);
            });

            modelBuilder.Entity<FsellosDisponible>(entity =>
            {
                entity.HasKey(e => new { e.Color, e.Sello })
                    .HasName("pk_fsellos_disponibles");

                entity.Property(e => e.Color).IsUnicode(false);

                entity.Property(e => e.Sello).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.Seccion).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<Fseries>(entity =>
            {
                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.Serie).IsUnicode(false);
            });

            modelBuilder.Entity<Fservice>(entity =>
            {
                entity.HasKey(e => e.IdService)
                    .HasName("pk_fservice");

                entity.Property(e => e.IdService).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Fshipper>(entity =>
            {
                entity.HasKey(e => e.IdShipper)
                    .HasName("pk1_shipper");

                entity.Property(e => e.IdShipper).IsUnicode(false);

                entity.Property(e => e.CarrierIdCode).IsUnicode(false);

                entity.Property(e => e.EntryNumber).IsUnicode(false);

                entity.Property(e => e.IdCliente)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdForwarding).IsUnicode(false);

                entity.Property(e => e.IdProveedor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdTipoVehiculo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioAutoriza).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.Puente).IsUnicode(false);

                entity.Property(e => e.PuestoQueAutoriza).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.ShipRefer).IsUnicode(false);
            });

            modelBuilder.Entity<Fsituacion>(entity =>
            {
                entity.Property(e => e.Pk1).ValueGeneratedOnAdd();

                entity.Property(e => e.Situacion).IsUnicode(false);
            });

            modelBuilder.Entity<FsituacionPedimento>(entity =>
            {
                entity.Property(e => e.Situacion).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<Fsolicitud251>(entity =>
            {
                entity.HasKey(e => new { e.Patente, e.Curp, e.Folio, e.NumCons, e.Rfc, e.Operacion });

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.Curp).IsUnicode(false);

                entity.Property(e => e.Folio).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Operacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FsolicitudConsecutivo>(entity =>
            {
                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FsolicitudEncargo>(entity =>
            {
                entity.HasKey(e => new { e.Patente, e.Curp, e.Folio });

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.Curp).IsUnicode(false);

                entity.Property(e => e.Folio).IsUnicode(false);

                entity.Property(e => e.Firma).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FsolicitudFfrr>(entity =>
            {
                entity.HasKey(e => e.IdSolicitud)
                    .HasName("pk_fsolicitud_ffrr");

                entity.Property(e => e.IdSolicitud).IsUnicode(false);

                entity.Property(e => e.ClaseTrafico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CondicionesPago)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescripcionClasificacion).IsUnicode(false);

                entity.Property(e => e.DescripcionFlete).IsUnicode(false);

                entity.Property(e => e.IdAgenciaAduanal).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdClienteFactura).IsUnicode(false);

                entity.Property(e => e.IdUnidad).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);

                entity.Property(e => e.InstruccionManejo).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Stcc).IsUnicode(false);

                entity.Property(e => e.TipoServicio)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FsolicitudFfrrDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdSolicitud, e.IdReferencia, e.IdRectificacion })
                    .HasName("pk_fsolicitud_ffrr_detalle");

                entity.Property(e => e.IdSolicitud).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FtabuladorPlano>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoCliente, e.IdConcepto })
                    .HasName("pk_ftabulador_plano");

                entity.Property(e => e.IdTipoCliente).IsUnicode(false);

                entity.Property(e => e.IdConcepto).IsUnicode(false);
            });

            modelBuilder.Entity<FtabuladorRango>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoCliente, e.IdConcepto, e.NoSec })
                    .HasName("pk_ftabulador_rangos");

                entity.Property(e => e.IdTipoCliente).IsUnicode(false);

                entity.Property(e => e.IdConcepto).IsUnicode(false);
            });

            modelBuilder.Entity<FtempPedimentoDetalleObservacion>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial, e.Secuencial })
                    .HasName("pk_temp_det_observa");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<FtemporalPedimentoCaso>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial })
                    .HasName("pk_temp_pedcaso");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdenCaso).IsUnicode(false);

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FtemporalPedimentoDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.NumeroSecuencial })
                    .HasName("pk_temp_pedimento_detalle");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.CveUnidadComercial).IsUnicode(false);

                entity.Property(e => e.CveUnidadTarifa).IsUnicode(false);

                entity.Property(e => e.IdFraccion).IsUnicode(false);

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.IdVinculacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PaisOrigen).IsUnicode(false);

                entity.Property(e => e.PaisVendedor).IsUnicode(false);

                entity.Property(e => e.Sensible)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsoEdoMercancia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Valoracion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FtemporalPedimentoObservacion>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.Secuencial })
                    .HasName("pk_temp_observacion");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<FtemporalSello>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion, e.IdTipoVehiculo, e.NumeroVehiculo, e.Sello })
                    .HasName("pk_ftemporal_sello");

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.Sello).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);
            });

            modelBuilder.Entity<FtipoAdvalorem>(entity =>
            {
                entity.HasKey(e => e.IdTipoAdvalorem)
                    .HasName("pk_ftipo_advalorem");

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.DescTipoAdv).IsUnicode(false);

                entity.Property(e => e.DescTipoAdvAbre).IsUnicode(false);

                entity.Property(e => e.IdPais).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.IdentCaso).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FtipoAdvaloremComplemento>(entity =>
            {
                entity.HasKey(e => e.IdTipoAdvalorem)
                    .HasName("PK__ftipo_ad__7E34A6C00933B5C5");

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.Complemento).IsUnicode(false);
            });

            modelBuilder.Entity<FtipoCalculo>(entity =>
            {
                entity.HasKey(e => new { e.IdTipoCalculo, e.CveMexAme })
                    .HasName("pk_ftipo_calculo");

                entity.Property(e => e.IdTipoCalculo).IsUnicode(false);

                entity.Property(e => e.CveMexAme)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.Reestriccion1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Reestriccion2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Reestriccion3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Select1).IsUnicode(false);

                entity.Property(e => e.Select2).IsUnicode(false);

                entity.Property(e => e.SelectExp1).IsUnicode(false);

                entity.Property(e => e.Where1).IsUnicode(false);

                entity.Property(e => e.Where2).IsUnicode(false);

                entity.Property(e => e.WhereExp1).IsUnicode(false);
            });

            modelBuilder.Entity<FtipoCambio>(entity =>
            {
                entity.HasKey(e => new { e.IdFecha, e.CveTipoDolar })
                    .HasName("pk_tipo_cambio");

                entity.Property(e => e.CveTipoDolar)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FtipoConcepto>(entity =>
            {
                entity.HasKey(e => e.IdTipoConcepto)
                    .HasName("pk_ftipo_concepto");

                entity.Property(e => e.IdTipoConcepto).IsUnicode(false);

                entity.Property(e => e.Abreviado).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FtipoCuentum>(entity =>
            {
                entity.HasKey(e => e.TipoCuenta)
                    .HasName("PK__ftipo_cu__8B31556C32BA9748");

                entity.Property(e => e.TipoCuenta).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FtipoDeCliente>(entity =>
            {
                entity.HasKey(e => e.IdTipoCliente)
                    .HasName("pk_ftipo_de_cliente");

                entity.Property(e => e.IdTipoCliente).IsUnicode(false);

                entity.Property(e => e.CveTipoCliente).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FtipoEnvio>(entity =>
            {
                entity.Property(e => e.IdTipo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdConcepto).IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FtipoFactura>(entity =>
            {
                entity.HasKey(e => e.IdTipoFactura)
                    .HasName("pk_ftipo_factura");

                entity.Property(e => e.IdTipoFactura).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Inactivo).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FtipoFlete>(entity =>
            {
                entity.Property(e => e.IdTipoFlete).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FtipoInbond>(entity =>
            {
                entity.HasKey(e => e.TipoInbond)
                    .HasName("PK__ftipo_in__4AEBFBBB4238E0A9");

                entity.Property(e => e.TipoInbond).IsUnicode(false);
            });

            modelBuilder.Entity<FtipoIva>(entity =>
            {
                entity.HasKey(e => e.IdTipoIva)
                    .HasName("pk_ftipo_iva");

                entity.Property(e => e.IdTipoIva).IsUnicode(false);

                entity.Property(e => e.DescripcionTipoIva).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FtipoMaterial>(entity =>
            {
                entity.Property(e => e.IdTipo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FtipoMaterialProd>(entity =>
            {
                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdTipoMaterial).IsUnicode(false);
            });

            modelBuilder.Entity<FtipoMercancium>(entity =>
            {
                entity.HasKey(e => e.TipoMercancia)
                    .HasName("pk_ ftipo_mercancia");

                entity.Property(e => e.TipoMercancia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripción).IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FtipoMovtoAlmacen>(entity =>
            {
                entity.HasKey(e => e.IdTipoMovto)
                    .HasName("pk_ftipo_movto_almacen");

                entity.Property(e => e.IdTipoMovto).IsUnicode(false);

                entity.Property(e => e.CveCargoCredito)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FtipoOrganizacion>(entity =>
            {
                entity.HasKey(e => e.CveTipoOrganizacion)
                    .HasName("i_tipo_organizacion");

                entity.Property(e => e.CveTipoOrganizacion).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FtipoPedimento>(entity =>
            {
                entity.HasKey(e => e.IdTipoPedimento)
                    .HasName("pk_ftipo_pedimento");

                entity.Property(e => e.IdTipoPedimento).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FtipoPedimentoAmericano>(entity =>
            {
                entity.HasKey(e => e.IdPedimento)
                    .HasName("PK__ftipo_pe__B77C139504CBAA8C");

                entity.Property(e => e.IdPedimento).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FtipoPermiso>(entity =>
            {
                entity.HasKey(e => e.IdTipoPermiso)
                    .HasName("pk_ftipo_permiso");

                entity.Property(e => e.IdTipoPermiso).IsUnicode(false);

                entity.Property(e => e.DescTipoPerm).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FtipoRegiman>(entity =>
            {
                entity.HasKey(e => e.IdTipoRegimen)
                    .HasName("pk_tipo_regimen");

                entity.Property(e => e.IdTipoRegimen).IsUnicode(false);

                entity.Property(e => e.DescripTipoRegimen).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FtipoUsuario>(entity =>
            {
                entity.HasKey(e => e.IdClase)
                    .HasName("pk_ftipo_usuario");

                entity.Property(e => e.IdClase).IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FtipoVehic>(entity =>
            {
                entity.HasKey(e => e.IdTipoVehiculo)
                    .HasName("pk_ftipo_vehic");

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.Abreviado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveTransporte)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.IdTipoContenedor).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Sellos)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FtlcanPermiso>(entity =>
            {
                entity.HasKey(e => new { e.IdPermiso, e.IdPais })
                    .HasName("pk_ftlcan_permiso");

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.IdPais).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FtlcanRegiman>(entity =>
            {
                entity.HasKey(e => new { e.CveTipoOperacion, e.IdRegimen })
                    .HasName("pk_ftlcan_regimen");

                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FtlcuePai>(entity =>
            {
                entity.HasKey(e => new { e.IdPais, e.IdPermiso })
                    .HasName("pk_ftlcue_pais");

                entity.Property(e => e.IdPais).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Ftmpfactura>(entity =>
            {
                entity.HasKey(e => new { e.IdEmbarque, e.IdTrafico })
                    .HasName("pk_tmpfactura");

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.Consolidado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdReferencia).IsUnicode(false);
            });

            modelBuilder.Entity<Ftmppai>(entity =>
            {
                entity.HasKey(e => e.Saai96)
                    .HasName("pk_pais");

                entity.Property(e => e.Saai96)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Saaim3)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FtradingAmericana>(entity =>
            {
                entity.HasKey(e => e.CtaGas)
                    .HasName("pk_ftrading_americana");

                entity.Property(e => e.CtaGas)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Anticipo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CanPor)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cliente)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Comentario)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DesCta)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Factura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FleteMex)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FleteUsa)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Folio)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Hua)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LfleteMex)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LfleteUsa)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OrdenSal)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PcMex)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PcUsa)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Poliza)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PolizaCan)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RefPago)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Tarifa)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Trafico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FtradingAmericanaDetalle>(entity =>
            {
                entity.HasKey(e => new { e.CtaGas, e.CveMov })
                    .HasName("pk_ftrading_americana_detalle");

                entity.Property(e => e.CtaGas)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveMov)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cliente)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DesMov)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Hua)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Trafico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FtradingAnticipo>(entity =>
            {
                entity.HasKey(e => new { e.Referencia, e.Transferencia, e.Anticipo })
                    .HasName("pk_ftrading_anticipo");

                entity.Property(e => e.Referencia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Transferencia)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FtradingCliente>(entity =>
            {
                entity.HasKey(e => e.IdCliente)
                    .HasName("pk_ftrading_cliente");

                entity.Property(e => e.IdCliente).IsUnicode(false);
            });

            modelBuilder.Entity<FtradingMexicana>(entity =>
            {
                entity.HasKey(e => e.NFactura)
                    .HasName("pk_ftrading_mexicana");

                entity.Property(e => e.NFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveClie)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NCtaamer)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NFacturas)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumPdto)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Referencia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Regimen)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sucursal)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FtraficoCaso>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.Secuencial });

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);

                entity.Property(e => e.IdenCaso).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FtraficoDesasociado>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.FechaUltmodif });

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<FtraficoDetalleCaso>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.NumeroSecuencial, e.NumeroIdentificador, e.TipoCaso });

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);

                entity.Property(e => e.IdenCaso).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FtraficoDetalleCasoAux>(entity =>
            {
                entity.HasKey(e => new { e.IdTrafico, e.NumeroSecuencial, e.NumeroIdentificador, e.TipoCaso, e.IdenCaso });

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdenCaso).IsUnicode(false);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);
            });

            modelBuilder.Entity<FtransfSello>(entity =>
            {
                entity.HasKey(e => new { e.IdEmbarque, e.NoSecuencial })
                    .HasName("pk_ftransf_sello");

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.Capacidad)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CapacidadSalida)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Categoria)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fecha).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdTipoVehiculo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdTransfer).IsUnicode(false);

                entity.Property(e => e.IdTransferPagado).IsUnicode(false);

                entity.Property(e => e.LineaFleteraOrigen).IsUnicode(false);

                entity.Property(e => e.MeNumber).IsUnicode(false);

                entity.Property(e => e.Motivo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NombreChofer).IsUnicode(false);

                entity.Property(e => e.NumVehiculo).IsUnicode(false);

                entity.Property(e => e.Placas).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Sello).IsUnicode(false);

                entity.Property(e => e.TipoCaja)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FtransfSelloLight>(entity =>
            {
                entity.HasKey(e => new { e.IdEmbarque, e.NoSecuencial })
                    .HasName("pk_ftransf_sello_light");

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.Caaat).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NumVehiculo).IsUnicode(false);

                entity.Property(e => e.Sello).IsUnicode(false);
            });

            modelBuilder.Entity<FtransferPagado>(entity =>
            {
                entity.HasKey(e => e.IdTransferPagado)
                    .HasName("PK__ftransfe__196B78BD1A6CFA38");

                entity.Property(e => e.IdTransferPagado).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<FultimateConsigneeType>(entity =>
            {
                entity.HasKey(e => e.UltimateConsigneeType)
                    .HasName("pk_ultimate_consignee_type");

                entity.Property(e => e.UltimateConsigneeType).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<Funidad>(entity =>
            {
                entity.HasKey(e => e.IdUnidad)
                    .HasName("pk_funidad");

                entity.Property(e => e.IdUnidad).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FunidadCfdi>(entity =>
            {
                entity.HasKey(e => e.IdUnidad)
                    .HasName("PK__funidad___95D7C92BF89AC601");

                entity.Property(e => e.IdUnidad).IsUnicode(false);

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);
            });

            modelBuilder.Entity<FunidadConversion>(entity =>
            {
                entity.Property(e => e.IdUnidad).IsUnicode(false);

                entity.Property(e => e.IdUnidadCom).IsUnicode(false);
            });

            modelBuilder.Entity<FunidadUniversal>(entity =>
            {
                entity.HasKey(e => e.IdUnidadUniversal)
                    .HasName("pk_unidad_universal");

                entity.Property(e => e.IdUnidadUniversal).IsUnicode(false);

                entity.Property(e => e.AbreviaAme).IsUnicode(false);

                entity.Property(e => e.CveMexicana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CveUnidadOficial).IsUnicode(false);

                entity.Property(e => e.DescAbreviada).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionCove).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.Entero)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UnidadCove).IsUnicode(false);

                entity.Property(e => e.UnidadUm).IsUnicode(false);
            });

            modelBuilder.Entity<FunidadesFacturacion>(entity =>
            {
                entity.HasKey(e => e.IdUnidadFacturacion)
                    .HasName("pk_funidad_facturacion");

                entity.Property(e => e.IdUnidadFacturacion).IsUnicode(false);

                entity.Property(e => e.CClaveUnidad).IsUnicode(false);

                entity.Property(e => e.DescCorta).IsUnicode(false);

                entity.Property(e => e.DescripcionLarga).IsUnicode(false);

                entity.Property(e => e.IdUsuarioRegistro).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltmodif).IsUnicode(false);

                entity.Property(e => e.NombreSat).IsUnicode(false);
            });

            modelBuilder.Entity<Fuser>(entity =>
            {
                entity.HasKey(e => e.IdUser)
                    .HasName("pk_fuser");

                entity.Property(e => e.IdUser).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<FusoProducto>(entity =>
            {
                entity.HasKey(e => e.Clave)
                    .HasName("PK_Fuso_producto");

                entity.Property(e => e.Clave)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Clasificaccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descrpcion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<Fusuario>(entity =>
            {
                entity.HasKey(e => e.IdUsuario)
                    .HasName("i_id_usuario");

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.AccesoLight)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ApMaterno).IsUnicode(false);

                entity.Property(e => e.ApPaterno).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.ContrasenaPagoVulnerable).IsUnicode(false);

                entity.Property(e => e.ContrasenaReferenciaVulnerable).IsUnicode(false);

                entity.Property(e => e.ContrasenaTraficoVulnerable).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.Curp).IsUnicode(false);

                entity.Property(e => e.CveTelefono).IsUnicode(false);

                entity.Property(e => e.CveTipoOrganizacion).IsUnicode(false);

                entity.Property(e => e.EstadoCivil)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdClase).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdOrg).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.Master)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.NumSerie).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.PassDesbloquearCove).IsUnicode(false);

                entity.Property(e => e.PassRectSinCove).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.PasswordAnexo10).IsUnicode(false);

                entity.Property(e => e.PasswordCuentaGeneral).IsUnicode(false);

                entity.Property(e => e.PasswordFactura).IsUnicode(false);

                entity.Property(e => e.PasswordInterface).IsUnicode(false);

                entity.Property(e => e.PasswordMatch).IsUnicode(false);

                entity.Property(e => e.PasswordPedimentoDesistido).IsUnicode(false);

                entity.Property(e => e.PasswordProval)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PasswordR1).IsUnicode(false);

                entity.Property(e => e.PasswordVal).IsUnicode(false);

                entity.Property(e => e.PswArchivoBancos).IsUnicode(false);

                entity.Property(e => e.PwdMonto).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.RutaCove).IsUnicode(false);

                entity.Property(e => e.Seccion).IsUnicode(false);

                entity.Property(e => e.Sexo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);

                entity.Property(e => e.Telefono3).IsUnicode(false);

                entity.Property(e => e.Telefono4).IsUnicode(false);

                entity.Property(e => e.TipoConexionCove).IsUnicode(false);

                entity.Property(e => e.Titulo).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.HasOne(d => d.IdClaseNavigation)
                    .WithMany(p => p.Fusuarios)
                    .HasForeignKey(d => d.IdClase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk2_fusuario");

                entity.HasOne(d => d.IdMunicipioNavigation)
                    .WithMany(p => p.Fusuarios)
                    .HasForeignKey(d => d.IdMunicipio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk1_fusuario");
            });

            modelBuilder.Entity<FvalidaProductoRegiman>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdRegimen, e.IdProducto, e.CveTipoOperacion })
                    .HasName("pk_fvalida_producto_regimen");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.CveTipoOperacion).IsUnicode(false);
            });

            modelBuilder.Entity<FvalidacionPedimento>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdRectificacion });

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);

                entity.Property(e => e.IdUsuarioUltModif).IsUnicode(false);
            });

            modelBuilder.Entity<Fvaloracion>(entity =>
            {
                entity.HasKey(e => e.IdValoracion)
                    .HasName("pk_valoracion");

                entity.Property(e => e.IdValoracion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<FventanasConsecutivo>(entity =>
            {
                entity.Property(e => e.Ventana).IsUnicode(false);
            });

            modelBuilder.Entity<FversionVigenciaCove>(entity =>
            {
                entity.HasKey(e => e.Version)
                    .HasName("PK__fversion__79B5C94C1A5FF979");

                entity.Property(e => e.Version).IsUnicode(false);

                entity.Property(e => e.TipoVersion).IsUnicode(false);
            });

            modelBuilder.Entity<FvinculacionClienteProveedor>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdRegimen })
                    .HasName("pk_cliente");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdVinculacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UsoEdoMercancia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Valoracion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<GAduEdi>(entity =>
            {
                entity.Property(e => e.FraccionTotal).IsUnicode(false);
            });

            modelBuilder.Entity<GgAutorizacione>(entity =>
            {
                entity.HasKey(e => new { e.NoModulo, e.NoTarea, e.NoAutorizacion, e.Usuario })
                    .HasName("PK_gg_autorizaciones_1__12");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.PasswordSec)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<GgAutorizacionesModulo>(entity =>
            {
                entity.HasKey(e => new { e.NoModulo, e.NoTarea, e.NoAutorizacion })
                    .HasName("PK_gg_autorizaciones_mod");

                entity.Property(e => e.Descripcion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<GgCatempresa>(entity =>
            {
                entity.HasKey(e => e.EmpresaResponsable)
                    .HasName("pk_gg_catempresa");

                entity.Property(e => e.Nombre).IsUnicode(false);
            });

            modelBuilder.Entity<GgCiudad>(entity =>
            {
                entity.HasKey(e => new { e.Ciudad, e.Estado })
                    .HasName("pk_gg_ciudad");

                entity.Property(e => e.Ciudad).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);
            });

            modelBuilder.Entity<GgConcurso>(entity =>
            {
                entity.HasKey(e => e.CveConcurso)
                    .HasName("pk_gg_concursos");

                entity.Property(e => e.CveConcurso).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<GgContrato>(entity =>
            {
                entity.HasKey(e => e.CveContrato)
                    .HasName("pk_gg_contratos");

                entity.Property(e => e.CveContrato).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<GgDwcampo>(entity =>
            {
                entity.HasKey(e => new { e.Dwname, e.Numcolumn })
                    .HasName("pk_gg_dwcampos");

                entity.Property(e => e.Dwname).IsUnicode(false);

                entity.Property(e => e.Fieldname).IsUnicode(false);

                entity.Property(e => e.PathHelp).IsUnicode(false);
            });

            modelBuilder.Entity<GgDwcamposCopy>(entity =>
            {
                entity.Property(e => e.Dwname).IsUnicode(false);

                entity.Property(e => e.Fieldname).IsUnicode(false);

                entity.Property(e => e.PathHelp).IsUnicode(false);
            });

            modelBuilder.Entity<GgEstado>(entity =>
            {
                entity.HasKey(e => e.Estado)
                    .HasName("pk_gg_estado");

                entity.Property(e => e.Nombre).IsUnicode(false);
            });

            modelBuilder.Entity<GgImagene>(entity =>
            {
                entity.HasKey(e => e.Icono)
                    .HasName("pk_gg_imagenes")
                    .IsClustered(false);

                entity.HasIndex(e => e.Icono, "pk_gg_imagenes_1")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Icono).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Modulo).IsUnicode(false);
            });

            modelBuilder.Entity<GgLastWork>(entity =>
            {
                entity.HasKey(e => new { e.UsrId, e.TipoOpc, e.Dato })
                    .HasName("last_work")
                    .IsClustered(false);

                entity.Property(e => e.UsrId).IsUnicode(false);

                entity.Property(e => e.Dato).IsUnicode(false);

                entity.Property(e => e.Etiqueta).IsUnicode(false);

                entity.Property(e => e.ProyRelacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<GgLlafe>(entity =>
            {
                entity.Property(e => e.Llaves).IsUnicode(false);

                entity.Property(e => e.Tabla).IsUnicode(false);
            });

            modelBuilder.Entity<GgMascarasCampo>(entity =>
            {
                entity.Property(e => e.NombreCampo).IsUnicode(false);

                entity.Property(e => e.TipoMascara).IsUnicode(false);
            });

            modelBuilder.Entity<GgMensaje>(entity =>
            {
                entity.HasKey(e => new { e.NoModulo, e.NoMensaje })
                    .HasName("pk_gg_mensajes");

                entity.Property(e => e.Mensaje).IsUnicode(false);
            });

            modelBuilder.Entity<GgMiSistema>(entity =>
            {
                entity.HasKey(e => new { e.UsrId, e.NoModulo, e.NoTarea })
                    .HasName("mi_sistema")
                    .IsClustered(false);

                entity.Property(e => e.UsrId).IsUnicode(false);
            });

            modelBuilder.Entity<GgModulo>(entity =>
            {
                entity.HasKey(e => e.NoModulo)
                    .HasName("PK___1__12");

                entity.Property(e => e.NoModulo).ValueGeneratedNever();

                entity.Property(e => e.Nombre).IsUnicode(false);
            });

            modelBuilder.Entity<GgNivelAdm>(entity =>
            {
                entity.HasKey(e => new { e.Numproy, e.NoModulo })
                    .HasName("gg_nivel_adm")
                    .IsClustered(false);

                entity.Property(e => e.Numproy).IsUnicode(false);
            });

            modelBuilder.Entity<GgReporte>(entity =>
            {
                entity.HasKey(e => new { e.NoModulo, e.NoTarea, e.NoReporte })
                    .HasName("pk_gg_reportes");

                entity.Property(e => e.AliasSica).IsUnicode(false);

                entity.Property(e => e.DwName).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.NombreWindow).IsUnicode(false);

                entity.Property(e => e.PathHelp).IsUnicode(false);
            });

            modelBuilder.Entity<GgReportes2>(entity =>
            {
                entity.HasKey(e => new { e.NoModulo, e.NoTarea, e.NoReporte })
                    .HasName("pk_gg_reportes2");

                entity.Property(e => e.Tablas).IsUnicode(false);
            });

            modelBuilder.Entity<GgTareasModulo>(entity =>
            {
                entity.HasKey(e => new { e.NoModulo, e.NoTarea, e.TipoTarea })
                    .IsClustered(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.NombreWindow).IsUnicode(false);

                entity.Property(e => e.PathHelp).IsUnicode(false);
            });

            modelBuilder.Entity<GtoClavesIso>(entity =>
            {
                entity.Property(e => e.ClaveRepIso).IsUnicode(false);

                entity.Property(e => e.RevisionIso).IsUnicode(false);
            });

            modelBuilder.Entity<LogMov>(entity =>
            {
                entity.Property(e => e.Cveconcepto).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Usuarios).IsUnicode(false);
            });

            modelBuilder.Entity<Mascara>(entity =>
            {
                entity.HasKey(e => e.AtributoName)
                    .HasName("mascara")
                    .IsClustered(false);

                entity.Property(e => e.AtributoName).IsUnicode(false);

                entity.Property(e => e.Mascara1).IsUnicode(false);
            });

            modelBuilder.Entity<MascarasEstructura>(entity =>
            {
                entity.HasKey(e => new { e.NumEspacio, e.AtributoName })
                    .HasName("mascaras_atr")
                    .IsClustered(false);

                entity.Property(e => e.AtributoName).IsUnicode(false);
            });

            modelBuilder.Entity<MateriaPrima>(entity =>
            {
                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionIngles).IsUnicode(false);

                entity.Property(e => e.NumParte).IsUnicode(false);

                entity.Property(e => e.NumParte1).IsUnicode(false);

                entity.Property(e => e.PaisOrigen).IsUnicode(false);

                entity.Property(e => e.Unidad).IsUnicode(false);
            });

            modelBuilder.Entity<NoEmpresa>(entity =>
            {
                entity.HasIndex(e => e.Numempresa, "no_empresa_x")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Calle)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Ciudad)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Colonia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Contacto).IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Estado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fax)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Fax2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Infonavit)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Localidad).IsUnicode(false);

                entity.Property(e => e.NoExterior).IsUnicode(false);

                entity.Property(e => e.NoInterior).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.NombreCorporativo).IsUnicode(false);

                entity.Property(e => e.Pais)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Telefono1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Telefono2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Version).IsUnicode(false);
            });

            modelBuilder.Entity<NoParametro>(entity =>
            {
                entity.HasIndex(e => new { e.TipoParametro, e.CveParametro }, "no_parametros")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CveParametro).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<NoPersonal>(entity =>
            {
                entity.HasKey(e => e.NumEmpleado)
                    .HasName("pk_no_personal")
                    .IsClustered(false);

                entity.Property(e => e.ApellidoMaterno).IsUnicode(false);

                entity.Property(e => e.ApellidoPaterno).IsUnicode(false);

                entity.Property(e => e.Ciudad).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.CtaBancono).IsUnicode(false);

                entity.Property(e => e.CtaBancosar).IsUnicode(false);

                entity.Property(e => e.Curp).IsUnicode(false);

                entity.Property(e => e.CveCategoria).IsUnicode(false);

                entity.Property(e => e.CveUbicacion).IsUnicode(false);

                entity.Property(e => e.Delegacion).IsUnicode(false);

                entity.Property(e => e.Direccion).IsUnicode(false);

                entity.Property(e => e.Estado).IsUnicode(false);

                entity.Property(e => e.Motivos).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.NombreEmpl).IsUnicode(false);

                entity.Property(e => e.NumContrato).IsUnicode(false);

                entity.Property(e => e.NumSs).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.Rfc)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sexo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);

                entity.Property(e => e.TipoPersonal).IsUnicode(false);

                entity.Property(e => e.TipoSalario).IsUnicode(false);
            });

            modelBuilder.Entity<NomBanco>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.IdBanco });

                entity.Property(e => e.ClaveBancoSat).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.NombreCorto).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);
            });

            modelBuilder.Entity<NormCliente>(entity =>
            {
                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.NuevoId).IsUnicode(false);
            });

            modelBuilder.Entity<OcActividadClasificacion>(entity =>
            {
                entity.HasKey(e => new { e.IdTarea, e.IdActividad })
                    .HasName("PK__oc_activ__ED21C38F0A48E80A");

                entity.Property(e => e.IdTarea).IsUnicode(false);

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.UsuarioInserta).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcAgenciaPatente>(entity =>
            {
                entity.HasKey(e => new { e.IdAgenciaAduanal, e.IdPatente })
                    .HasName("PKoc_agencia_patente");

                entity.Property(e => e.IdAgenciaAduanal).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);
            });

            modelBuilder.Entity<OcAlmacenGenerale>(entity =>
            {
                entity.HasKey(e => e.IdAlmacen)
                    .HasName("PKoc_almacen_generales");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.EmbarqueOpcional).HasDefaultValueSql("((1))");

                entity.Property(e => e.LocalizacionCarga).IsUnicode(false);

                entity.Property(e => e.LocalizacionPaq).IsUnicode(false);

                entity.Property(e => e.PasswordDesbloqueo).IsUnicode(false);

                entity.Property(e => e.PesoEmbarque).HasDefaultValueSql("((45000))");

                entity.Property(e => e.PrefijoAgrupacion).IsUnicode(false);

                entity.Property(e => e.TipoBultoPaq).IsUnicode(false);

                entity.Property(e => e.TipoVehiculoPaq).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);

                entity.Property(e => e.ValidarExw).HasDefaultValueSql("((1))");

                entity.Property(e => e.ValidarPesoEmbarque).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<OcAsnBulto>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.Asn, e.SecuencialBulto })
                    .HasName("PKoc_asn_bulto");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Asn).IsUnicode(false);

                entity.Property(e => e.CantidadBultos).HasDefaultValueSql("((1))");

                entity.Property(e => e.Guia).IsUnicode(false);

                entity.Property(e => e.NoBulto).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.TipoBulto).IsUnicode(false);

                entity.Property(e => e.TipoMaterial)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcAsnEncabezado>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.Asn })
                    .HasName("PKoc_asn_encabezado");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Asn).IsUnicode(false);

                entity.Property(e => e.AsnProveedor).IsUnicode(false);

                entity.Property(e => e.Guia).IsUnicode(false);

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdDestinoFinal).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.Incoterm).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.Sello1).IsUnicode(false);

                entity.Property(e => e.Sello2).IsUnicode(false);

                entity.Property(e => e.StatusAsn).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoCarga).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTransporte).IsUnicode(false);

                entity.Property(e => e.UnidadPeso).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcAsnProducto>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.Asn, e.SecuencialBulto, e.SecuencialProducto })
                    .HasName("PKoc_asn_producto");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Asn).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.FraccionAme).IsUnicode(false);

                entity.Property(e => e.FraccionMex).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.IdProductoCliente).IsUnicode(false);

                entity.Property(e => e.IdProductoProveedor).IsUnicode(false);

                entity.Property(e => e.IdUnidadMedida).IsUnicode(false);

                entity.Property(e => e.NoEntrega).IsUnicode(false);

                entity.Property(e => e.NoLote).IsUnicode(false);

                entity.Property(e => e.PaisOrigen).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcBodegaAgente>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdBodega })
                    .HasName("PKoc_bodega_agente");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdBodegaAgente).IsUnicode(false);
            });

            modelBuilder.Entity<OcBulto>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.SecuencialGuia, e.SecuencialBulto })
                    .HasName("PKoc_bultos");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.CantidadBultos).HasDefaultValueSql("((1))");

                entity.Property(e => e.CantidadDesglose).HasDefaultValueSql("((1))");

                entity.Property(e => e.FolioAgrupacion).IsUnicode(false);

                entity.Property(e => e.Guia).IsUnicode(false);

                entity.Property(e => e.LocalizacionAlmacen).IsUnicode(false);

                entity.Property(e => e.Numeros).IsUnicode(false);

                entity.Property(e => e.StatusOperacion).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoBulto).IsUnicode(false);

                entity.Property(e => e.TipoBultoDesglose).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcBultoAsn>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.Asn, e.IdCliente, e.SecuencialBulto })
                    .HasName("PKoc_bulto_asn");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.Asn).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Guia).IsUnicode(false);

                entity.Property(e => e.NoBulto).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.TipoBulto).IsUnicode(false);

                entity.Property(e => e.TipoMaterial)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcBultoLocalizacion>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.NoPallet })
                    .HasName("PKoc_bulto_localizacion");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.Localizacion).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcBultoProducto>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.SecuencialGuia, e.SecuencialBulto, e.SecuencialProducto })
                    .HasName("PKoc_bulto_producto");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdPacking).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdUnidadMedida).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcBultoProductoAsn>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdCliente, e.Asn, e.SecuencialBulto, e.SecuencialProducto })
                    .HasName("PKoc_bulto_producto_asn");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Asn).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.FraccionAme).IsUnicode(false);

                entity.Property(e => e.FraccionMex).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.IdProductoCliente).IsUnicode(false);

                entity.Property(e => e.IdProductoProveedor).IsUnicode(false);

                entity.Property(e => e.IdUnidadMedida).IsUnicode(false);

                entity.Property(e => e.NoEntrega).IsUnicode(false);

                entity.Property(e => e.NoLote).IsUnicode(false);

                entity.Property(e => e.PaisOrigen).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcBultoProductoSerie>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.SecuencialGuia, e.SecuencialBulto, e.SecuencialProducto, e.SecuencialSerie })
                    .HasName("PKoc_bulto_producto_serie");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.SubModelo).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcChofer>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.NoControl })
                    .HasName("PKoc_chofer");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.NoControl).IsUnicode(false);

                entity.Property(e => e.EstadoLicencia).IsUnicode(false);

                entity.Property(e => e.LineaTransportista).IsUnicode(false);

                entity.Property(e => e.NoControlGuia).IsUnicode(false);

                entity.Property(e => e.NoLicencia).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcClaseCarga>(entity =>
            {
                entity.HasKey(e => e.ClaseCarga)
                    .HasName("PKoc_clase_carga");

                entity.Property(e => e.ClaseCarga).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcClaseLocalizacion>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdClase, e.IdLocalizacion })
                    .HasName("PKoc_clase_localizacion");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdLocalizacion).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<OcClaseMaterial>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdClase })
                    .HasName("PKoc_clase_material");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcConfServidor>(entity =>
            {
                entity.Property(e => e.BdSql).IsUnicode(false);

                entity.Property(e => e.ContraseñaSql).IsUnicode(false);

                entity.Property(e => e.LugarLlamada).IsUnicode(false);

                entity.Property(e => e.ServidorSql).IsUnicode(false);

                entity.Property(e => e.UsuarioSql).IsUnicode(false);
            });

            modelBuilder.Entity<OcConsignatario>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdConsignatario })
                    .HasName("PKoc_consignatario");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdConsignatario).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcConsignatarioAlmacen>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdConsignatario, e.IdAlmacen })
                    .HasName("PKoc_consignatario_almacen");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdConsignatario).IsUnicode(false);

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<OcConsolidacion>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdConsolidacion })
                    .HasName("PKoc_consolidacion");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdConsolidacion).IsUnicode(false);

                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.ClaveDocumento).IsUnicode(false);

                entity.Property(e => e.Corresponsal).IsUnicode(false);

                entity.Property(e => e.Embarque).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.IdPlantCode).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.ModoTransporte).IsUnicode(false);

                entity.Property(e => e.NoEei).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.OperacionEspecial).HasDefaultValueSql("((0))");

                entity.Property(e => e.Packing).HasDefaultValueSql("((0))");

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sello1).IsUnicode(false);

                entity.Property(e => e.Sello2).IsUnicode(false);

                entity.Property(e => e.TipoCarga).IsUnicode(false);

                entity.Property(e => e.TipoImportacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTransporte).IsUnicode(false);

                entity.Property(e => e.UsuarioConsolida).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcConsolidacionDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdInstruccion })
                    .HasName("PKoc_consolidacion_detalle");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdInstruccion).IsUnicode(false);

                entity.Property(e => e.IdConsolidacion).IsUnicode(false);

                entity.Property(e => e.UsuarioConsolida).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<OcConsolidacionFactura>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdConsolidacion, e.SecuencialFactura })
                    .HasName("PK__oc_conso__0337FD09D306E737");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdConsolidacion).IsUnicode(false);

                entity.Property(e => e.Edocument).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Incoterm).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);

                entity.Property(e => e.Vinculacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<OcCubicaje>(entity =>
            {
                entity.Property(e => e.IdCubicaje).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<OcDestino>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdDestino })
                    .HasName("PKoc_destino");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.TarifaMoneda).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoOperacion, e.OrdenCompra, e.Posicion })
                    .HasName("PKoc_detalle");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.ClaveDocumento).IsUnicode(false);

                entity.Property(e => e.DescripcionErp).IsUnicode(false);

                entity.Property(e => e.Fraccion).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProveedor)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdUnidadMedida).IsUnicode(false);

                entity.Property(e => e.Proyecto).IsUnicode(false);

                entity.Property(e => e.StatusOrdenDetalle).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoImportacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<OcDetalleError>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoOperacion, e.OrdenCompra, e.Posicion, e.NombreArchivo })
                    .HasName("PKoc_detalle_error");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.NombreArchivo).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<OcDivisionArea>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.DivisionArea })
                    .HasName("PKoc_division_area");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.DivisionArea).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcEmbarque>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdEmbarque })
                    .HasName("PKoc_embarque");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.CodigoSalida).IsUnicode(false);

                entity.Property(e => e.CodigoVehiculo).IsUnicode(false);

                entity.Property(e => e.Color).IsUnicode(false);

                entity.Property(e => e.Comentarios).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdAgAdAme).IsUnicode(false);

                entity.Property(e => e.IdAgenciaAduanal).IsUnicode(false);

                entity.Property(e => e.IdApoderado).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdEmbarcador).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdTipoEmbarque)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NombreEmbarcador).IsUnicode(false);

                entity.Property(e => e.ObservacionCruce).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.ReferenciaAux).IsUnicode(false);

                entity.Property(e => e.SeccionAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioCancela).IsUnicode(false);

                entity.Property(e => e.UsuarioCarga).IsUnicode(false);

                entity.Property(e => e.UsuarioConfirma).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);

                entity.Property(e => e.UsuarioSalida).IsUnicode(false);

                entity.Property(e => e.Ventana).IsUnicode(false);

                entity.HasOne(d => d.IdAgAdAmeNavigation)
                    .WithMany(p => p.OcEmbarques)
                    .HasForeignKey(d => d.IdAgAdAme)
                    .HasConstraintName("id_ag_ad_ame");
            });

            modelBuilder.Entity<OcEmbarqueAlertaBitacora>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdEmbarque, e.FechaIngreso });

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<OcEmbarqueBillboardLog>(entity =>
            {
                entity.Property(e => e.Accion).IsUnicode(false);

                entity.Property(e => e.Fecha).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<OcEmbarqueBulto>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdInstruccion, e.IdReciboGuia, e.SecuencialGuia, e.SecuencialBulto })
                    .HasName("PKoc_embarque_bulto");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdInstruccion).IsUnicode(false);

                entity.Property(e => e.IdReciboGuia).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdConsolidacion).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.UsuarioCarga).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcEmbarqueBultoDistribucion>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.SecuencialGuia, e.SecuencialBulto })
                    .HasName("PKoc_embarque_bulto_distribucion");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.UsuarioCarga).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcEmbarqueConsolidacion>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdConsolidacion })
                    .HasName("PKoc_embarque_consolidacion");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdConsolidacion).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcEmbarqueDefault>(entity =>
            {
                entity.HasKey(e => e.CveTransporte)
                    .HasName("PK__oc_embar__BC05013FD8750E31");

                entity.Property(e => e.CveTransporte)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdTipoEmbarque)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdTransfer).IsUnicode(false);

                entity.Property(e => e.IdTransferPagado).IsUnicode(false);
            });

            modelBuilder.Entity<OcEmbarqueDestino>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdEmbarque, e.IdCliente, e.IdDestino })
                    .HasName("PKoc_embarque_destino");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.EntregadoA).IsUnicode(false);

                entity.Property(e => e.GuiaFlete).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.ProNumber).IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoFlete).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcEmbarqueDestinoVehiculo>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdEmbarque, e.IdCliente, e.IdDestino, e.SecuencialVehiculo })
                    .HasName("PKoc_embarque_destino_vehiculo");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<OcEmbarqueEei>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdEmbarque, e.NoEei })
                    .HasName("PKoc_embarque_eei");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.NoEei).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcEmbarqueInbond>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdEmbarque })
                    .HasName("PKoc_embarque_inbond");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.Inbond).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcEmbarqueNoCruzo>(entity =>
            {
                entity.Property(e => e.Titulo).IsUnicode(false);
            });

            modelBuilder.Entity<OcEmbarqueVehiculo>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdEmbarque, e.SecuencialVehiculo })
                    .HasName("PKoc_embarque_vehiculo");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.IdTransfer).IsUnicode(false);

                entity.Property(e => e.MeNumber).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.Placas).IsUnicode(false);

                entity.Property(e => e.TransferPagado).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcEmbarqueVehiculoSello>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdEmbarque, e.SecuencialVehiculo, e.SecuencialSello })
                    .HasName("PKoc_embarque_vehiculo_sello");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.Color).IsUnicode(false);

                entity.Property(e => e.Sello).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcEncabezado>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoOperacion, e.OrdenCompra })
                    .HasName("PKoc_encabezado");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.Compania).IsUnicode(false);

                entity.Property(e => e.Consignatario).IsUnicode(false);

                entity.Property(e => e.Destinatario).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.Incoterm).IsUnicode(false);

                entity.Property(e => e.IncotermDestino).IsUnicode(false);

                entity.Property(e => e.SerieOrdenCompra).IsUnicode(false);

                entity.Property(e => e.StatusOrden).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<OcEncabezadoError>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoOperacion, e.OrdenCompra, e.NombreArchivo })
                    .HasName("PKoc_encabezado_error");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.NombreArchivo).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<OcEnvioDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.Envio, e.Factura, e.SecuencialEnvio })
                    .HasName("PKoc_envio_detalle");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Envio).IsUnicode(false);

                entity.Property(e => e.Factura).IsUnicode(false);

                entity.Property(e => e.DescripcionErp).IsUnicode(false);

                entity.Property(e => e.DescripcionProducto).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdUnidadMedida).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.Proyecto).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<OcEnvioEncabezado>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.Envio, e.Factura })
                    .HasName("PKoc_envio_encabezado");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Envio).IsUnicode(false);

                entity.Property(e => e.Factura).IsUnicode(false);

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.Incoterm).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.SerieOrdenCompra).IsUnicode(false);

                entity.Property(e => e.StatusEnvio).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<OcError>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoOperacion, e.NombreArchivo })
                    .HasName("PKoc_error");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.NombreArchivo).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<OcEstadoMercancium>(entity =>
            {
                entity.HasKey(e => e.UsoEdoMercancia)
                    .HasName("PKoc_estado_mercancia");

                entity.Property(e => e.UsoEdoMercancia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcFacturaDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdFactura, e.SecuencialFactura })
                    .HasName("PKoc_factura_detalle");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.ComplementoPreferencia).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdPaisVendedor).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdUnidadMedida).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.Mv).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.Preferencia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Proyecto).IsUnicode(false);

                entity.Property(e => e.SinCantidadRecibida).HasDefaultValueSql("((0))");

                entity.Property(e => e.SituacionFactDetalle).HasDefaultValueSql("((1))");

                entity.Property(e => e.Sku).IsUnicode(false);

                entity.Property(e => e.StatusOperacion).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);

                entity.Property(e => e.Vinculacion).IsUnicode(false);
            });

            modelBuilder.Entity<OcFacturaDetalleSerie>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdFactura, e.SecuencialFactura, e.SecuencialSerie })
                    .HasName("PKoc_factura_detalle_serie");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.SubModelo).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcFacturaEncabezado>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdFactura })
                    .HasName("PKoc_factura_encabezado");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.AutorizaOrden).IsUnicode(false);

                entity.Property(e => e.Compania).IsUnicode(false);

                entity.Property(e => e.DivisionOrdenCompra).IsUnicode(false);

                entity.Property(e => e.Edocument).IsUnicode(false);

                entity.Property(e => e.Envio).IsUnicode(false);

                entity.Property(e => e.Folio).IsUnicode(false);

                entity.Property(e => e.GrupoProducto).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDestinatario).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.IdMonedaValorAgregado).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.Incoterm).IsUnicode(false);

                entity.Property(e => e.OrdenCompra)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProveedorCertifica).IsUnicode(false);

                entity.Property(e => e.SerieOrdenCompra).IsUnicode(false);

                entity.Property(e => e.SituacionFactura).HasDefaultValueSql("((1))");

                entity.Property(e => e.StatusFactura).HasDefaultValueSql("((1))");

                entity.Property(e => e.StatusOperacion).HasDefaultValueSql("((1))");

                entity.Property(e => e.Subdivision).HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.UnidadNegocio).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);

                entity.Property(e => e.Vinculacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<OcFacturaExpoDetalleSerie>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdFactura, e.SecuencialFactura, e.SecuencialSerie })
                    .HasName("PKoc_factura_expo_detalle_serie");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.SubModelo).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcFacturaExportacion>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdFactura })
                    .HasName("PKoc_factura_exportacion");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.ClienteCertificado).IsUnicode(false);

                entity.Property(e => e.ClienteCiudad).IsUnicode(false);

                entity.Property(e => e.ClienteColonia).IsUnicode(false);

                entity.Property(e => e.ClienteCp).IsUnicode(false);

                entity.Property(e => e.ClienteDireccion).IsUnicode(false);

                entity.Property(e => e.ClienteEstado).IsUnicode(false);

                entity.Property(e => e.ClienteImmex).IsUnicode(false);

                entity.Property(e => e.ClienteNombre).IsUnicode(false);

                entity.Property(e => e.ClienteRfc).IsUnicode(false);

                entity.Property(e => e.ConsignatarioCiudad).IsUnicode(false);

                entity.Property(e => e.ConsignatarioCp).IsUnicode(false);

                entity.Property(e => e.ConsignatarioDireccion).IsUnicode(false);

                entity.Property(e => e.ConsignatarioEstado).IsUnicode(false);

                entity.Property(e => e.ConsignatarioNombre).IsUnicode(false);

                entity.Property(e => e.CoveNumero).IsUnicode(false);

                entity.Property(e => e.Folio).IsUnicode(false);

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdDestinatario).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.Incoterm).IsUnicode(false);

                entity.Property(e => e.LineaCiudad).IsUnicode(false);

                entity.Property(e => e.LineaCp).IsUnicode(false);

                entity.Property(e => e.LineaDireccion).IsUnicode(false);

                entity.Property(e => e.LineaEstado).IsUnicode(false);

                entity.Property(e => e.LineaNombre).IsUnicode(false);

                entity.Property(e => e.LineaScac).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.ProveedorCiudad).IsUnicode(false);

                entity.Property(e => e.ProveedorCp).IsUnicode(false);

                entity.Property(e => e.ProveedorDireccion).IsUnicode(false);

                entity.Property(e => e.ProveedorEstado).IsUnicode(false);

                entity.Property(e => e.ProveedorIrs).IsUnicode(false);

                entity.Property(e => e.ProveedorNombre).IsUnicode(false);

                entity.Property(e => e.QrCode).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcFacturaExportacionCfdi>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdFactura, e.FechaValidacion })
                    .HasName("PKoc_factura_exportacion_cfdi");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.CodigoEstatus).IsUnicode(false);

                entity.Property(e => e.Estado).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcFacturaExportacionDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdFactura, e.SecuencialFactura })
                    .HasName("PKoc_factura_exportacion_detalle");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.DescripcionAmericana).IsUnicode(false);

                entity.Property(e => e.DescripcionMexicana).IsUnicode(false);

                entity.Property(e => e.FraccionAmericana).IsUnicode(false);

                entity.Property(e => e.FraccionMexicana).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IndicadorNafta).IsUnicode(false);

                entity.Property(e => e.MidCodeAgente).IsUnicode(false);

                entity.Property(e => e.MidCodeCliente).IsUnicode(false);

                entity.Property(e => e.Nico).IsUnicode(false);

                entity.Property(e => e.PaisOrigen).IsUnicode(false);

                entity.Property(e => e.PaisVendedor).IsUnicode(false);

                entity.Property(e => e.Preferencia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UnidadComercial).IsUnicode(false);

                entity.Property(e => e.UnidadTarifa).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcFacturaImpoDetalleSerie>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdFactura, e.SecuencialFactura, e.SecuencialSerie })
                    .HasName("PKoc_factura_impo_detalle_serie");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.SubModelo).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcFacturaImportacion>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdFactura })
                    .HasName("PKoc_factura_importacion");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.AsnConsolidacion).IsUnicode(false);

                entity.Property(e => e.BolNo).IsUnicode(false);

                entity.Property(e => e.ClienteCertificado).IsUnicode(false);

                entity.Property(e => e.ClienteCiudad).IsUnicode(false);

                entity.Property(e => e.ClienteColonia).IsUnicode(false);

                entity.Property(e => e.ClienteCp).IsUnicode(false);

                entity.Property(e => e.ClienteDireccion).IsUnicode(false);

                entity.Property(e => e.ClienteEstado).IsUnicode(false);

                entity.Property(e => e.ClienteImmex).IsUnicode(false);

                entity.Property(e => e.ClienteNombre).IsUnicode(false);

                entity.Property(e => e.ClienteRfc).IsUnicode(false);

                entity.Property(e => e.ConsignatarioCiudad).IsUnicode(false);

                entity.Property(e => e.ConsignatarioColonia).IsUnicode(false);

                entity.Property(e => e.ConsignatarioCp).IsUnicode(false);

                entity.Property(e => e.ConsignatarioDireccion).IsUnicode(false);

                entity.Property(e => e.ConsignatarioEstado).IsUnicode(false);

                entity.Property(e => e.ConsignatarioNombre).IsUnicode(false);

                entity.Property(e => e.CoveNumero).IsUnicode(false);

                entity.Property(e => e.FirmaAutoriza).IsUnicode(false);

                entity.Property(e => e.Flete).IsUnicode(false);

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdConsignatario).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdMoneda)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('USD')");

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.Incoterm).IsUnicode(false);

                entity.Property(e => e.IncotermDescripcion).IsUnicode(false);

                entity.Property(e => e.NoEei).IsUnicode(false);

                entity.Property(e => e.NumeroGuia).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.ProveedorCiudad).IsUnicode(false);

                entity.Property(e => e.ProveedorCp).IsUnicode(false);

                entity.Property(e => e.ProveedorDireccion).IsUnicode(false);

                entity.Property(e => e.ProveedorEstado).IsUnicode(false);

                entity.Property(e => e.ProveedorIrs).IsUnicode(false);

                entity.Property(e => e.ProveedorNombre).IsUnicode(false);

                entity.Property(e => e.Referencia2).IsUnicode(false);

                entity.Property(e => e.ReferenciaBanco).IsUnicode(false);

                entity.Property(e => e.ReferenciaCliente).IsUnicode(false);

                entity.Property(e => e.TerminoPago).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);

                entity.Property(e => e.VesselVoyage).IsUnicode(false);
            });

            modelBuilder.Entity<OcFacturaImportacionDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdFactura, e.SecuencialFactura })
                    .HasName("PKoc_factura_importacion_detalle");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.DescripcionAmericana).IsUnicode(false);

                entity.Property(e => e.DescripcionMexicana).IsUnicode(false);

                entity.Property(e => e.FraccionAmericana).IsUnicode(false);

                entity.Property(e => e.FraccionMexicana).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.Nico).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.PaisOrigen).IsUnicode(false);

                entity.Property(e => e.PermisoRegla8va).IsUnicode(false);

                entity.Property(e => e.PermisoTlcan).IsUnicode(false);

                entity.Property(e => e.Regla8vaNumero).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UnidadComercial).IsUnicode(false);

                entity.Property(e => e.UnidadTarifa).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcFirmaFactura>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdReferencia })
                    .HasName("PKoc_firma_factura");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);
            });

            modelBuilder.Entity<OcFreightChargeTerm>(entity =>
            {
                entity.HasKey(e => e.IdTerm)
                    .HasName("PKoc_freight_charge_terms");

                entity.Property(e => e.IdTerm).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<OcGenerale>(entity =>
            {
                entity.HasKey(e => e.IdCliente)
                    .HasName("PKoc_generales");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.AutodocRecibo).HasDefaultValueSql("((0))");

                entity.Property(e => e.ClaveDocumento).IsUnicode(false);

                entity.Property(e => e.CrearPackingFacturaImpo).HasDefaultValueSql("((0))");

                entity.Property(e => e.Departamento).IsUnicode(false);

                entity.Property(e => e.DescripcionGenerica).IsUnicode(false);

                entity.Property(e => e.Destinatario).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdConsignatario).IsUnicode(false);

                entity.Property(e => e.IdCorresponsal).IsUnicode(false);

                entity.Property(e => e.IdFraccionGenerica).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdLineaFleteraDistribucion).IsUnicode(false);

                entity.Property(e => e.IdMoneda)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('USD')");

                entity.Property(e => e.IdNicoGenerico).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('USA')");

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdProveedor)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('SIS')");

                entity.Property(e => e.IdUnidadMedida).IsUnicode(false);

                entity.Property(e => e.Incoterm)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('CPT')");

                entity.Property(e => e.ManifiestoCarga).HasDefaultValueSql("((1))");

                entity.Property(e => e.MinDigitosBolDistribucion).HasDefaultValueSql("((0))");

                entity.Property(e => e.OeClaseMaterial).HasDefaultValueSql("((1))");

                entity.Property(e => e.OeIdAgencia)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.OeIdAlmacen)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('VIRTUAL')");

                entity.Property(e => e.OeIdLineaFletera)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('TPLA')");

                entity.Property(e => e.OeIdLocalizacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('virtual')");

                entity.Property(e => e.OeIdTipoVehiculo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('98')");

                entity.Property(e => e.OeNumeroGuia)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N/A')");

                entity.Property(e => e.OeNumeroVehiculo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('S/N')");

                entity.Property(e => e.OeTipoTransporte)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('98')");

                entity.Property(e => e.RequiereIncoterm).HasDefaultValueSql("((1))");

                entity.Property(e => e.SeccionAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SessionAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoCarga).IsUnicode(false);

                entity.Property(e => e.TipoImportacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.ValidacionAdicionalFacImpo).HasDefaultValueSql("((0))");

                entity.Property(e => e.ValidarPedimentoMaster).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<OcGeneralesOperacionBodega>(entity =>
            {
                entity.HasKey(e => new { e.IdBodega, e.TipoOperacion });

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdAgenciaAduanal).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdLocalizacion).IsUnicode(false);

                entity.Property(e => e.IdMedioTrasporte).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.NumeroGuia).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcGuiaCorresponsal>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.SecuencialGuia })
                    .HasName("PKoc_guia_corresponsal");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.NumeroGuia).IsUnicode(false);

                entity.Property(e => e.TipoGuia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcGuiaSerie>(entity =>
            {
                entity.HasKey(e => new { e.IdBodega, e.IdRecibo, e.SecuencialGuia, e.Secuencial })
                    .HasName("PK__oc_guia___21B073E50E8D03C0");

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usado).HasDefaultValueSql("((0))");

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcGuiasMultiple>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.SecuencialGuia, e.Guia })
                    .HasName("PKoc_guias_multiples");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.Guia).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcGuium>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.SecuencialGuia })
                    .HasName("PKoc_guia");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.BultosGuia).HasDefaultValueSql("((1))");

                entity.Property(e => e.DescripcionMercancia).IsUnicode(false);

                entity.Property(e => e.InformeIncoformidad).IsUnicode(false);

                entity.Property(e => e.LocalizacionAlmacen).IsUnicode(false);

                entity.Property(e => e.MeNumber).IsUnicode(false);

                entity.Property(e => e.MonedaFlete)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('USD')");

                entity.Property(e => e.NumeroGuia).IsUnicode(false);

                entity.Property(e => e.StatusOperacion).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoGuia)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('E')")
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcIdentificador>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdIdentificador })
                    .HasName("PKoc_identificador");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdIdentificador).IsUnicode(false);

                entity.Property(e => e.DescripcionIdentificador).IsUnicode(false);
            });

            modelBuilder.Entity<OcInconformidad>(entity =>
            {
                entity.HasKey(e => e.IdInconformidad)
                    .HasName("PKoc_inconformidad");

                entity.Property(e => e.IdInconformidad).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcInconformidadCliente>(entity =>
            {
                entity.HasKey(e => new { e.IdInconformidad, e.IdCliente })
                    .HasName("PKoc_inconformidad_cliente");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<OcIncoterm>(entity =>
            {
                entity.HasKey(e => e.Incoterm)
                    .HasName("PKoc_incoterm");

                entity.Property(e => e.Incoterm).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcInstBulto>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdInstruccion, e.IdReciboGuia, e.SecuencialGuia, e.SecuencialBulto })
                    .HasName("PKoc_inst_bultos");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdInstruccion).IsUnicode(false);

                entity.Property(e => e.IdReciboGuia).IsUnicode(false);

                entity.Property(e => e.CantidadBultos).HasDefaultValueSql("((1))");

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcInstFacturaDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdInstruccion, e.IdFactura, e.SecuencialFactura })
                    .HasName("PKoc_inst_factura_detalle");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdInstruccion).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcInstFacturaDetalleSerie>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdInstruccion, e.IdFactura, e.SecuencialFactura, e.SecuencialSerie })
                    .HasName("PKoc_inst_factura_detalle_serie");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdInstruccion).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<OcInstFacturaEncabezado>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdInstruccion, e.IdFactura })
                    .HasName("PKoc_inst_factura_encabezado");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdInstruccion).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcInstGuium>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdInstruccion, e.IdReciboGuia, e.SecuencialGuia })
                    .HasName("PKoc_inst_guia");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdInstruccion).IsUnicode(false);

                entity.Property(e => e.IdReciboGuia).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcInstPacking>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdInstruccion, e.IdPacking })
                    .HasName("PKoc_inst_packing");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdInstruccion).IsUnicode(false);

                entity.Property(e => e.IdPacking).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcInstPackingDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdInstruccion, e.IdPacking, e.SecuencialPacking })
                    .HasName("PKoc_inst_packing_detalle");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdInstruccion).IsUnicode(false);

                entity.Property(e => e.IdPacking).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcInstPackingDetalleSerie>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdInstruccion, e.IdPacking, e.SecuencialPacking, e.SecuencialSerie })
                    .HasName("PKoc_inst_packing_detalle_serie");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdInstruccion).IsUnicode(false);

                entity.Property(e => e.IdPacking).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcInstruccion>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdInstruccion })
                    .HasName("PKoc_instruccion");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdInstruccion).IsUnicode(false);

                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.Automatica).HasDefaultValueSql("((0))");

                entity.Property(e => e.ClaveDocumento).IsUnicode(false);

                entity.Property(e => e.Contacto).IsUnicode(false);

                entity.Property(e => e.Corresponsal).IsUnicode(false);

                entity.Property(e => e.Destino).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoImportacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioAutoriza).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcInstruccionBak>(entity =>
            {
                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.ClaveDocumento).IsUnicode(false);

                entity.Property(e => e.Contacto).IsUnicode(false);

                entity.Property(e => e.Corresponsal).IsUnicode(false);

                entity.Property(e => e.Destino).IsUnicode(false);

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoImportacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioAutoriza).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcLeyenda>(entity =>
            {
                entity.HasKey(e => e.Consecutivo)
                    .HasName("PK__oc_leyen__F6E984271D9186F1");

                entity.Property(e => e.Consecutivo).ValueGeneratedNever();

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcLineaAgente>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdLineaFletera })
                    .HasName("PKoc_linea_agente");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdLineaAgente).IsUnicode(false);
            });

            modelBuilder.Entity<OcLocalizacion>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdLocalizacion })
                    .HasName("PKoc_localizacion");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdLocalizacion).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcLocalizacionBulto>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdLocalizacion, e.NoPallet })
                    .HasName("PKoc_localizacion_bulto");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdLocalizacion).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<OcLocalizacionMovil>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdLocalizacion })
                    .HasName("PKoc_localizacion_movil");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdLocalizacion).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcMedioTransporte>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoTransporte })
                    .HasName("PKoc_medio_transporte");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoTransporte).IsUnicode(false);

                entity.Property(e => e.CveTransporteAgente).IsUnicode(false);
            });

            modelBuilder.Entity<OcMonedum>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdMoneda })
                    .HasName("PKoc_moneda");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdMonedaAgente).IsUnicode(false);

                entity.Property(e => e.MonedaActiva).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<OcMotivoReacomodo>(entity =>
            {
                entity.HasKey(e => e.IdMotivo)
                    .HasName("PKoc_motivo_reacomodo");

                entity.Property(e => e.IdMotivo).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcMovimiento>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdMovimiento })
                    .HasName("PKoc_movimiento");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.CodigoSolicitud).IsUnicode(false);

                entity.Property(e => e.NumeroSolicitud).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcMovimientoBulto>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdMovimiento, e.NoPallet })
                    .HasName("PKoc_movimiento_bulto");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.Agrupacion).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcMovimientoTarea>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdMovimiento, e.IdTarea })
                    .HasName("PKoc_movimiento_tarea");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.Movil).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcMovimientoTareaBulto>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdMovimiento, e.IdTarea, e.NoPallet })
                    .HasName("PKoc_movimiento_tarea_bulto");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.Agrupacion).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.LocalizacionDestino).IsUnicode(false);

                entity.Property(e => e.LocalizacionOrigen).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcNivelDano>(entity =>
            {
                entity.HasKey(e => e.NivelDano)
                    .HasName("PKoc_nivel_dano");

                entity.Property(e => e.NivelDano).ValueGeneratedNever();

                entity.Property(e => e.Activa).HasDefaultValueSql("((1))");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcOrdenCompraMultiple>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdCliente, e.OrdenCompra })
                    .HasName("PK__oc_orden__7640AD402496F67A");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<OcPackingDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdPacking, e.SecuencialPacking })
                    .HasName("PKoc_packing_detalle");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdPacking).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdUnidadMedida).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.SituacionFactDetalle).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcPackingDetalleBitacora>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdPacking, e.SecuencialPacking, e.FechaCambio })
                    .HasName("PK__oc_packi__3FC1E56ABE34A28F");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdPacking).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.UsuarioCambio).IsUnicode(false);
            });

            modelBuilder.Entity<OcPackingDetalleFactura>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdPacking, e.SecuencialPacking, e.IdFactura, e.SecuencialFactura })
                    .HasName("PK__oc_packi__76987014676EC08A");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdPacking).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdReciboPacking).IsUnicode(false);

                entity.Property(e => e.ReciboSubdivision).IsUnicode(false);

                entity.Property(e => e.TipoOperacion).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcPackingDetalleSerie>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdPacking, e.SecuencialPacking, e.SecuencialSerie })
                    .HasName("PKoc_packing_detalle_serie");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdPacking).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);

                entity.Property(e => e.SubModelo).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcPackingEncabezado>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdPacking })
                    .HasName("PKoc_packing_encabezado");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdPacking).IsUnicode(false);

                entity.Property(e => e.FechaPacking).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.SerieOrdenCompra).IsUnicode(false);

                entity.Property(e => e.StatusPacking).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcPai>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdPais })
                    .HasName("PKoc_pais");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdPais).IsUnicode(false);

                entity.Property(e => e.Activo).HasDefaultValueSql("((1))");

                entity.Property(e => e.IdPaisOficial).IsUnicode(false);
            });

            modelBuilder.Entity<OcPaqueteriaEncabezado>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.NoControlGuia })
                    .HasName("PKoc_paqueteria_encabezado");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.NoControlGuia).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdLocalizacion).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.NumeroTrailer).IsUnicode(false);

                entity.Property(e => e.Recibe).IsUnicode(false);

                entity.Property(e => e.UsuarioCancela).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcPaqueteriaGuium>(entity =>
            {
                entity.HasKey(e => e.Guia)
                    .HasName("PKoc_paqueteria_guia");

                entity.Property(e => e.Guia).IsUnicode(false);

                entity.Property(e => e.Empleado).IsUnicode(false);

                entity.Property(e => e.GuiaCorta).IsUnicode(false);

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.NoControlGuia).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.UsuarioFinDescarga).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioInicioDescarga).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcPaqueteriaLinea>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdLineaFletera })
                    .HasName("PKoc_paqueteria_linea");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcPatenteAduana>(entity =>
            {
                entity.HasKey(e => new { e.IdPatente, e.IdAduana, e.SeccionAduana })
                    .HasName("PKoc_patente_aduana");

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.SeccionAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<OcPedimentoConsolidado>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoOperacion, e.IdReferencia, e.IdRectificacion })
                    .HasName("PKoc_pedimento_consolidado");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdTipoPedimento).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioAutoriza).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcPedimentoCorresponsal>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdReferencia })
                    .HasName("PKoc_pedimento_corresponsal");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.SeccionAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcPedimentoPago>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoOperacion, e.IdReferencia, e.IdRectificacion })
                    .HasName("PKoc_pedimento_pago");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdTipoPedimento).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioAutoriza).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcPedimentoPrepago>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoOperacion, e.IdReferencia, e.IdRectificacion })
                    .HasName("PKoc_pedimento_prepago");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdTipoPedimento).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioAutoriza).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcPermiso>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdPermiso })
                    .HasName("PKoc_permiso");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.DescripcionPermiso).IsUnicode(false);
            });

            modelBuilder.Entity<OcPlantCode>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.PlantCode })
                    .HasName("PKoc_plant_code");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.PlantCode).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcProceso>(entity =>
            {
                entity.HasKey(e => e.Proceso)
                    .HasName("PKoc_proceso");

                entity.Property(e => e.Proceso).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcProcesoDirectorio>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.Proceso })
                    .HasName("PKoc_proceso_directorio");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Activo).HasDefaultValueSql("((1))");

                entity.Property(e => e.FtpDirectorio).IsUnicode(false);

                entity.Property(e => e.FtpDirectorioOut).IsUnicode(false);

                entity.Property(e => e.FtpHost).IsUnicode(false);

                entity.Property(e => e.FtpHostOut).IsUnicode(false);

                entity.Property(e => e.FtpPassword).IsUnicode(false);

                entity.Property(e => e.FtpPasswordOut).IsUnicode(false);

                entity.Property(e => e.FtpUsuario).IsUnicode(false);

                entity.Property(e => e.FtpUsuarioOut).IsUnicode(false);

                entity.Property(e => e.GenerarDocsDefaults).HasDefaultValueSql("((1))");

                entity.Property(e => e.RutaIn).IsUnicode(false);

                entity.Property(e => e.RutaOut).IsUnicode(false);

                entity.Property(e => e.SftpDirectorioIn).IsUnicode(false);

                entity.Property(e => e.SftpDirectorioOut).IsUnicode(false);

                entity.Property(e => e.SftpHost).IsUnicode(false);

                entity.Property(e => e.SftpPassword).IsUnicode(false);

                entity.Property(e => e.SftpPrivatekeyPhrase).IsUnicode(false);

                entity.Property(e => e.SftpPrivatekeyRoute).IsUnicode(false);

                entity.Property(e => e.SftpTimeout).HasDefaultValueSql("((20000))");

                entity.Property(e => e.SftpTipoAutenticacion).HasDefaultValueSql("((1))");

                entity.Property(e => e.SftpUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<OcProcesoDirectorioDocumento>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.Proceso, e.IdAplicacion, e.IdModulo, e.IdDocumento })
                    .HasName("PK__oc_proce__9EDADF710BA3B7D9");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdAplicacion).IsUnicode(false);

                entity.Property(e => e.IdModulo).IsUnicode(false);
            });

            modelBuilder.Entity<OcProcesoDirectorioDocumentosNecesario>(entity =>
            {
                entity.HasKey(e => new { e.Proceso, e.IdDocumento })
                    .HasName("PK__oc_proce__E14653E782C1CBBF");
            });

            modelBuilder.Entity<OcProcesoDirectorioDocumentosParametro>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.Proceso, e.IdAplicacion, e.IdModulo, e.IdDocumento, e.IdParametro })
                    .HasName("PK__oc_proce__D0E89CA3B0B5CB86");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdAplicacion).IsUnicode(false);

                entity.Property(e => e.IdModulo).IsUnicode(false);

                entity.Property(e => e.IdParametro).IsUnicode(false);

                entity.Property(e => e.Separador)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Valor).IsUnicode(false);
            });

            modelBuilder.Entity<OcProducto>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoOperacion, e.IdProducto })
                    .HasName("PKoc_producto");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.DescripcionCertificado).IsUnicode(false);

                entity.Property(e => e.DescripcionClasificacion).IsUnicode(false);

                entity.Property(e => e.DescripcionErp).IsUnicode(false);

                entity.Property(e => e.FraccionAgente).IsUnicode(false);

                entity.Property(e => e.FraccionAgenteHistorico).IsUnicode(false);

                entity.Property(e => e.FraccionAmericana).IsUnicode(false);

                entity.Property(e => e.FraccionCliente).IsUnicode(false);

                entity.Property(e => e.FraccionClienteHistorico).IsUnicode(false);

                entity.Property(e => e.FraccionNicoAgente).IsUnicode(false);

                entity.Property(e => e.FraccionNicoCliente).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.IdNicoAgente).IsUnicode(false);

                entity.Property(e => e.IdNicoCliente).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdUnidadMedida).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.PesoKilos).HasDefaultValueSql("((0))");

                entity.Property(e => e.PesoLibras).HasDefaultValueSql("((0))");

                entity.Property(e => e.PrecioUnitario).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductoActivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Sku).IsUnicode(false);

                entity.Property(e => e.StatusProducto).HasDefaultValueSql("((1))");

                entity.Property(e => e.Urgente).HasDefaultValueSql("((0))");

                entity.Property(e => e.UsuarioAgente).IsUnicode(false);

                entity.Property(e => e.UsuarioCliente).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcProductoBitacora>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoOperacion, e.IdProducto, e.FechaCambio })
                    .HasName("PKoc_producto_bitacora");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.Anotaciones).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.UsuarioCambio).IsUnicode(false);
            });

            modelBuilder.Entity<OcProductoClienteUnidadAux>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProducto })
                    .HasName("PKoc_producto_cliente_unidad_aux");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.UnidadFactura).IsUnicode(false);

                entity.Property(e => e.UnidadSistema).IsUnicode(false);

                entity.Property(e => e.UnidadVastera).IsUnicode(false);
            });

            modelBuilder.Entity<OcProductoDocumento>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoOperacion, e.IdProducto, e.Documento, e.Secuencial })
                    .HasName("PKoc_producto_documento");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.ArchivoWeb).IsUnicode(false);
            });

            modelBuilder.Entity<OcProductoIdentObli>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.TipoOperacion, e.IdProducto, e.IdRegimen, e.TipoCaso, e.IdenCaso, e.Complemento2 })
                    .HasName("PKoc_producto_ident_obli");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.TipoCaso)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdenCaso).IsUnicode(false);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<OcProductoIdentificador>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.TipoOperacion, e.IdProducto, e.ClaveDocumento, e.IdIdentificador, e.Complemento1, e.Complemento2 })
                    .HasName("PKoc_producto_identificador");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.ClaveDocumento).IsUnicode(false);

                entity.Property(e => e.IdIdentificador).IsUnicode(false);

                entity.Property(e => e.Complemento1).IsUnicode(false);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcProductoObservacionDetalle>(entity =>
            {
                entity.Property(e => e.CertificadoAnalisis).HasDefaultValueSql("((0))");

                entity.Property(e => e.CertificadoMsds).HasDefaultValueSql("((0))");

                entity.Property(e => e.CertificadoMtr).HasDefaultValueSql("((0))");

                entity.Property(e => e.FaltaFoto).HasDefaultValueSql("((0))");

                entity.Property(e => e.FaltaPrevio).HasDefaultValueSql("((0))");

                entity.Property(e => e.FichaTecnica).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.Otros).HasDefaultValueSql("((0))");

                entity.Property(e => e.ParteFuncion).HasDefaultValueSql("((0))");

                entity.Property(e => e.SolicitarFactura).HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.OcProducto)
                    .WithMany()
                    .HasForeignKey(d => new { d.IdCliente, d.TipoOperacion, d.IdProducto })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_oc_producto_observacion_detalle");
            });

            modelBuilder.Entity<OcProductoPermObli>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.TipoOperacion, e.IdProducto, e.IdRegimen, e.Numero, e.IdPermiso })
                    .HasName("PKoc_producto_perm_obli");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.FirmaPermiso).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<OcProductoPermiso>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.TipoOperacion, e.IdProducto, e.ClaveDocumento, e.IdPermiso, e.NumeroPermiso })
                    .HasName("PKoc_producto_permiso");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.ClaveDocumento).IsUnicode(false);

                entity.Property(e => e.IdPermiso).IsUnicode(false);

                entity.Property(e => e.NumeroPermiso).IsUnicode(false);

                entity.Property(e => e.FirmaPermiso).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcProductoProveedor>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.TipoOperacion, e.IdProducto })
                    .HasName("PKoc_producto_proveedor");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.Complemento).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.PrecioUnitario).HasDefaultValueSql("((0.00))");

                entity.Property(e => e.Prio1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Prio2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Prio3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Sku).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcProductoProveedorRegiman>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.TipoOperacion, e.IdProducto, e.IdRegimen })
                    .HasName("PKoc_producto_proveedor_regimen");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);
            });

            modelBuilder.Entity<OcProductoTareaClasificacion>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.NumeroSolicitud, e.IdCliente, e.IdProveedor, e.TipoOperacion, e.IdProducto })
                    .HasName("PKoc_producto_tarea_clasificacion");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.NumeroSolicitud).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcProveedor>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor })
                    .HasName("PKoc_proveedor");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Colonia).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.EntidadFederativa).IsUnicode(false);

                entity.Property(e => e.Estado).IsUnicode(false);

                entity.Property(e => e.IdConsignatario).IsUnicode(false);

                entity.Property(e => e.IdIncoterm).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.IdNotify).IsUnicode(false);

                entity.Property(e => e.IdPais).IsUnicode(false);

                entity.Property(e => e.IdProveedorAgente).IsUnicode(false);

                entity.Property(e => e.IdTipoMaterialProveedor).IsUnicode(false);

                entity.Property(e => e.IdentificacionFiscal).IsUnicode(false);

                entity.Property(e => e.Municipio).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.NumeroExterior).IsUnicode(false);

                entity.Property(e => e.NumeroInterior).IsUnicode(false);

                entity.Property(e => e.ProveedorActivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Telefono).IsUnicode(false);

                entity.Property(e => e.UsoEdoMercancia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);

                entity.Property(e => e.Valoracion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Vinculacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<OcProveedorAgente>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor })
                    .HasName("PKoc_proveedor_agente");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdProveedorAgente).IsUnicode(false);
            });

            modelBuilder.Entity<OcProveedorVinculacion>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdProveedor, e.IdRegimen })
                    .HasName("PKoc_proveedor_vinculacion");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdRegimen).IsUnicode(false);

                entity.Property(e => e.IdValoracion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsoEdoMercancia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcProyecto>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.Proyecto })
                    .HasName("PKoc_proyecto");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Proyecto).IsUnicode(false);

                entity.Property(e => e.ProyectoActivo).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<OcRecibo>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo })
                    .HasName("PKoc_recibo");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.BookingNumber).IsUnicode(false);

                entity.Property(e => e.CumpleNorma)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EmbalajeMadera)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.EntryNumber).IsUnicode(false);

                entity.Property(e => e.Envio).IsUnicode(false);

                entity.Property(e => e.FechaReciboGuia).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdAgencia).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdDestino).IsUnicode(false);

                entity.Property(e => e.IdDivisionArea).IsUnicode(false);

                entity.Property(e => e.IdEmbarcador).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdPlantCode).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdTipoEmbarqueArribo).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.InbondNumero).IsUnicode(false);

                entity.Property(e => e.Lote).IsUnicode(false);

                entity.Property(e => e.NombreEmbarcador).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.Pedimento).IsUnicode(false);

                entity.Property(e => e.ProNumber).IsUnicode(false);

                entity.Property(e => e.ReciboMaster).IsUnicode(false);

                entity.Property(e => e.ReferenciaCliente).IsUnicode(false);

                entity.Property(e => e.SeccionAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.StatusRecibo).HasDefaultValueSql("((1))");

                entity.Property(e => e.SubdivididoFactura).HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoInbond).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTransporte).IsUnicode(false);

                entity.Property(e => e.Transbordo).HasDefaultValueSql("((0))");

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);

                entity.Property(e => e.UsuarioPrevio).IsUnicode(false);

                entity.Property(e => e.UsuarioRecepcion).IsUnicode(false);
            });

            modelBuilder.Entity<OcReciboActividad>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.Secuencial })
                    .HasName("PKoc_recibo_actividad");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdActividad).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcReciboCorresponsal>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo })
                    .HasName("PKoc_recibo_corresponsal");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.SeccionAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioCancelacion).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcReciboFactura>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.Factura })
                    .HasName("PKoc_recibo_factura");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.Factura).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcReciboInconformidad>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdInconformidad })
                    .HasName("PKoc_recibo_inconformidad");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcReciboInventario>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo });

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.Analyst).IsUnicode(false);

                entity.Property(e => e.Incoterm).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.Regimen).IsUnicode(false);

                entity.Property(e => e.Solution).IsUnicode(false);
            });

            modelBuilder.Entity<OcReciboOrdencompra>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.OrdenCompra })
                    .HasName("PKoc_recibo_ordencompra");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcReciboPrevio>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo, e.IdSecuencial, e.OcPacking, e.EstatusPrevio })
                    .HasName("PK__oc_recib__8C733D934DE4F7BC");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.OcPacking)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdPais).IsUnicode(false);

                entity.Property(e => e.IdProducto).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdUnidadMedida).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.PaisOrigen).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcReciboSalidum>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRecibo })
                    .HasName("PKoc_recibo_salida");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.Guia).IsUnicode(false);

                entity.Property(e => e.LineaFletera).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.ProNumber).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.ReferenciaAux).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<OcReciboSubdivision>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.ReciboOriginal, e.ReciboOrigen, e.ReciboSubdivision })
                    .HasName("PKoc_recibo_subdivision");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.ReciboOriginal).IsUnicode(false);

                entity.Property(e => e.ReciboOrigen).IsUnicode(false);

                entity.Property(e => e.ReciboSubdivision).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcRegiman>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoOperacion, e.ClaveDocumento })
                    .HasName("PKoc_regimen");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.ClaveDocumento).IsUnicode(false);

                entity.Property(e => e.ClavePedimento).IsUnicode(false);

                entity.Property(e => e.ClavesRelacionadas).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.SeriesProveedores).IsUnicode(false);

                entity.Property(e => e.TipoImportacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<OcRevisionDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRevision, e.Secuencial })
                    .HasName("PK__oc_revis__95F177C53865F96C");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcRevisionEncabezado>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdRevision })
                    .HasName("PK__oc_revis__E01175C3C20FF47F");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.Revisador).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcSellosDisponible>(entity =>
            {
                entity.HasKey(e => new { e.Color, e.Sello, e.IdAlmacen })
                    .HasName("PKoc_sellos_disponibles");

                entity.Property(e => e.Color).IsUnicode(false);

                entity.Property(e => e.Sello).IsUnicode(false);

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.Seccion).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcSerie>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoOperacion, e.SerieOrdenCompra, e.Compania })
                    .HasName("PKoc_serie");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.SerieOrdenCompra).IsUnicode(false);

                entity.Property(e => e.Compania).IsUnicode(false);

                entity.Property(e => e.Division).IsUnicode(false);

                entity.Property(e => e.GrupoProducto).IsUnicode(false);

                entity.Property(e => e.StatusSerie).HasDefaultValueSql("((1))");

                entity.Property(e => e.UnidadNegocio).IsUnicode(false);
            });

            modelBuilder.Entity<OcSerieCatalogo>(entity =>
            {
                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.NumeroSerie).IsUnicode(false);
            });

            modelBuilder.Entity<OcSituacionFactura>(entity =>
            {
                entity.HasKey(e => e.SituacionFactura)
                    .HasName("PKoc_situacion_factura");

                entity.Property(e => e.SituacionFactura).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcSolicitudClasificacion>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.NumeroSolicitud })
                    .HasName("PKoc_solicitud_clasificacion");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.NumeroSolicitud).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcStatusEmbarque>(entity =>
            {
                entity.HasKey(e => e.IdStatusEmbarque)
                    .HasName("PKoc_status_embarque");

                entity.Property(e => e.IdStatusEmbarque).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcStatusEnvio>(entity =>
            {
                entity.HasKey(e => e.StatusEnvio)
                    .HasName("PKoc_status_envio");

                entity.Property(e => e.StatusEnvio).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcStatusFactura>(entity =>
            {
                entity.HasKey(e => e.StatusFactura)
                    .HasName("PKoc_status_factura");

                entity.Property(e => e.StatusFactura).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcStatusLocalizacion>(entity =>
            {
                entity.HasKey(e => e.StatusLocalizacion)
                    .HasName("PKoc_status_localizacion");

                entity.Property(e => e.StatusLocalizacion).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcStatusMovimiento>(entity =>
            {
                entity.HasKey(e => e.IdStatusMovimiento)
                    .HasName("PKoc_status_movimiento");

                entity.Property(e => e.IdStatusMovimiento).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcStatusOperacion>(entity =>
            {
                entity.HasKey(e => e.StatusOperacion)
                    .HasName("PKoc_status_operacion");

                entity.Property(e => e.StatusOperacion).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcStatusOrden>(entity =>
            {
                entity.HasKey(e => e.StatusOrden)
                    .HasName("PKoc_status_orden");

                entity.Property(e => e.StatusOrden).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcStatusOrdenDetalle>(entity =>
            {
                entity.HasKey(e => e.StatusOrdenDetalle)
                    .HasName("PKoc_status_orden_detalle");

                entity.Property(e => e.StatusOrdenDetalle).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcStatusProducto>(entity =>
            {
                entity.HasKey(e => e.StatusProducto)
                    .HasName("PKoc_status_producto");

                entity.Property(e => e.StatusProducto).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcStatusRecibo>(entity =>
            {
                entity.HasKey(e => e.StatusRecibo)
                    .HasName("PKoc_status_recibo");

                entity.Property(e => e.StatusRecibo).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcStatusVehiculo>(entity =>
            {
                entity.HasKey(e => e.IdStatusVehiculo)
                    .HasName("PKoc_status_vehiculo");

                entity.Property(e => e.IdStatusVehiculo).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcSubnivelDano>(entity =>
            {
                entity.HasKey(e => new { e.Nivel, e.Subnivel })
                    .HasName("PK__oc_subni__5360176C9D71BE2F");

                entity.Property(e => e.Subnivel).ValueGeneratedOnAdd();

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.DescripcionEs).IsUnicode(false);
            });

            modelBuilder.Entity<OcTareaClasificacion>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.NumeroSolicitud })
                    .HasName("PKoc_tarea_clasificacion");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.NumeroSolicitud).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoBulto>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoBulto })
                    .HasName("PKoc_tipo_bulto");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoBulto).IsUnicode(false);

                entity.Property(e => e.IdUnidad).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoCarga>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoCarga })
                    .HasName("PKoc_tipo_carga");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoCarga).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoDirectorio>(entity =>
            {
                entity.HasKey(e => e.TipoDirectorio)
                    .HasName("PKoc_tipo_directorio");

                entity.Property(e => e.TipoDirectorio).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoEmbarque>(entity =>
            {
                entity.HasKey(e => e.IdTipoEmbarque)
                    .HasName("PKoc_tipo_embarque");

                entity.Property(e => e.IdTipoEmbarque)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoEmbarqueArribo>(entity =>
            {
                entity.HasKey(e => e.IdTipoEmbarqueArribo)
                    .HasName("PK__oc_tipo___7FA64067359AA389");

                entity.Property(e => e.IdTipoEmbarqueArribo).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoFlete>(entity =>
            {
                entity.HasKey(e => e.TipoFlete)
                    .HasName("PKoc_tipo_flete");

                entity.Property(e => e.TipoFlete).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoGuium>(entity =>
            {
                entity.HasKey(e => e.TipoGuia)
                    .HasName("PKoc_tipo_guia");

                entity.Property(e => e.TipoGuia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoImportacion>(entity =>
            {
                entity.HasKey(e => e.TipoImportacion)
                    .HasName("PKoc_tipo_importacion");

                entity.Property(e => e.TipoImportacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoIncrementable>(entity =>
            {
                entity.HasKey(e => e.TipoIncrementable)
                    .HasName("PKoc_tipo_incrementable");

                entity.Property(e => e.TipoIncrementable).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoLineafletera>(entity =>
            {
                entity.Property(e => e.CveTipoLinea).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoLocalizacion>(entity =>
            {
                entity.HasKey(e => e.IdTipoLocalizacion)
                    .HasName("PKoc_tipo_localizacion");

                entity.Property(e => e.IdTipoLocalizacion).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoMaterial>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoMaterial })
                    .HasName("PKoc_tipo_material");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoMaterial)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<OcTipoMaterialProveedor>(entity =>
            {
                entity.HasKey(e => e.IdTipoMaterialProveedor)
                    .HasName("PK__oc_tipo___16E2ECC8EC99EDFF");

                entity.Property(e => e.IdTipoMaterialProveedor).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoMovimientoVehiculo>(entity =>
            {
                entity.HasKey(e => e.IdTipoMovimiento)
                    .HasName("PKoc_tipo_movimiento_vehiculo");

                entity.Property(e => e.IdTipoMovimiento).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoOperacion>(entity =>
            {
                entity.HasKey(e => e.TipoOperacion)
                    .HasName("PKoc_tipo_operacion");

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoOrganizacion>(entity =>
            {
                entity.HasKey(e => e.IdTipoOrganizacion)
                    .HasName("PKoc_tipo_organizacion");

                entity.Property(e => e.IdTipoOrganizacion).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoSolicitud>(entity =>
            {
                entity.HasKey(e => e.IdTipoSolicitud)
                    .HasName("PKoc_tipo_solicitud");

                entity.Property(e => e.IdTipoSolicitud).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoSolicitudClasificacion>(entity =>
            {
                entity.HasKey(e => e.Tipo)
                    .HasName("PKoc_tipo_solicitud_clasificacion");

                entity.Property(e => e.Tipo).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcTipoTransporte>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.TipoTransporte })
                    .HasName("PKoc_tipo_transporte");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.TipoTransporte).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcTm>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdEmbarque })
                    .HasName("PKoc_tms");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdFactura).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.MeNumber).IsUnicode(false);

                entity.Property(e => e.MonedaFlete).IsUnicode(false);

                entity.Property(e => e.NumeroGuia).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.ReferenciaCliente).IsUnicode(false);

                entity.Property(e => e.TipoBulto).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcTraspasoDefault>(entity =>
            {
                entity.HasKey(e => e.IdCliente)
                    .HasName("PKoc_traspaso_default");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Clasificado)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdMunicipio).IsUnicode(false);

                entity.Property(e => e.MarcaMcia).IsUnicode(false);

                entity.Property(e => e.TipoStatus)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<OcTratadoPedimento>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdTipoAdvalorem })
                    .HasName("PKoc_tratado_pedimento");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdTipoAdvalorem).IsUnicode(false);

                entity.Property(e => e.IdTratadoCliente).IsUnicode(false);
            });

            modelBuilder.Entity<OcUnidadConversion>(entity =>
            {
                entity.HasKey(e => new { e.IdUnidad, e.IdUnidadConversion })
                    .HasName("PKoc_unidad_conversion");

                entity.Property(e => e.IdUnidad).IsUnicode(false);

                entity.Property(e => e.IdUnidadConversion).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcUnidadMedidum>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdUnidadMedida })
                    .HasName("PKoc_unidad_medida");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdUnidadMedida).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdUnidadAgente).IsUnicode(false);

                entity.Property(e => e.UnidadActiva).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<OcUnidadNegocio>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.UnidadNegocio })
                    .HasName("PKoc_unidad_negocio");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.UnidadNegocio).IsUnicode(false);

                entity.Property(e => e.UnidadNegocioActiva).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<OcUnidadPedimento>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.IdUnidadOficial })
                    .HasName("PKoc_unidad_pedimento");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdUnidadOficial).IsUnicode(false);

                entity.Property(e => e.IdUnidadCliente).IsUnicode(false);
            });

            modelBuilder.Entity<OcVehiculo>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdTipoVehiculo, e.NumeroVehiculo, e.FechaArribo })
                    .HasName("PKoc_vehiculo");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.Averiado).HasDefaultValueSql("((0))");

                entity.Property(e => e.Chofer).IsUnicode(false);

                entity.Property(e => e.ChoferArribo).IsUnicode(false);

                entity.Property(e => e.ChoferSalida).IsUnicode(false);

                entity.Property(e => e.CodigoVehiculo).IsUnicode(false);

                entity.Property(e => e.EstadoPlacas).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdLineaFleteraSalida).IsUnicode(false);

                entity.Property(e => e.IdLocalizacion).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdTransfer).IsUnicode(false);

                entity.Property(e => e.IdTransferSalida).IsUnicode(false);

                entity.Property(e => e.Licencia).IsUnicode(false);

                entity.Property(e => e.NoControl).IsUnicode(false);

                entity.Property(e => e.Placas).IsUnicode(false);

                entity.Property(e => e.Sello1).IsUnicode(false);

                entity.Property(e => e.Sello2).IsUnicode(false);

                entity.Property(e => e.Transfer).IsUnicode(false);

                entity.Property(e => e.TruckNumber).IsUnicode(false);

                entity.Property(e => e.TruckNumberSalida).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcVehiculoBitacora>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdTipoVehiculo, e.NumeroVehiculo, e.FechaArribo, e.Fecha })
                    .HasName("PKoc_vehiculo_bitacora");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<OcVehiculoCargado>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdTipoVehiculo, e.NumeroVehiculo, e.FechaArribo })
                    .HasName("PKoc_vehiculo_cargado");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdLocalizacion).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Placas).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcVehiculoCopy>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdTipoVehiculo, e.NumeroVehiculo, e.FechaArribo })
                    .HasName("PKoc_vehiculo_copy");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.NumeroVehiculo).IsUnicode(false);

                entity.Property(e => e.Chofer).IsUnicode(false);

                entity.Property(e => e.CodigoVehiculo).IsUnicode(false);

                entity.Property(e => e.EstadoPlacas).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdEmbarque).IsUnicode(false);

                entity.Property(e => e.IdLineaFletera).IsUnicode(false);

                entity.Property(e => e.IdLocalizacion).IsUnicode(false);

                entity.Property(e => e.IdRecibo).IsUnicode(false);

                entity.Property(e => e.IdTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdTransfer).IsUnicode(false);

                entity.Property(e => e.IdTransferSalida).IsUnicode(false);

                entity.Property(e => e.Licencia).IsUnicode(false);

                entity.Property(e => e.Placas).IsUnicode(false);

                entity.Property(e => e.Sello1).IsUnicode(false);

                entity.Property(e => e.Sello2).IsUnicode(false);

                entity.Property(e => e.Transfer).IsUnicode(false);

                entity.Property(e => e.TruckNumber).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<OcVehiculoFotografiaTipoVehiculo>(entity =>
            {
                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);
            });

            modelBuilder.Entity<OcVehiculoFotografium>(entity =>
            {
                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.Orden).HasDefaultValueSql("((0))");

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<OcViewInventarioProducto>(entity =>
            {
                entity.ToView("oc_viewInventarioProducto");

                entity.Property(e => e.Almacen).IsUnicode(false);

                entity.Property(e => e.AlmacenNombre).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.ClienteNombre).IsUnicode(false);

                entity.Property(e => e.Compania).IsUnicode(false);

                entity.Property(e => e.DescripcionErp).IsUnicode(false);

                entity.Property(e => e.Division).IsUnicode(false);

                entity.Property(e => e.EstatusDescripcion).IsUnicode(false);

                entity.Property(e => e.Factura).IsUnicode(false);

                entity.Property(e => e.GrupoProducto).IsUnicode(false);

                entity.Property(e => e.Incoterm).IsUnicode(false);

                entity.Property(e => e.NombreProveedor).IsUnicode(false);

                entity.Property(e => e.NumeroParte).IsUnicode(false);

                entity.Property(e => e.Operacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.OrdenCompra).IsUnicode(false);

                entity.Property(e => e.Proveedor).IsUnicode(false);

                entity.Property(e => e.Proyecto).IsUnicode(false);

                entity.Property(e => e.Recibo).IsUnicode(false);

                entity.Property(e => e.Serie).IsUnicode(false);

                entity.Property(e => e.TipoOperacion).IsUnicode(false);

                entity.Property(e => e.UnidadMedida).IsUnicode(false);

                entity.Property(e => e.UnidadMedidaDescripcion).IsUnicode(false);

                entity.Property(e => e.UnidadNegocio).IsUnicode(false);
            });

            modelBuilder.Entity<OcVinculacion>(entity =>
            {
                entity.HasKey(e => e.Vinculacion)
                    .HasName("PKoc_vinculacion");

                entity.Property(e => e.Vinculacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<OcZona>(entity =>
            {
                entity.HasKey(e => new { e.IdAlmacen, e.IdZona })
                    .HasName("PKoc_zona");

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<Pbcatcol>(entity =>
            {
                entity.HasIndex(e => new { e.PbcTnam, e.PbcOwnr, e.PbcCnam }, "pbcatcol_idx")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PbcBmap)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbcCmnt).IsUnicode(false);

                entity.Property(e => e.PbcCnam)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbcEdit).IsUnicode(false);

                entity.Property(e => e.PbcHdr).IsUnicode(false);

                entity.Property(e => e.PbcInit).IsUnicode(false);

                entity.Property(e => e.PbcLabl).IsUnicode(false);

                entity.Property(e => e.PbcMask).IsUnicode(false);

                entity.Property(e => e.PbcOwnr)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbcPtrn).IsUnicode(false);

                entity.Property(e => e.PbcTag).IsUnicode(false);

                entity.Property(e => e.PbcTnam)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Pbcatedt>(entity =>
            {
                entity.HasIndex(e => new { e.PbeName, e.PbeSeqn }, "pbcatedt_idx")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PbeEdit).IsUnicode(false);

                entity.Property(e => e.PbeName).IsUnicode(false);

                entity.Property(e => e.PbeWork)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Pbcatfmt>(entity =>
            {
                entity.HasIndex(e => e.PbfName, "pbcatfmt_idx")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PbfFrmt).IsUnicode(false);

                entity.Property(e => e.PbfName).IsUnicode(false);
            });

            modelBuilder.Entity<Pbcattbl>(entity =>
            {
                entity.HasIndex(e => new { e.PbtTnam, e.PbtOwnr }, "pbcattbl_idx")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PbdFfce)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbdFitl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbdFunl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbhFfce)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbhFitl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbhFunl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PblFfce)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PblFitl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PblFunl)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbtCmnt).IsUnicode(false);

                entity.Property(e => e.PbtOwnr)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PbtTnam)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Pbcatvld>(entity =>
            {
                entity.HasIndex(e => e.PbvName, "pbcatvld_idx")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.PbvMsg).IsUnicode(false);

                entity.Property(e => e.PbvName).IsUnicode(false);

                entity.Property(e => e.PbvVald).IsUnicode(false);
            });

            modelBuilder.Entity<PdfEntradum>(entity =>
            {
                entity.HasKey(e => new { e.IdPdf, e.Entrada });

                entity.Property(e => e.IdPdf).ValueGeneratedOnAdd();

                entity.Property(e => e.Entrada).IsUnicode(false);

                entity.Property(e => e.RutaPdf).IsUnicode(false);
            });

            modelBuilder.Entity<Pedimento>(entity =>
            {
                entity.ToView("pedimentos");

                entity.Property(e => e.Adu).IsUnicode(false);

                entity.Property(e => e.Ped)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Ref).IsUnicode(false);

                entity.Property(e => e.Secc)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PoReceiver>(entity =>
            {
                entity.HasKey(e => new { e.IdPoreceiver, e.IdAuto });

                entity.Property(e => e.BillOfLading).IsUnicode(false);

                entity.Property(e => e.CarrierNumber).IsUnicode(false);

                entity.Property(e => e.FreightCarrier).IsUnicode(false);

                entity.Property(e => e.FromStore).IsUnicode(false);

                entity.Property(e => e.ItemDescription).IsUnicode(false);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.PoNumber).IsUnicode(false);

                entity.Property(e => e.PrimaryUpc).IsUnicode(false);

                entity.Property(e => e.ReceiverNumber).IsUnicode(false);

                entity.Property(e => e.SkuNumber).IsUnicode(false);

                entity.Property(e => e.StoreName).IsUnicode(false);

                entity.Property(e => e.TransferNumber).IsUnicode(false);

                entity.Property(e => e.VendorName).IsUnicode(false);

                entity.Property(e => e.VendorNumber).IsUnicode(false);
            });

            modelBuilder.Entity<PrCliente>(entity =>
            {
                entity.HasKey(e => e.CveCliente)
                    .HasName("pk_pr_cliente");

                entity.Property(e => e.CveCliente).IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CodigoPostal).HasDefaultValueSql("((0))");

                entity.Property(e => e.Comentarios)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Contacto)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Direccion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DireccionElec)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Estado).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fax)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Nombre)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Rfc)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Telefono)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TelefonoSec)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TipoCliente).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PrControlEstructura>(entity =>
            {
                entity.HasKey(e => new { e.NoProyecto, e.Numproy })
                    .HasName("PK___1__13")
                    .IsClustered(false);

                entity.Property(e => e.NoProyecto).ValueGeneratedOnAdd();

                entity.Property(e => e.Numproy)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<PrMonedum>(entity =>
            {
                entity.HasKey(e => e.Moneda)
                    .HasName("pk_pr_moneda");

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);
            });

            modelBuilder.Entity<PrNivelA>(entity =>
            {
                entity.HasKey(e => new { e.Cvenivel, e.Cverelacion, e.Indcte });

                entity.Property(e => e.Cvenivel).IsUnicode(false);

                entity.Property(e => e.Cverelacion).IsUnicode(false);

                entity.Property(e => e.Indcte).IsUnicode(false);

                entity.Property(e => e.CostoDirecto).HasDefaultValueSql("((0))");

                entity.Property(e => e.Descripcion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Direccion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EmplResponsable)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EmprResponsable).HasDefaultValueSql("((0))");

                entity.Property(e => e.Estado).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fianza).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsr).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsrm).HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpDirecto).HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpFinanciamiento).HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpIndirecto).HasDefaultValueSql("((0))");

                entity.Property(e => e.ImpUtilidad).HasDefaultValueSql("((0))");

                entity.Property(e => e.Moneda)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Monto).HasDefaultValueSql("((0))");

                entity.Property(e => e.Montoext).HasDefaultValueSql("((0))");

                entity.Property(e => e.NextNivel).HasDefaultValueSql("((0))");

                entity.Property(e => e.NivelBorrado).HasDefaultValueSql("((0))");

                entity.Property(e => e.NoTabulador).HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombre)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PorAvance).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorFinanciamiento).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorHerramientaM).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorIndirectos).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorIntegracion).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorMaquinariaM).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorUtilidad).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalarioMinimo).HasDefaultValueSql("((0))");

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoNivel).HasDefaultValueSql("((0))");

                entity.Property(e => e.Usuario)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Wbs)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ZonaEconomica)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<PrNivele>(entity =>
            {
                entity.HasKey(e => e.Nivel)
                    .HasName("PK_pr_niveles_2__12");

                entity.HasIndex(e => e.Nivel, "pr_niveles_x")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Nombre)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<PrParametro>(entity =>
            {
                entity.HasKey(e => new { e.TipoParametro, e.CveParametro })
                    .HasName("prparametros")
                    .IsClustered(false);

                entity.Property(e => e.TipoParametro).IsUnicode(false);

                entity.Property(e => e.CveParametro).IsUnicode(false);

                entity.Property(e => e.Valor).IsUnicode(false);
            });

            modelBuilder.Entity<PrParametrosEstructura>(entity =>
            {
                entity.HasKey(e => e.CveNivel)
                    .HasName("PK_pr_parametros_str");

                entity.Property(e => e.CveNivel).ValueGeneratedNever();

                entity.Property(e => e.Abreviacion).IsUnicode(false);

                entity.Property(e => e.CptosIdenticos).HasDefaultValueSql("((0))");

                entity.Property(e => e.Incremento).HasDefaultValueSql("((1))");

                entity.Property(e => e.Nombre).IsUnicode(false);
            });

            modelBuilder.Entity<PrProycotizacion>(entity =>
            {
                entity.HasKey(e => new { e.Cveproy, e.Numproy, e.Indcte });

                entity.Property(e => e.Cveproy).IsUnicode(false);

                entity.Property(e => e.Numproy)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0000')");

                entity.Property(e => e.Indcte).IsUnicode(false);

                entity.Property(e => e.Autorizado).HasDefaultValueSql("((0))");

                entity.Property(e => e.CveCliente)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CveConcurso)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CveContrato)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Descripcion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Direccion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EmplResponsable)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EmprResponsable).HasDefaultValueSql("((0))");

                entity.Property(e => e.Estado).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fianza).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fondo).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsr).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsrm).HasDefaultValueSql("((0))");

                entity.Property(e => e.Monto).HasDefaultValueSql("((0))");

                entity.Property(e => e.NivelAdm).HasDefaultValueSql("((1))");

                entity.Property(e => e.NoTabulador).HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombre)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PorFinanciamiento).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorHerramientaM).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorIndUti).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorIndirecto).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorMaquinariaM).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorUtilidad).HasDefaultValueSql("((0))");

                entity.Property(e => e.Poravance).HasDefaultValueSql("((0))");

                entity.Property(e => e.Proyborrado).HasDefaultValueSql("((1))");

                entity.Property(e => e.RegImss)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.SalarioMinimo).HasDefaultValueSql("((0))");

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");

                entity.Property(e => e.StatusAdmin)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoProyecto).HasDefaultValueSql("((0))");

                entity.Property(e => e.Ubicacion).HasDefaultValueSql("((0))");

                entity.Property(e => e.Usuario)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Wbs)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.WbsAutomatico).HasDefaultValueSql("((1))");

                entity.Property(e => e.WbsPemex)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ZonaEconomica)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<PrProyecto>(entity =>
            {
                entity.HasKey(e => new { e.Numproy, e.Indcte })
                    .HasName("PK_pr_proyecto_1__13");

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Indcte).IsUnicode(false);

                entity.Property(e => e.Autorizado).HasDefaultValueSql("((0))");

                entity.Property(e => e.CveCliente)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CveConcurso)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CveContrato)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Descripcion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Direccion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EmplResponsable)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EmprResponsable).HasDefaultValueSql("((0))");

                entity.Property(e => e.Estado).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fianza).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fondo).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsr).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fsrm).HasDefaultValueSql("((0))");

                entity.Property(e => e.Monto).HasDefaultValueSql("((0))");

                entity.Property(e => e.NoTabulador).HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombre)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PorFinanciamiento).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorHerramientaM).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorIndUti).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorIndirecto).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorMaquinariaM).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorUtilidad).HasDefaultValueSql("((0))");

                entity.Property(e => e.Poravance).HasDefaultValueSql("((0))");

                entity.Property(e => e.Proyborrado).HasDefaultValueSql("((1))");

                entity.Property(e => e.RegImss)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.SalarioMinimo).HasDefaultValueSql("((0))");

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoProyecto).HasDefaultValueSql("((0))");

                entity.Property(e => e.Ubicacion).HasDefaultValueSql("((0))");

                entity.Property(e => e.Wbs)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.WbsAutomatico).HasDefaultValueSql("((1))");

                entity.Property(e => e.WbsPemex).IsUnicode(false);

                entity.Property(e => e.ZonaEconomica)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<ProcesarFacturaExcel>(entity =>
            {
                entity.Property(e => e.ProcesarFacturaExcelId).ValueGeneratedNever();

                entity.Property(e => e.IdProveedor).IsUnicode(false);
            });

            modelBuilder.Entity<Prueba>(entity =>
            {
                entity.Property(e => e.Id)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Pruebaxd2>(entity =>
            {
                entity.Property(e => e.Id).IsUnicode(false);
            });

            modelBuilder.Entity<Reporte>(entity =>
            {
                entity.HasKey(e => e.Reporte1)
                    .HasName("PK__reporte__96B1C8CD4CFEA255");

                entity.Property(e => e.Reporte1).ValueGeneratedNever();

                entity.Property(e => e.CodigoIso).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.NombreArchivo).IsUnicode(false);

                entity.Property(e => e.Revisioniso).IsUnicode(false);

                entity.Property(e => e.UsuarioFirma).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<Result>(entity =>
            {
                entity.Property(e => e.DebitoCredito).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.ReferenciaOrigen).IsUnicode(false);

                entity.Property(e => e.TipoPoliza).IsUnicode(false);
            });

            modelBuilder.Entity<SeModulo>(entity =>
            {
                entity.HasKey(e => e.ModId)
                    .HasName("pkmodulos")
                    .IsClustered(false);

                entity.HasIndex(e => e.ModId, "se_modulos")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ModId).IsUnicode(false);

                entity.Property(e => e.ModNm).IsUnicode(false);
            });

            modelBuilder.Entity<SeUsrProyecto>(entity =>
            {
                entity.HasKey(e => new { e.UsrId, e.Numproy })
                    .HasName("PK___6__12");

                entity.Property(e => e.UsrId).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.TipoPr)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('v')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<SeUsrmod>(entity =>
            {
                entity.Property(e => e.ModId).IsUnicode(false);

                entity.Property(e => e.UsrId).IsUnicode(false);
            });

            modelBuilder.Entity<SeUsuario>(entity =>
            {
                entity.HasKey(e => e.UsrId)
                    .HasName("pkusuarios")
                    .IsClustered(false);

                entity.Property(e => e.UsrId).IsUnicode(false);

                entity.Property(e => e.Master)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsrNm)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.UsrPw)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<ShipperBatchControlHeader>(entity =>
            {
                entity.HasIndex(e => e.IdBatchCtlHeader, "IX_shipper_batch_control_header")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.AppIdentifier)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.BatchControlNumber).IsUnicode(false);

                entity.Property(e => e.CommPassword).IsUnicode(false);

                entity.Property(e => e.DataEntry)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FilerIdType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdTrafico).IsUnicode(false);

                entity.Property(e => e.Itn).IsUnicode(false);

                entity.Property(e => e.RecordIdentifier)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TrailerIdNo).IsUnicode(false);

                entity.Property(e => e.Xtn).IsUnicode(false);
            });

            modelBuilder.Entity<ShipperBlockControlHeader>(entity =>
            {
                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.RecordIdentifier)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsppiId).IsUnicode(false);

                entity.Property(e => e.UsppiIdType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsppiName).IsUnicode(false);

                entity.HasOne(d => d.BatchCtlHeaderNavigation)
                    .WithOne(p => p.ShipperBlockControlHeader)
                    .HasForeignKey<ShipperBlockControlHeader>(d => d.BatchCtlHeader)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_shipper_block_control_header_shipper_batch_control_header");
            });

            modelBuilder.Entity<ShipperGenerale>(entity =>
            {
                entity.Property(e => e.ShipperGeneralesId).ValueGeneratedNever();

                entity.Property(e => e.AesFilePath).IsUnicode(false);

                entity.Property(e => e.ApplicationIdentifier)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ContactFirstName).IsUnicode(false);

                entity.Property(e => e.ContactLastName).IsUnicode(false);

                entity.Property(e => e.CountryUltimateDest)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ExpInformationCode).IsUnicode(false);

                entity.Property(e => e.FilerIdType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FilesPath).IsUnicode(false);

                entity.Property(e => e.FilingOptionIndicator)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((2))")
                    .IsFixedLength(true);

                entity.Property(e => e.ForeignDomesticOrigin)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdPatente)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.InbondCode)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((70))");

                entity.Property(e => e.PartyIdType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('E')")
                    .IsFixedLength(true);

                entity.Property(e => e.PartyType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('F')")
                    .IsFixedLength(true);

                entity.Property(e => e.PortExportationCode).IsUnicode(false);

                entity.Property(e => e.RoutedExpTransactInd)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.UsppiIdType)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('E')")
                    .IsFixedLength(true);

                entity.Property(e => e.XtnPart).IsUnicode(false);
            });

            modelBuilder.Entity<ShipperItemCommodityDetail>(entity =>
            {
                entity.HasKey(e => new { e.BlockCtlHeader, e.LineItemDetailId, e.CommDetailId })
                    .HasName("PK_item_commodity_detail");

                entity.Property(e => e.CommDetailId).ValueGeneratedOnAdd();

                entity.Property(e => e.Eccn).IsUnicode(false);

                entity.Property(e => e.ExpLicenseNumber).IsUnicode(false);

                entity.Property(e => e.HtsNumber).IsUnicode(false);

                entity.Property(e => e.RecordIdentifier)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UnitMeasure).IsUnicode(false);

                entity.Property(e => e.UnitMeasure2).IsUnicode(false);

                entity.HasOne(d => d.ShipperItemDetail)
                    .WithMany(p => p.ShipperItemCommodityDetails)
                    .HasForeignKey(d => new { d.BlockCtlHeader, d.LineItemDetailId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_shipper_item_commodity_detail_shipper_item_detail");
            });

            modelBuilder.Entity<ShipperItemDetail>(entity =>
            {
                entity.HasKey(e => new { e.BlockCtlHeader, e.LineItemDetailId })
                    .HasName("PK_item_detail");

                entity.Property(e => e.CommodityDescription).IsUnicode(false);

                entity.Property(e => e.ExpInformationCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FilingActionRequest)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ForeignDomesticOrigin)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.LicenseCode).IsUnicode(false);

                entity.Property(e => e.LineNumber).IsUnicode(false);

                entity.Property(e => e.RecordIdentifier)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.BlockCtlHeaderNavigation)
                    .WithMany(p => p.ShipperItemDetails)
                    .HasForeignKey(d => d.BlockCtlHeader)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_shipper_item_detail_shipper_block_control_header");
            });

            modelBuilder.Entity<ShipperLicence>(entity =>
            {
                entity.Property(e => e.Eccn).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.LicenceCode).IsUnicode(false);

                entity.Property(e => e.LicenceNumber).IsUnicode(false);

                entity.Property(e => e.NoParte).IsUnicode(false);
            });

            modelBuilder.Entity<ShipperLicenceException>(entity =>
            {
                entity.HasIndex(e => e.ShipperLicenceExceId, "IX_shipper_licence_exception")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ShipperLicenceExceId).ValueGeneratedNever();

                entity.Property(e => e.Condition).IsUnicode(false);

                entity.Property(e => e.Key).IsUnicode(false);

                entity.Property(e => e.Value).IsUnicode(false);

                entity.HasOne(d => d.ShipperLicence)
                    .WithMany(p => p.ShipperLicenceExceptions)
                    .HasForeignKey(d => d.ShipperLicenceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_shipper_licence_exception_shipper_licence");
            });

            modelBuilder.Entity<ShipperLicenseDetail>(entity =>
            {
                entity.HasKey(e => new { e.BlockCtlHeader, e.LiceseDetailId });

                entity.Property(e => e.LiceseDetailId).ValueGeneratedOnAdd();

                entity.Property(e => e.EligiblePartyCert)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ItarExemptionNumber).IsUnicode(false);

                entity.Property(e => e.RecordIdentifier)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RegistrationNumber).IsUnicode(false);

                entity.Property(e => e.SmeIndicator)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UnitMeasureCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsmlCategoryCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.BlockCtlHeaderNavigation)
                    .WithMany(p => p.ShipperLicenseDetails)
                    .HasForeignKey(d => d.BlockCtlHeader)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_shipper_license_detail_shipper_block_control_header");
            });

            modelBuilder.Entity<ShipperPartyAddressN02>(entity =>
            {
                entity.HasKey(e => new { e.BlockCtlHeader, e.PartyAddressId, e.PartyHeaderId })
                    .HasName("PK_party_address");

                entity.Property(e => e.PartyAddressId).ValueGeneratedOnAdd();

                entity.Property(e => e.AddressLine1).IsUnicode(false);

                entity.Property(e => e.AddressLine2).IsUnicode(false);

                entity.Property(e => e.ContactPhoneNumber).IsUnicode(false);

                entity.Property(e => e.RecordIdentifier)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ShipperPartyAddressN03>(entity =>
            {
                entity.HasKey(e => new { e.BlockCtlHeader, e.PartyAddressId, e.PartyHeaderId });

                entity.Property(e => e.PartyAddressId).ValueGeneratedOnAdd();

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.CountryCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PostalCode).IsUnicode(false);

                entity.Property(e => e.RecordIdentifier)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.StateCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsPpiIrsNumber).IsUnicode(false);

                entity.Property(e => e.UsPpiirsIdType)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<ShipperPartyHeader>(entity =>
            {
                entity.HasKey(e => new { e.BlockCtlHeader, e.PartyHeaderId })
                    .HasName("PK_party_header");

                entity.Property(e => e.PartyHeaderId).ValueGeneratedOnAdd();

                entity.Property(e => e.ContactFirstName).IsUnicode(false);

                entity.Property(e => e.ContactLastName).IsUnicode(false);

                entity.Property(e => e.PartyId).IsUnicode(false);

                entity.Property(e => e.PartyIdType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PartyName).IsUnicode(false);

                entity.Property(e => e.PartyType)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecordIdentifier)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SoldRouteIndicator)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.BlockCtlHeaderNavigation)
                    .WithMany(p => p.ShipperPartyHeaders)
                    .HasForeignKey(d => d.BlockCtlHeader)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_shipper_party_header_shipper_block_control_header");
            });

            modelBuilder.Entity<ShipperShipmentCs1>(entity =>
            {
                entity.HasKey(e => new { e.BlockCtlHeader, e.ShipmentSc1Id });

                entity.Property(e => e.ShipmentSc1Id).ValueGeneratedOnAdd();

                entity.Property(e => e.CarrierId).IsUnicode(false);

                entity.Property(e => e.ConveyanceCarrierName).IsUnicode(false);

                entity.Property(e => e.CountryUltDestCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FilingActionRequest)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.FilingOptionIndicator)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Hazmat)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Mot).IsUnicode(false);

                entity.Property(e => e.PortExportationCode).IsUnicode(false);

                entity.Property(e => e.PortUnladingCode).IsUnicode(false);

                entity.Property(e => e.RecordIdentifier).IsUnicode(false);

                entity.Property(e => e.RelatedCompanyInd)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ShipmentRefNumber).IsUnicode(false);

                entity.Property(e => e.UsStateOrigin).IsUnicode(false);

                entity.HasOne(d => d.BlockCtlHeaderNavigation)
                    .WithMany(p => p.ShipperShipmentCs1s)
                    .HasForeignKey(d => d.BlockCtlHeader)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_shipper_shipment_cs1_shipper_block_control_header");
            });

            modelBuilder.Entity<ShipperShipmentCs2>(entity =>
            {
                entity.HasKey(e => new { e.BlockCtlHeader, e.ShipmentCs2Id });

                entity.Property(e => e.ShipmentCs2Id).ValueGeneratedOnAdd();

                entity.Property(e => e.EntryNumber).IsUnicode(false);

                entity.Property(e => e.ForeignTradeZoneId).IsUnicode(false);

                entity.Property(e => e.InbondCode)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RecordIdentifier)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.RoutedExpTransactInd)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.BlockCtlHeaderNavigation)
                    .WithMany(p => p.ShipperShipmentCs2s)
                    .HasForeignKey(d => d.BlockCtlHeader)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_shipper_shipment_cs2_shipper_block_control_header");
            });

            modelBuilder.Entity<ShipperTransportationDetail>(entity =>
            {
                entity.HasKey(e => new { e.BlockCtlHeader, e.TransportationDetailId })
                    .HasName("PK_transportation_detail");

                entity.Property(e => e.TransportationDetailId).ValueGeneratedOnAdd();

                entity.Property(e => e.EquipmentNumber).IsUnicode(false);

                entity.Property(e => e.RecordIdentifier)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SealNumber).IsUnicode(false);

                entity.Property(e => e.TranspReferenceNumber).IsUnicode(false);

                entity.HasOne(d => d.BlockCtlHeaderNavigation)
                    .WithMany(p => p.ShipperTransportationDetails)
                    .HasForeignKey(d => d.BlockCtlHeader)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_shipper_transportation_detail_shipper_block_control_header");
            });

            modelBuilder.Entity<StatusEmbarque>(entity =>
            {
                entity.HasKey(e => e.StatusEmbarque1)
                    .HasName("PKPk_status_embarque_status_em");

                entity.Property(e => e.StatusEmbarque1).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<StatusMovimiento>(entity =>
            {
                entity.HasKey(e => e.StatusMovimiento1)
                    .HasName("PK_status_movimiento_status_mo");

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<StatusTrafico>(entity =>
            {
                entity.HasKey(e => e.StatusTrafico1)
                    .HasName("PKPk_status_trafico_status_tra");

                entity.Property(e => e.StatusTrafico1).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<Tarea>(entity =>
            {
                entity.Property(e => e.Rowguid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TareasSecurity>(entity =>
            {
                entity.HasKey(e => new { e.NoModulo, e.NoTarea, e.TipoTarea, e.UsrId })
                    .HasName("security")
                    .IsClustered(false);

                entity.Property(e => e.UsrId).IsUnicode(false);

                entity.Property(e => e.Consult)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.Erase)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.Report)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);

                entity.Property(e => e.Write)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TeAvisoCargoAbono>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumBanco, e.NumCuenta, e.NumAviso })
                    .HasName("PK_te_aviso_cargo_abono_1__10");

                entity.Property(e => e.NumCuenta).IsUnicode(false);

                entity.Property(e => e.CompleDlls).HasComputedColumnSql("([importe_total]*[tipo_cambio]-[importe_total])", false);

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.ValorPesos).HasComputedColumnSql("([importe_total]*[tipo_cambio])", false);
            });

            modelBuilder.Entity<TeBanco>(entity =>
            {
                entity.HasKey(e => e.NumBanco)
                    .HasName("PK_te_banco_1__24");

                entity.Property(e => e.ClaveBancoSat).IsUnicode(false);

                entity.Property(e => e.Direccion).IsUnicode(false);

                entity.Property(e => e.FormaCheque).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.NombreRepresentante).IsUnicode(false);

                entity.Property(e => e.NombreSucursal).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);

                entity.Property(e => e.Telefono1).IsUnicode(false);

                entity.Property(e => e.Telefono2).IsUnicode(false);
            });

            modelBuilder.Entity<TeChequera>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumBanco, e.NumCuenta, e.NumChequera })
                    .HasName("PK_te_chequera_1__10");

                entity.Property(e => e.NumCuenta).IsUnicode(false);

                entity.Property(e => e.TipoChequera).IsUnicode(false);
            });

            modelBuilder.Entity<TeChequesCobro>(entity =>
            {
                entity.HasKey(e => new { e.NumReciboIngreso, e.Numempresa, e.NumBanco, e.NumChequeCobro })
                    .HasName("PK_te_cheques_cobro_1__16");
            });

            modelBuilder.Entity<TeConceptosPagoIngreso>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumReciboIngreso, e.Consecutivo })
                    .IsClustered(false);

                entity.Property(e => e.Consecutivo).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TeCptoAviso>(entity =>
            {
                entity.HasIndex(e => e.CveCptoAviso, "te_cpto_aviso")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<TeCptosIngreso>(entity =>
            {
                entity.HasKey(e => e.CveCptoIngreso)
                    .HasName("PK___2__14");

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<TeCuentum>(entity =>
            {
                entity.HasKey(e => new { e.NumBanco, e.NumCuenta, e.Numempresa })
                    .HasName("PK_te_cuenta_1__24");

                entity.Property(e => e.NumCuenta).IsUnicode(false);

                entity.Property(e => e.CtaBeneficiario).IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TeDeposito>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumBanco, e.NumCuenta, e.NumDeposito })
                    .HasName("PK___1__14");

                entity.Property(e => e.NumCuenta).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);
            });

            modelBuilder.Entity<TeDetReciboIngreso>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumReciboIngreso, e.TipoDocto, e.NumDocto })
                    .HasName("PK_te_det_recibo_ingreso_1__14");

                entity.Property(e => e.NumCuenta).IsUnicode(false);
            });

            modelBuilder.Entity<TeDetReciboIngresoAd>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumReciboIngreso, e.TipoBeneficiario, e.CveBeneficiario, e.CveCptoIngreso })
                    .IsClustered(false);

                entity.Property(e => e.CFormaPago).IsUnicode(false);

                entity.Property(e => e.ConsecutivoCuenta).HasDefaultValueSql("((0))");

                entity.Property(e => e.CtaOrdenante).IsUnicode(false);

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.NomBancoOrdExt).IsUnicode(false);

                entity.Property(e => e.NumCuenta).IsUnicode(false);

                entity.Property(e => e.NumOperacion).IsUnicode(false);

                entity.Property(e => e.Numproy).IsUnicode(false);

                entity.Property(e => e.RfcEmisorCtaOrd).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<TeLogTesorerium>(entity =>
            {
                entity.HasKey(e => new { e.TipoMovto, e.NumMovto, e.Numempresa, e.NumBanco, e.NumCuenta, e.FechaMovto })
                    .HasName("PK_te_log_tesoreria_6__13");

                entity.Property(e => e.NumCuenta).IsUnicode(false);

                entity.Property(e => e.Conciliado)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);
            });

            modelBuilder.Entity<TeReciboIngreso>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumReciboIngreso })
                    .HasName("PK___4__14");

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NumCuenta).IsUnicode(false);
            });

            modelBuilder.Entity<TeReciboIngresoAd>(entity =>
            {
                entity.HasKey(e => new { e.Numempresa, e.NumReciboIngreso })
                    .HasName("PK_te_recibo_ingreso")
                    .IsClustered(false);

                entity.Property(e => e.ConsecutivoCuenta).HasDefaultValueSql("((0))");

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NumCuenta).IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<TeTipoCuentum>(entity =>
            {
                entity.HasKey(e => e.TipoCuenta)
                    .HasName("tipo_cuenta")
                    .IsClustered(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<TeTmpAnticipo>(entity =>
            {
                entity.HasKey(e => new { e.NoBeneficiario, e.Trafico })
                    .HasName("PK___7__12");

                entity.Property(e => e.Moneda).IsUnicode(false);
            });

            modelBuilder.Entity<TeTransferenciaBancarium>(entity =>
            {
                entity.HasKey(e => new { e.NumTransferencia, e.NumempresaOrigen, e.NumBancoOrigen, e.NumCuentaOrigen, e.NumempresaDestino, e.NumBancoDestino, e.NumCuentaDestino })
                    .HasName("PK___5__14");

                entity.Property(e => e.NumCuentaOrigen).IsUnicode(false);

                entity.Property(e => e.NumCuentaDestino).IsUnicode(false);

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.MonedaDestino).IsUnicode(false);

                entity.Property(e => e.MonedaOrigen).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<TpCompensacion>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdCompensacion })
                    .HasName("PKtp_compensacion");
            });

            modelBuilder.Entity<TpConfiguracion>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.Aduana, e.Patente, e.Pedimento })
                    .HasName("PKtp_configuracion");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.Partidas).HasDefaultValueSql("((0))");

                entity.Property(e => e.Rectificacion).HasDefaultValueSql("((0))");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.ReferenciaCorresponsal).IsUnicode(false);

                entity.Property(e => e.Traspaso).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TpContenedor>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdContenedor })
                    .HasName("PKtp_contenedor");
            });

            modelBuilder.Entity<TpContribucionAmparoArt303Tlc>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.Partida, e.NumeroPartida, e.SecuencialGravamen, e.SecuencialContribucion })
                    .HasName("PKtp_contribucion_amparo_art303TLC");
            });

            modelBuilder.Entity<TpCuentaAduanera>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdCuenta })
                    .HasName("PKtp_cuenta_aduanera");

                entity.Property(e => e.FolioConstancia).IsUnicode(false);

                entity.Property(e => e.NumeroCuenta).IsUnicode(false);

                entity.Property(e => e.TipoCuenta).IsUnicode(false);

                entity.Property(e => e.TipoGarantia).IsUnicode(false);
            });

            modelBuilder.Entity<TpCuentaAduaneraPartidum>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.Partida, e.NumeroPartida, e.SecuencialCuenta })
                    .HasName("PKtp_cuenta_aduanera_partida");

                entity.Property(e => e.FolioConstancia).IsUnicode(false);

                entity.Property(e => e.NumeroCuenta).IsUnicode(false);

                entity.Property(e => e.TipoCuenta).IsUnicode(false);

                entity.Property(e => e.TipoGarantia).IsUnicode(false);
            });

            modelBuilder.Entity<TpDatosVehiculo>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.Partida, e.NumeroPartida, e.SecuencialDatos })
                    .HasName("PKtp_datos_vehiculo");

                entity.Property(e => e.Vin).IsUnicode(false);
            });

            modelBuilder.Entity<TpDescargo>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdDescargo })
                    .HasName("PKtp_descargo");

                entity.Property(e => e.ClaveDocumentoOriginal).IsUnicode(false);

                entity.Property(e => e.FraccionOriginal).IsUnicode(false);

                entity.Property(e => e.UnidadMedida).IsUnicode(false);
            });

            modelBuilder.Entity<TpDestinatario>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdDestinatario })
                    .HasName("PKtp_destinatario");

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CiudadMunicipio).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.EntidadFederativa).IsUnicode(false);

                entity.Property(e => e.IdentificadorFiscal).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.NumeroExterior).IsUnicode(false);

                entity.Property(e => e.NumeroInterior).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.PaisDireccion).IsUnicode(false);
            });

            modelBuilder.Entity<TpDetalleImportacionEuCanadum>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdDeterminacion, e.IdDetalle })
                    .HasName("PKtp_detalle_importacion_EU_canada");

                entity.Property(e => e.FraccionArancelaria).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.UnidadMedida).IsUnicode(false);
            });

            modelBuilder.Entity<TpDeterminacionContribucionesArticulo303>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdDeterminacion })
                    .HasName("PKtp_determinacion_contribuciones_articulo303");

                entity.Property(e => e.FraccionArancelaria).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.PaisDestino).IsUnicode(false);
            });

            modelBuilder.Entity<TpDiferenciaContribucion>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdDiferencia })
                    .HasName("PKtp_diferencia_contribucion");
            });

            modelBuilder.Entity<TpDocumentoPago>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdDocumento })
                    .HasName("PKtp_documento_pago");

                entity.Property(e => e.InstitucionEmisora).IsUnicode(false);

                entity.Property(e => e.NumeroDocumento).IsUnicode(false);
            });

            modelBuilder.Entity<TpDtaRectificacion>(entity =>
            {
                entity.HasKey(e => e.Anio)
                    .HasName("PKtp_dta_rectificacion");

                entity.Property(e => e.Anio).IsUnicode(false);
            });

            modelBuilder.Entity<TpFactura>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdFactura })
                    .HasName("PKtp_facturaa");

                entity.Property(e => e.IdentificadorFiscalProveedorComprador).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.ProveedorComprador).IsUnicode(false);

                entity.Property(e => e.TerminoFacturacion).IsUnicode(false);
            });

            modelBuilder.Entity<TpFecha>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdImportadorExp, e.Secuencial })
                    .HasName("PKtp_fechas");
            });

            modelBuilder.Entity<TpGravaman>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.Partida, e.NumeroPartida, e.SecuencialGravamen })
                    .HasName("PKtp_gravamen");
            });

            modelBuilder.Entity<TpGuium>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdGuia })
                    .HasName("PKtp_guia");

                entity.Property(e => e.GuiaManifiesto).IsUnicode(false);

                entity.Property(e => e.TipoGuia).IsUnicode(false);
            });

            modelBuilder.Entity<TpIdentificador>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdIdentificador })
                    .HasName("PKtp_identificador");

                entity.Property(e => e.ClaveIdentificador).IsUnicode(false);

                entity.Property(e => e.Complemento1).IsUnicode(false);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);
            });

            modelBuilder.Entity<TpIdentificadorPartidum>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.Partida, e.NumeroPartida, e.SecuencialIdentificador })
                    .HasName("PKtp_identificador_partida");

                entity.Property(e => e.ClaveIdentificador).IsUnicode(false);

                entity.Property(e => e.Complemento1).IsUnicode(false);

                entity.Property(e => e.Complemento2).IsUnicode(false);

                entity.Property(e => e.Complemento3).IsUnicode(false);
            });

            modelBuilder.Entity<TpImportadorExportador>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdImportadorExp })
                    .HasName("PKtp_importador_exportador");

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CiudadMunicipio).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.Curp).IsUnicode(false);

                entity.Property(e => e.NumeroExterior).IsUnicode(false);

                entity.Property(e => e.NumeroInterior).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.PaisDireccion).IsUnicode(false);

                entity.Property(e => e.RazonSocial).IsUnicode(false);

                entity.Property(e => e.Rfc).IsUnicode(false);
            });

            modelBuilder.Entity<TpImporte>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.Partida, e.NumeroPartida, e.SecuencialGravamen, e.SecuencialImporte })
                    .HasName("PKtp_importe");
            });

            modelBuilder.Entity<TpInformeIndustriaAutomotriz>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdInforme })
                    .HasName("PKtp_informe_industria_automotriz");

                entity.Property(e => e.ClaveDocumento).IsUnicode(false);

                entity.Property(e => e.CurpApoderadoMandatario).IsUnicode(false);

                entity.Property(e => e.RfcImportadorExportador).IsUnicode(false);
            });

            modelBuilder.Entity<TpObservacione>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.Secuencial })
                    .HasName("PKtp_observaciones");

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<TpObservacionesPartidum>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.Partida, e.NumeroPartida, e.Secuencial })
                    .HasName("PKtp_observaciones_partida");

                entity.Property(e => e.Observaciones).IsUnicode(false);
            });

            modelBuilder.Entity<TpPagoContribucione>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdDeterminacion, e.IdPago })
                    .HasName("PKtp_pago_contribuciones");
            });

            modelBuilder.Entity<TpPartida>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.Partida })
                    .HasName("PKtp_partidas");

                entity.Property(e => e.Consultado).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TpPartidasInformeIndustriaAutomotriz>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdPartidasInforme })
                    .HasName("PKtp_partidas_informe_industria_automotriz");

                entity.Property(e => e.Fraccion).IsUnicode(false);

                entity.Property(e => e.NumeroPartida).IsUnicode(false);

                entity.Property(e => e.PaisCompradorVendedor).IsUnicode(false);

                entity.Property(e => e.PaisOrigenDestino).IsUnicode(false);

                entity.Property(e => e.UnidadMedidaComercial).IsUnicode(false);

                entity.Property(e => e.UnidadMedidaTarifa).IsUnicode(false);
            });

            modelBuilder.Entity<TpPartidum>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.Partida, e.NumeroPartida })
                    .HasName("PKtp_partida");

                entity.Property(e => e.CodigoProducto).IsUnicode(false);

                entity.Property(e => e.DescripcionMercancia).IsUnicode(false);

                entity.Property(e => e.FraccionArancelaria).IsUnicode(false);

                entity.Property(e => e.Marca).IsUnicode(false);

                entity.Property(e => e.MetodoValoracion).IsUnicode(false);

                entity.Property(e => e.Modelo).IsUnicode(false);

                entity.Property(e => e.PaisOrigenDestino).IsUnicode(false);

                entity.Property(e => e.PaisVendedorComprador).IsUnicode(false);

                entity.Property(e => e.SubdivisionFraccion).IsUnicode(false);

                entity.Property(e => e.UnidadMedidaComercial).IsUnicode(false);

                entity.Property(e => e.UnidadMedidaTarifa).IsUnicode(false);

                entity.Property(e => e.Vinculacion).IsUnicode(false);
            });

            modelBuilder.Entity<TpPasswordWeb>(entity =>
            {
                entity.HasKey(e => e.Patente)
                    .HasName("PKtp_password_web");

                entity.Property(e => e.Patente).ValueGeneratedNever();

                entity.Property(e => e.Rfc).IsUnicode(false);
            });

            modelBuilder.Entity<TpPedimento>(entity =>
            {
                entity.HasKey(e => e.IdPedimento)
                    .HasName("PKtp_pedimentoo");

                entity.Property(e => e.IdPedimento).ValueGeneratedNever();

                entity.Property(e => e.ClaveDocumento).IsUnicode(false);

                entity.Property(e => e.CurpApoderadoMandatario).IsUnicode(false);

                entity.Property(e => e.RfcAgenteAduanalSocFactura).IsUnicode(false);
            });

            modelBuilder.Entity<TpPedimentoComplementario>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdPedimentoComp })
                    .HasName("PKtp_pedimento_complementario");

                entity.Property(e => e.ClaveDocumento).IsUnicode(false);

                entity.Property(e => e.CurpApoderadoMandatario).IsUnicode(false);

                entity.Property(e => e.CurpImportadorExportador).IsUnicode(false);

                entity.Property(e => e.RazonSocialImportadorExportador).IsUnicode(false);

                entity.Property(e => e.RfcAgenteAduanalSociedadFactura).IsUnicode(false);

                entity.Property(e => e.RfcImportadorExportador).IsUnicode(false);
            });

            modelBuilder.Entity<TpPermiso>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.Partida, e.NumeroPartida, e.SecuencialPermiso })
                    .HasName("PKtp_permiso");

                entity.Property(e => e.ClavePermiso).IsUnicode(false);

                entity.Property(e => e.FirmaDescargo).IsUnicode(false);

                entity.Property(e => e.NumeroPermiso).IsUnicode(false);
            });

            modelBuilder.Entity<TpPrevioConsolidado>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdPrevio })
                    .HasName("PKtp_previo_consolidado");

                entity.Property(e => e.ClaveDocumento).IsUnicode(false);

                entity.Property(e => e.CurpApoderadoMandatario).IsUnicode(false);

                entity.Property(e => e.CurpImportadorExportador).IsUnicode(false);

                entity.Property(e => e.Destino).IsUnicode(false);

                entity.Property(e => e.RfcAgenteAduanalSociedadFactura).IsUnicode(false);

                entity.Property(e => e.RfcImportadorExportador).IsUnicode(false);

                entity.Property(e => e.TipoOperacion).IsUnicode(false);
            });

            modelBuilder.Entity<TpProveedorComprador>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdProveedor })
                    .HasName("PKtp_proveedor_comprador");

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CiudadMunicipio).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.IdentificadorFiscal).IsUnicode(false);

                entity.Property(e => e.Moneda).IsUnicode(false);

                entity.Property(e => e.NumeroExterior).IsUnicode(false);

                entity.Property(e => e.NumeroInterior).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.PaisDireccion).IsUnicode(false);

                entity.Property(e => e.ProveedorComprador).IsUnicode(false);
            });

            modelBuilder.Entity<TpPruebaSuficiente>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdPrueba })
                    .HasName("PKtp_prueba_suficiente");

                entity.Property(e => e.NumeroPedimentoEuCanada).IsUnicode(false);

                entity.Property(e => e.PaisDestino).IsUnicode(false);

                entity.Property(e => e.PruebaSuficiente).IsUnicode(false);
            });

            modelBuilder.Entity<TpRectificacion>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdRectificacion })
                    .HasName("PKtp_rectificacion");

                entity.Property(e => e.ClaveDocumento).IsUnicode(false);
            });

            modelBuilder.Entity<TpTasa>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdTasa })
                    .HasName("PKtp_tasa");
            });

            modelBuilder.Entity<TpTasaPartidum>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.Partida, e.NumeroPartida, e.SecuencialGravamen, e.SecuencialTasa })
                    .HasName("PKtp_tasa_partida");
            });

            modelBuilder.Entity<TpTransporte>(entity =>
            {
                entity.HasKey(e => new { e.IdPedimento, e.IdTransporte })
                    .HasName("PKtp_transporte");

                entity.Property(e => e.Candados).IsUnicode(false);

                entity.Property(e => e.CurpTransportista).IsUnicode(false);

                entity.Property(e => e.DomicilioTransportista).IsUnicode(false);

                entity.Property(e => e.Identificador).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.PaisTransporte).IsUnicode(false);

                entity.Property(e => e.RfcTransportista).IsUnicode(false);
            });

            modelBuilder.Entity<TpValoracion>(entity =>
            {
                entity.HasKey(e => e.IdValoracion)
                    .HasName("PKtp_valoracion");

                entity.Property(e => e.IdValoracion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<TpVinculacion>(entity =>
            {
                entity.HasKey(e => e.IdVinculacion)
                    .HasName("PKtp_vinculacion");

                entity.Property(e => e.IdVinculacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<UsacRelUsuarioOficina>(entity =>
            {
                entity.HasKey(e => new { e.IdUsuario, e.IdOficina });

                entity.Property(e => e.IdUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<UsacSituacionesRefmaster>(entity =>
            {
                entity.Property(e => e.IdSituacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<UsacTipoOperacion>(entity =>
            {
                entity.Property(e => e.Clave)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewEmbarque>(entity =>
            {
                entity.ToView("viewEmbarque");

                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.AduanaSeccion).IsUnicode(false);

                entity.Property(e => e.Almacen).IsUnicode(false);

                entity.Property(e => e.AlmacenNombre).IsUnicode(false);

                entity.Property(e => e.Apoderado).IsUnicode(false);

                entity.Property(e => e.ApoderadoNombre).IsUnicode(false);

                entity.Property(e => e.CapacidadArribo).IsUnicode(false);

                entity.Property(e => e.CapacidadSalida).IsUnicode(false);

                entity.Property(e => e.Categoria).IsUnicode(false);

                entity.Property(e => e.ChoferNombre).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.ClienteNombre).IsUnicode(false);

                entity.Property(e => e.Destino).IsUnicode(false);

                entity.Property(e => e.DireccionDestino).IsUnicode(false);

                entity.Property(e => e.DobleOperador).IsUnicode(false);

                entity.Property(e => e.Embarque).IsUnicode(false);

                entity.Property(e => e.EntradaAduana).IsUnicode(false);

                entity.Property(e => e.Entrego).IsUnicode(false);

                entity.Property(e => e.FleteCobrar).IsUnicode(false);

                entity.Property(e => e.GuiaTalon).IsUnicode(false);

                entity.Property(e => e.LineaFletera).IsUnicode(false);

                entity.Property(e => e.LineaNombre).IsUnicode(false);

                entity.Property(e => e.Motivo).IsUnicode(false);

                entity.Property(e => e.NombreOrganizacion).IsUnicode(false);

                entity.Property(e => e.ObservacionDestino).IsUnicode(false);

                entity.Property(e => e.ObservacionFacturar).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.ObservacionesEmbarque).IsUnicode(false);

                entity.Property(e => e.Operacion).IsUnicode(false);

                entity.Property(e => e.Organizacion).IsUnicode(false);

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.Recibio).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SegundoReconocimiento).IsUnicode(false);

                entity.Property(e => e.Sello1).IsUnicode(false);

                entity.Property(e => e.Sello2).IsUnicode(false);

                entity.Property(e => e.TipoCaja).IsUnicode(false);

                entity.Property(e => e.TipoEmbarque)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoEmbarqueNombre).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOrganizacion).IsUnicode(false);

                entity.Property(e => e.TipoPedimento).IsUnicode(false);

                entity.Property(e => e.TipoVehiculo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoVehiculoNombre).IsUnicode(false);

                entity.Property(e => e.Trafico)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Transfer).IsUnicode(false);

                entity.Property(e => e.TransferNombre).IsUnicode(false);

                entity.Property(e => e.Urgente).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);

                entity.Property(e => e.Vehiculo).IsUnicode(false);
            });

            modelBuilder.Entity<ViewPedimentoFactura>(entity =>
            {
                entity.ToView("viewPedimentoFactura");

                entity.Property(e => e.Calle).IsUnicode(false);

                entity.Property(e => e.CodigoPostal).IsUnicode(false);

                entity.Property(e => e.EntidadFederativa)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Factura).IsUnicode(false);

                entity.Property(e => e.Incoterm).IsUnicode(false);

                entity.Property(e => e.MonedaFactura).IsUnicode(false);

                entity.Property(e => e.NumeroExterior).IsUnicode(false);

                entity.Property(e => e.NumeroInterior).IsUnicode(false);

                entity.Property(e => e.PaisOrigen).IsUnicode(false);

                entity.Property(e => e.Proveedor).IsUnicode(false);

                entity.Property(e => e.ProveedorCiudad).IsUnicode(false);

                entity.Property(e => e.ProveedorEstado).IsUnicode(false);

                entity.Property(e => e.ProveedorIrs).IsUnicode(false);

                entity.Property(e => e.ProveedorNombre).IsUnicode(false);

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.TipoFfactura).IsUnicode(false);

                entity.Property(e => e.Vinculacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp500>(entity =>
            {
                entity.ToView("viewRegistroSHCP500");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp501>(entity =>
            {
                entity.ToView("viewRegistroSHCP501");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp502>(entity =>
            {
                entity.ToView("viewRegistroSHCP502");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp503>(entity =>
            {
                entity.ToView("viewRegistroSHCP503");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp504>(entity =>
            {
                entity.ToView("viewRegistroSHCP504");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp505>(entity =>
            {
                entity.ToView("viewRegistroSHCP505");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp506>(entity =>
            {
                entity.ToView("viewRegistroSHCP506");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp507>(entity =>
            {
                entity.ToView("viewRegistroSHCP507");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp508>(entity =>
            {
                entity.ToView("viewRegistroSHCP508");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp509>(entity =>
            {
                entity.ToView("viewRegistroSHCP509");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp510>(entity =>
            {
                entity.ToView("viewRegistroSHCP510");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp511>(entity =>
            {
                entity.ToView("viewRegistroSHCP511");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp512>(entity =>
            {
                entity.ToView("viewRegistroSHCP512");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp513>(entity =>
            {
                entity.ToView("viewRegistroSHCP513");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp514>(entity =>
            {
                entity.ToView("viewRegistroSHCP514");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp516>(entity =>
            {
                entity.ToView("viewRegistroSHCP516");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp520>(entity =>
            {
                entity.ToView("viewRegistroSHCP520");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp551>(entity =>
            {
                entity.ToView("viewRegistroSHCP551");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp552>(entity =>
            {
                entity.ToView("viewRegistroSHCP552");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp553>(entity =>
            {
                entity.ToView("viewRegistroSHCP553");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp554>(entity =>
            {
                entity.ToView("viewRegistroSHCP554");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp555>(entity =>
            {
                entity.ToView("viewRegistroSHCP555");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp556>(entity =>
            {
                entity.ToView("viewRegistroSHCP556");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp557>(entity =>
            {
                entity.ToView("viewRegistroSHCP557");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp558>(entity =>
            {
                entity.ToView("viewRegistroSHCP558");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp601>(entity =>
            {
                entity.ToView("viewRegistroSHCP601");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp701>(entity =>
            {
                entity.ToView("viewRegistroSHCP701");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp702>(entity =>
            {
                entity.ToView("viewRegistroSHCP702");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<ViewRegistroShcp800>(entity =>
            {
                entity.ToView("viewRegistroSHCP800");

                entity.Property(e => e.Referencia).IsUnicode(false);

                entity.Property(e => e.RegistroValidacion).IsUnicode(false);
            });

            modelBuilder.Entity<VwCpStatusDcto>(entity =>
            {
                entity.ToView("VW_CP_STATUS_DCTO");

                entity.Property(e => e.NombreBeneficiario).IsUnicode(false);
            });

            modelBuilder.Entity<VwFechaActual>(entity =>
            {
                entity.ToView("vwFechaActual");
            });

            modelBuilder.Entity<Wdigitalizacion>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Digitalizacion });

                entity.Property(e => e.IdAplicacion).HasDefaultValueSql("((1))");

                entity.Property(e => e.Extencion).IsUnicode(false);
            });

            modelBuilder.Entity<WdigitalizacionCliDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdCliente, e.Digitalizacion });

                entity.Property(e => e.IdCliente).IsUnicode(false);
            });

            modelBuilder.Entity<WdigitalizacionCliente>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdCliente });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.RutaDigitalizacion).IsUnicode(false);

                entity.Property(e => e.RutaEdocument).IsUnicode(false);

                entity.Property(e => e.RutaWeb).IsUnicode(false);
            });

            modelBuilder.Entity<WdigitalizacionDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Digitalizacion, e.Parametro });

                entity.Property(e => e.IdAplicacion).HasDefaultValueSql("((1))");

                entity.Property(e => e.Parametro).IsUnicode(false);

                entity.Property(e => e.Separador).IsUnicode(false);

                entity.Property(e => e.Valor).IsUnicode(false);
            });

            modelBuilder.Entity<WdigitalizacionDocumento>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Documento });

                entity.Property(e => e.IdAplicacion).HasDefaultValueSql("((1))");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.Extencion).IsUnicode(false);
            });

            modelBuilder.Entity<WdigitalizacionGenerale>(entity =>
            {
                entity.Property(e => e.IdAplicacion).HasDefaultValueSql("((1))");

                entity.Property(e => e.ConsecutivoArchivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Descripcion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.RutaDigitalizacion).IsUnicode(false);

                entity.Property(e => e.UrlWeb).IsUnicode(false);
            });

            modelBuilder.Entity<WdigitalizacionModulo>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdModulo });

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<WdigitalizacionModuloDoc>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdModulo, e.Documento });
            });

            modelBuilder.Entity<WdigitalizacionParametro>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Parametro });

                entity.Property(e => e.IdAplicacion).HasDefaultValueSql("((1))");

                entity.Property(e => e.Parametro).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<WdigitalizacionReferencium>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdCliente, e.IdReferencia, e.IdModulo, e.Documento, e.Numero });

                entity.Property(e => e.IdAplicacion).HasDefaultValueSql("((1))");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdReferencia).IsUnicode(false);

                entity.Property(e => e.IdModulo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.ArchivoWeb).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<WebAcceso>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdAcceso })
                    .HasName("PK__webAcces__3C73853804FAC83F");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.RolAcceso).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebAplicacion>(entity =>
            {
                entity.HasKey(e => e.IdAplicacion)
                    .HasName("PK__webAplic__038AB25E0C9BEA07");

                entity.Property(e => e.IdAplicacion).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.PathDocumentos).IsUnicode(false);

                entity.Property(e => e.PathLogotipo).IsUnicode(false);

                entity.Property(e => e.PathReportes).IsUnicode(false);

                entity.Property(e => e.PathUrl).IsUnicode(false);
            });

            modelBuilder.Entity<WebAplicacionCorreo>(entity =>
            {
                entity.HasKey(e => e.IdAplicacion)
                    .HasName("PK__webAplic__038AB25E11609F24");

                entity.Property(e => e.IdAplicacion).ValueGeneratedNever();

                entity.Property(e => e.EmailUserName).IsUnicode(false);

                entity.Property(e => e.SmtpAuth).HasDefaultValueSql("((1))");

                entity.Property(e => e.SmtpProtocol).IsUnicode(false);
            });

            modelBuilder.Entity<WebClasificacionUsuario>(entity =>
            {
                entity.HasKey(e => e.IdClasificacion)
                    .HasName("PK__webClasi__814AB99F15313008");

                entity.Property(e => e.IdClasificacion).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<WebErrorLog>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.FechaIngreso })
                    .HasName("PK__webError__6F557552CE912DC9");

                entity.Property(e => e.IpAddres).IsUnicode(false);

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<WebGrupo>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Grupo })
                    .HasName("PK__webGrupo__A256F9211901C0EC");

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Logo).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebGrupoCliente>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Grupo, e.Cliente })
                    .HasName("PK__webGrupo__F6A63AB61CD251D0");

                entity.Property(e => e.Grupo).IsUnicode(false);

                entity.Property(e => e.Cliente).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<WebGrupoPerfilCliente>(entity =>
            {
                entity.HasKey(e => e.IdGrupo)
                    .HasName("PK__webGrupo__8B68D6888CCB86A4");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebLocale>(entity =>
            {
                entity.HasKey(e => e.Locale)
                    .HasName("PK__webLocal__BFD788C0012A375B");

                entity.Property(e => e.Locale).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<WebModulo>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Modulo })
                    .HasName("PK__webModul__67C68DB76A46D203");

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.DescripcionEs).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebModuloReporte>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Modulo, e.Reporte })
                    .HasName("PK__webModul__AB503C7F6676411F");

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<WebPagina>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Pagina })
                    .HasName("PK__webPagin__76553A7D563FD956");

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.DescripcionEs).IsUnicode(false);

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporte>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Reporte })
                    .HasName("PK_reporte_reportereporte_");

                entity.Property(e => e.CodigoIso).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionCliente).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.Encabezado).IsUnicode(false);

                entity.Property(e => e.Header).HasDefaultValueSql("((1))");

                entity.Property(e => e.NombreArchivo).IsUnicode(false);

                entity.Property(e => e.NombreReporte).IsUnicode(false);

                entity.Property(e => e.RevisionIso).IsUnicode(false);

                entity.Property(e => e.SpColumnas).IsUnicode(false);

                entity.Property(e => e.SpDatos).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteAcceso>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Reporte, e.IdAcceso })
                    .HasName("PK__webRepor__A91E3DA408CB5923");

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteCliente>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Reporte, e.IdCliente })
                    .HasName("PKwebReporteCliente");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.CodigoIso).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.Documentos).HasDefaultValueSql("((0))");

                entity.Property(e => e.Encabezado).IsUnicode(false);

                entity.Property(e => e.Header).HasDefaultValueSql("((1))");

                entity.Property(e => e.NombreArchivo).IsUnicode(false);

                entity.Property(e => e.RevisionIso).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteClienteColumna>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Reporte, e.IdCliente, e.Columna })
                    .HasName("PK__webRepor__294B6186B1B16EE5");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.Columna).IsUnicode(false);

                entity.Property(e => e.ColumnaEn).IsUnicode(false);

                entity.Property(e => e.ColumnaEs).IsUnicode(false);

                entity.Property(e => e.Pattern).IsUnicode(false);

                entity.Property(e => e.PatternEn).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteClienteDocumento>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Reporte, e.IdCliente, e.IdAplicacion1, e.IdDocumento });

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdAplicacion1).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteClienteEmail>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Reporte, e.IdCliente, e.IdEmail })
                    .HasName("PKwebReporteCliente_email");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteClienteObservacion>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Reporte, e.IdCliente, e.IdProveedor, e.Consecutivo })
                    .HasName("PKwebReporteClienteObservacion");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdProveedor).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteColumna>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Reporte, e.Columna })
                    .HasName("PK__webRepor__B63AA8137F496099");

                entity.Property(e => e.Columna).IsUnicode(false);

                entity.Property(e => e.ColumnaEn).IsUnicode(false);

                entity.Property(e => e.ColumnaEs).IsUnicode(false);

                entity.Property(e => e.Pattern).IsUnicode(false);

                entity.Property(e => e.PatternEn).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteColumnaPersonal>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Reporte, e.Consecutivo, e.Columna })
                    .HasName("PK__webRepor__FBDAF73AD545D51E");

                entity.Property(e => e.Columna).IsUnicode(false);

                entity.Property(e => e.ColumnaEn).IsUnicode(false);

                entity.Property(e => e.ColumnaEs).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteDinamico>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdReporte })
                    .HasName("PKwebReporteDinamico");

                entity.Property(e => e.IdReporte).IsUnicode(false);

                entity.Property(e => e.GrupoColumna).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteLeyendum>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Reporte, e.ConsecutivoLeyenda })
                    .HasName("PK__web_repo__D7F6286D20A9117E");

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteLeyendum1>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Reporte, e.Consecutivo, e.Patente, e.Aduana, e.Seccion })
                    .HasName("PKwebReporteLeyenda");

                entity.Property(e => e.Patente).IsUnicode(false);

                entity.Property(e => e.Aduana).IsUnicode(false);

                entity.Property(e => e.Seccion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdAgenciaAduanal).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteNotificacion>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdReporte, e.Secuencial })
                    .HasName("PKweb_reporte_notificacion");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Encabezado).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteNotificacionEmail>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdReporte, e.Secuencial, e.IdEmail })
                    .HasName("PKweb_reporte_notificacion_email");

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteNotificacionParametro>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdReporte, e.Secuencial, e.SecuencialParametro })
                    .HasName("PKweb_reporte_notificacion_parametro");

                entity.Property(e => e.IdParametro).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);

                entity.Property(e => e.Valor).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteParametro>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdReporte, e.IdParametro })
                    .HasName("PKweb_reporte_parametro");

                entity.Property(e => e.IdParametro).IsUnicode(false);
            });

            modelBuilder.Entity<WebReportePersonal>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Reporte, e.Consecutivo })
                    .HasName("PKwebReporte_personal");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.Observacion).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteTemplate>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Reporte, e.Secuencial })
                    .HasName("PKweb_reporte_template");

                entity.Property(e => e.ClienteTemplate).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.FilaInicio).HasDefaultValueSql("((0))");

                entity.Property(e => e.GrupoTemplate).IsUnicode(false);

                entity.Property(e => e.Header).HasDefaultValueSql("((1))");

                entity.Property(e => e.IdTipoTemplate)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);

                entity.Property(e => e.UsuarioTemplate).IsUnicode(false);
            });

            modelBuilder.Entity<WebReporteTemplateColumna>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Reporte, e.Secuencial, e.Columna })
                    .HasName("PKweb_reporte_template_columna");

                entity.Property(e => e.Columna).IsUnicode(false);

                entity.Property(e => e.ColumnaEn).IsUnicode(false);

                entity.Property(e => e.ColumnaEs).IsUnicode(false);

                entity.Property(e => e.Pattern).IsUnicode(false);

                entity.Property(e => e.PatternEn).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebRol>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Rol })
                    .HasName("PK__webRol__6FA1CB8C71E7F3CB");

                entity.Property(e => e.CambiarAlmacen).HasDefaultValueSql("((0))");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.EditarVehiculo).HasDefaultValueSql("((0))");

                entity.Property(e => e.Observaciones).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebRolAlmacen>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Rol, e.IdBodega });

                entity.Property(e => e.IdBodega).IsUnicode(false);
            });

            modelBuilder.Entity<WebRolDefault>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Rol })
                    .HasName("PKwebRol_default");

                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.IdAgenciaAduanal).IsUnicode(false);

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdMoneda).IsUnicode(false);

                entity.Property(e => e.IdPaisOrigen).IsUnicode(false);

                entity.Property(e => e.IdPatente).IsUnicode(false);

                entity.Property(e => e.IdTipoEmbarque)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdTipoVehiculo).IsUnicode(false);

                entity.Property(e => e.LocalizacionAlmacen).IsUnicode(false);

                entity.Property(e => e.MonedaFlete).IsUnicode(false);

                entity.Property(e => e.SeccionAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoBulto).IsUnicode(false);

                entity.Property(e => e.TipoGuia)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TipoTransporte).IsUnicode(false);
            });

            modelBuilder.Entity<WebRolModulo>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Rol, e.Modulo })
                    .HasName("PK__webRolMo__F9E508726E1762E7");

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);
            });

            modelBuilder.Entity<WebSemaforo>(entity =>
            {
                entity.Property(e => e.Semaforo)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.DescripcionEs).IsUnicode(false);
            });

            modelBuilder.Entity<WebTipoUsuario>(entity =>
            {
                entity.HasKey(e => e.TipoUsuario)
                    .HasName("PK__webTipoU__A9585C047D59A677");

                entity.Property(e => e.TipoUsuario)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<WebUsuario>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Usuario })
                    .HasName("PK__webUsuar__6A254AA275B884AF");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.Activo).HasDefaultValueSql("((1))");

                entity.Property(e => e.ClienteGrupo).IsUnicode(false);

                entity.Property(e => e.CorreoElectronico).IsUnicode(false);

                entity.Property(e => e.Locale).IsUnicode(false);

                entity.Property(e => e.Logo).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.PasswordDuplicarFactura).IsUnicode(false);

                entity.Property(e => e.Puesto).IsUnicode(false);

                entity.Property(e => e.Theme).IsUnicode(false);

                entity.Property(e => e.TipoUsuario)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioAduasis).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebUsuarioColumna>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Usuario, e.Reporte, e.ReporteConsecutivo, e.Columna })
                    .HasName("PK__webUsuar__0E5EA98962A5B03B");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.Columna).IsUnicode(false);

                entity.Property(e => e.ColumnaEn).IsUnicode(false);

                entity.Property(e => e.ColumnaEs).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebUsuarioError>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Usuario, e.FechaIngreso })
                    .HasName("PK__webUsuar__ACE8B6D277458B1F");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.IpAddres).IsUnicode(false);
            });

            modelBuilder.Entity<WebUsuarioPassword>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Usuario })
                    .HasName("PK__webUsuar__6A254AA279891593");

                entity.Property(e => e.Usuario).IsUnicode(false);
            });

            modelBuilder.Entity<WebUsuarioReporte>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Usuario, e.Reporte, e.ReporteConsecutivo })
                    .HasName("PK__webUsuar__CF22728F5ED51F57");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.DescripcionEs).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WebUsuarioSucursal>(entity =>
            {
                entity.HasKey(e => e.Usuario)
                    .HasName("PKwebUsuarioSucursal");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.IdAlmacen).IsUnicode(false);

                entity.Property(e => e.IdLocalizacion).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WrBitacora>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdConfiguracion, e.FechaEnvio })
                    .HasName("PK__wr_bitac__FF788F702A35D4D7");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Intentos).HasDefaultValueSql("((1))");

                entity.Property(e => e.Parametros).IsUnicode(false);
            });

            modelBuilder.Entity<WrBitacoraModificacionCorreo>(entity =>
            {
                entity.HasKey(e => e.IdRegistro)
                    .HasName("PK__wr_bitac__48155C1FB45E233C");

                entity.Property(e => e.IdRegistro).ValueGeneratedNever();

                entity.Property(e => e.Cambio).IsUnicode(false);

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.IdUsuario).IsUnicode(false);
            });

            modelBuilder.Entity<WrColumnaParametro>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Reporte, e.Parametro })
                    .HasName("PK__wr_colum__86462F44A5DBD308");

                entity.Property(e => e.Parametro).IsUnicode(false);
            });

            modelBuilder.Entity<WrConfiguracion>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdConfiguracion })
                    .HasName("PK__wr_confi__12BEE4A1A6EDAB80");

                entity.Property(e => e.AsuntoEmail).IsUnicode(false);

                entity.Property(e => e.IdDigitalizacion).IsUnicode(false);

                entity.Property(e => e.Locale).IsUnicode(false);
            });

            modelBuilder.Entity<WrConfiguracionColumnaParametro>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdConfiguracion, e.Parametro })
                    .HasName("PK__wr_confi__8E472023F19528BE");

                entity.Property(e => e.Parametro).IsUnicode(false);

                entity.Property(e => e.Valor).IsUnicode(false);
            });

            modelBuilder.Entity<WrConfiguracionDirectorio>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdConfiguracion })
                    .HasName("PKwr_configuracion_directorio");

                entity.Property(e => e.FtpDirectorio).IsUnicode(false);

                entity.Property(e => e.FtpHost).IsUnicode(false);

                entity.Property(e => e.FtpPassword).IsUnicode(false);

                entity.Property(e => e.FtpUsuario).IsUnicode(false);

                entity.Property(e => e.Ruta).IsUnicode(false);
            });

            modelBuilder.Entity<WrConfiguracionEmail>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdConfiguracion, e.IdEmail })
                    .HasName("PK__wr_confi__CC4D57D952F1EF84");

                entity.Property(e => e.Activo).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<WrConfiguracionParametro>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdConfiguracion, e.Parametro })
                    .HasName("PK__wr_confi__8E47202307145C20");

                entity.Property(e => e.Parametro).IsUnicode(false);

                entity.Property(e => e.Valor).IsUnicode(false);
            });

            modelBuilder.Entity<WrDiaSemana>(entity =>
            {
                entity.HasKey(e => e.Dia)
                    .HasName("PK__wr_dia_s__D877D213500BF7B5");

                entity.Property(e => e.Dia).ValueGeneratedNever();

                entity.Property(e => e.Clave).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<WrEmail>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdEmail })
                    .HasName("PK__wr_email__3CEFC0C776B87CB8");

                entity.Property(e => e.Activo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Nombre).IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<WrEmailAduana>(entity =>
            {
                entity.Property(e => e.IdAduana).IsUnicode(false);

                entity.Property(e => e.SeccionAduana)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.Faduana)
                    .WithMany()
                    .HasForeignKey(d => new { d.IdAduana, d.SeccionAduana })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_wr_email_aduana_faduana");
            });

            modelBuilder.Entity<WrEmailAlmacen>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdEmail, e.IdBodega });

                entity.Property(e => e.IdBodega).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WrEmailCliente>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdEmail, e.IdCliente })
                    .HasName("PKwr_email_cliente");

                entity.Property(e => e.IdCliente).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WrEmailPlantum>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdEmail, e.IdPlanta })
                    .HasName("PK_wr_email_tipo_planta");

                entity.Property(e => e.IdPlanta).IsUnicode(false);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WrEmailRegiman>(entity =>
            {
                entity.Property(e => e.CveTipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IdRegimen).IsUnicode(false);
            });

            modelBuilder.Entity<WrEmailTipoOperacion>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.IdEmail, e.TipoOperacion });

                entity.Property(e => e.TipoOperacion)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UsuarioIngreso).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WrFormato>(entity =>
            {
                entity.HasKey(e => e.IdFormato)
                    .HasName("PK__wr_forma__8C0C34B7B4DFA991");

                entity.Property(e => e.IdFormato).ValueGeneratedNever();

                entity.Property(e => e.Clave).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);
            });

            modelBuilder.Entity<WrParametro>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Parametro })
                    .HasName("PK__wr_param__1C48BF639B553D3D");

                entity.Property(e => e.Parametro).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);
            });

            modelBuilder.Entity<WrPeriodo>(entity =>
            {
                entity.HasKey(e => e.IdPeriodo)
                    .HasName("PK__wr_perio__801188B72ADBC393");

                entity.Property(e => e.IdPeriodo).ValueGeneratedNever();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionEn).IsUnicode(false);
            });

            modelBuilder.Entity<WrRegistroModuloRol>(entity =>
            {
                entity.Property(e => e.ModificaModuloRol).IsUnicode(false);

                entity.Property(e => e.UsuarioModifica).IsUnicode(false);
            });

            modelBuilder.Entity<WrReporteParametro>(entity =>
            {
                entity.HasKey(e => new { e.IdAplicacion, e.Reporte, e.Parametro })
                    .HasName("PK__wr_repor__86462F44AA7E8C8C");

                entity.Property(e => e.Parametro).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
